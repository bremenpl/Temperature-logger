
Termometr_pamiec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00003466  000034fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000220  0080023e  0080023e  00003638  2**0
                  ALLOC
  3 .stab         00001140  00000000  00000000  00003638  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005a9  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004d21  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000a98  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e5e6  00000000  00000000  000057e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d04  00000000  00000000  00013dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001983a  00000000  00000000  00017ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001de4  00000000  00000000  0003130c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0001a0fb  00000000  00000000  000330f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a4fc  00000000  00000000  0004d1eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012d0  00000000  00000000  000576e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c2b6  00000000  00000000  000589b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
       2:	00 00       	nop
       4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
       6:	00 00       	nop
       8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
       a:	00 00       	nop
       c:	79 c3       	rjmp	.+1778   	; 0x700 <__vector_3>
       e:	00 00       	nop
      10:	95 c2       	rjmp	.+1322   	; 0x53c <__vector_4>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
      16:	00 00       	nop
      18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	25 c3       	rjmp	.+1610   	; 0x668 <__vector_7>
      1e:	00 00       	nop
      20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
      22:	00 00       	nop
      24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__vector_10>
      2c:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__vector_11>
      30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
      32:	00 00       	nop
      34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
      36:	00 00       	nop
      38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
      3e:	00 00       	nop
      40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
      42:	00 00       	nop
      44:	ab c2       	rjmp	.+1366   	; 0x59c <__vector_17>
      46:	00 00       	nop
      48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
      4e:	00 00       	nop
      50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c2       	rjmp	.+1188   	; 0x4fa <__vector_21>
      56:	00 00       	nop
      58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
      5e:	00 00       	nop
      60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
      62:	00 00       	nop
      64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
      66:	00 00       	nop
      68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
      6e:	00 00       	nop
      70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
      72:	00 00       	nop
      74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
      76:	00 00       	nop
      78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
      7e:	00 00       	nop
      80:	bd c2       	rjmp	.+1402   	; 0x5fc <__vector_32>
      82:	00 00       	nop
      84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
      86:	00 00       	nop
      88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
      8e:	00 00       	nop
      90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
      92:	00 00       	nop
      94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
      96:	00 00       	nop
      98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e6 e6       	ldi	r30, 0x66	; 102
     14c:	f4 e3       	ldi	r31, 0x34	; 52
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	ae 33       	cpi	r26, 0x3E	; 62
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	24 e0       	ldi	r18, 0x04	; 4
     15c:	ae e3       	ldi	r26, 0x3E	; 62
     15e:	b2 e0       	ldi	r27, 0x02	; 2
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	ae 35       	cpi	r26, 0x5E	; 94
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	0e 94 cc 13 	call	0x2798	; 0x2798 <main>
     16e:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <_exit>

00000172 <__bad_interrupt>:
     172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <buf_cls>:

// wys³anie znaków z bufora o d³ugoœci len
void buf_str_ex(char *s, uint8_t len) {
	while(len--) buf_char(active_buf, *s++);

}
     174:	40 e2       	ldi	r20, 0x20	; 32
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	60 e2       	ldi	r22, 0x20	; 32
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	80 91 00 01 	lds	r24, 0x0100
     180:	90 91 01 01 	lds	r25, 0x0101
     184:	0e 94 67 17 	call	0x2ece	; 0x2ece <memset>
     188:	10 92 5d 02 	sts	0x025D, r1
     18c:	10 92 66 02 	sts	0x0266, r1
     190:	08 95       	ret

00000192 <create_obj>:
     192:	cf 92       	push	r12
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	0f 93       	push	r16
     19a:	cf 93       	push	r28
     19c:	fc 01       	movw	r30, r24
     19e:	80 91 5e 02 	lds	r24, 0x025E
     1a2:	90 91 5f 02 	lds	r25, 0x025F
     1a6:	89 2b       	or	r24, r25
     1a8:	f1 f0       	breq	.+60     	; 0x1e6 <create_obj+0x54>
     1aa:	80 91 60 02 	lds	r24, 0x0260
     1ae:	90 91 61 02 	lds	r25, 0x0261
     1b2:	89 2b       	or	r24, r25
     1b4:	81 f0       	breq	.+32     	; 0x1d6 <create_obj+0x44>
     1b6:	80 91 62 02 	lds	r24, 0x0262
     1ba:	90 91 63 02 	lds	r25, 0x0263
     1be:	89 2b       	or	r24, r25
     1c0:	71 f0       	breq	.+28     	; 0x1de <create_obj+0x4c>
     1c2:	80 91 64 02 	lds	r24, 0x0264
     1c6:	90 91 65 02 	lds	r25, 0x0265
     1ca:	89 2b       	or	r24, r25
     1cc:	19 f5       	brne	.+70     	; 0x214 <create_obj+0x82>
     1ce:	c3 e0       	ldi	r28, 0x03	; 3
     1d0:	a3 e0       	ldi	r26, 0x03	; 3
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	0b c0       	rjmp	.+22     	; 0x1ec <create_obj+0x5a>
     1d6:	c1 e0       	ldi	r28, 0x01	; 1
     1d8:	a1 e0       	ldi	r26, 0x01	; 1
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	07 c0       	rjmp	.+14     	; 0x1ec <create_obj+0x5a>
     1de:	c2 e0       	ldi	r28, 0x02	; 2
     1e0:	a2 e0       	ldi	r26, 0x02	; 2
     1e2:	b0 e0       	ldi	r27, 0x00	; 0
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <create_obj+0x5a>
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	c0 e0       	ldi	r28, 0x00	; 0
     1ec:	61 83       	std	Z+1, r22	; 0x01
     1ee:	40 83       	st	Z, r20
     1f0:	22 83       	std	Z+2, r18	; 0x02
     1f2:	03 83       	std	Z+3, r16	; 0x03
     1f4:	d6 a2       	std	Z+38, r13	; 0x26
     1f6:	c5 a2       	std	Z+37, r12	; 0x25
     1f8:	e4 82       	std	Z+4, r14	; 0x04
     1fa:	aa 0f       	add	r26, r26
     1fc:	bb 1f       	adc	r27, r27
     1fe:	a2 5a       	subi	r26, 0xA2	; 162
     200:	bd 4f       	sbci	r27, 0xFD	; 253
     202:	ed 93       	st	X+, r30
     204:	fc 93       	st	X, r31
     206:	35 96       	adiw	r30, 0x05	; 5
     208:	f0 93 01 01 	sts	0x0101, r31
     20c:	e0 93 00 01 	sts	0x0100, r30
     210:	b1 df       	rcall	.-158    	; 0x174 <buf_cls>
     212:	01 c0       	rjmp	.+2      	; 0x216 <create_obj+0x84>
     214:	cf ef       	ldi	r28, 0xFF	; 255
     216:	8c 2f       	mov	r24, r28
     218:	cf 91       	pop	r28
     21a:	0f 91       	pop	r16
     21c:	ef 90       	pop	r14
     21e:	df 90       	pop	r13
     220:	cf 90       	pop	r12
     222:	08 95       	ret

00000224 <buf_lcd_init>:
     224:	49 d3       	rcall	.+1682   	; 0x8b8 <lcd_init>
     226:	10 92 5f 02 	sts	0x025F, r1
     22a:	10 92 5e 02 	sts	0x025E, r1
     22e:	10 92 61 02 	sts	0x0261, r1
     232:	10 92 60 02 	sts	0x0260, r1
     236:	10 92 63 02 	sts	0x0263, r1
     23a:	10 92 62 02 	sts	0x0262, r1
     23e:	10 92 65 02 	sts	0x0265, r1
     242:	10 92 64 02 	sts	0x0264, r1
     246:	96 cf       	rjmp	.-212    	; 0x174 <buf_cls>

00000248 <buf_locate>:
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	18 f4       	brcc	.+6      	; 0x252 <buf_locate+0xa>
     24c:	80 93 5d 02 	sts	0x025D, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <buf_locate+0xe>
     252:	10 92 5d 02 	sts	0x025D, r1
     256:	60 31       	cpi	r22, 0x10	; 16
     258:	18 f4       	brcc	.+6      	; 0x260 <buf_locate+0x18>
     25a:	60 93 66 02 	sts	0x0266, r22
     25e:	08 95       	ret
     260:	10 92 66 02 	sts	0x0266, r1
     264:	08 95       	ret

00000266 <buf_char>:
     266:	20 91 5d 02 	lds	r18, 0x025D
     26a:	22 30       	cpi	r18, 0x02	; 2
     26c:	98 f4       	brcc	.+38     	; 0x294 <buf_char+0x2e>
     26e:	40 91 66 02 	lds	r20, 0x0266
     272:	40 31       	cpi	r20, 0x10	; 16
     274:	78 f4       	brcc	.+30     	; 0x294 <buf_char+0x2e>
     276:	50 e1       	ldi	r21, 0x10	; 16
     278:	25 9f       	mul	r18, r21
     27a:	90 01       	movw	r18, r0
     27c:	11 24       	eor	r1, r1
     27e:	24 0f       	add	r18, r20
     280:	31 1d       	adc	r19, r1
     282:	fc 01       	movw	r30, r24
     284:	e2 0f       	add	r30, r18
     286:	f3 1f       	adc	r31, r19
     288:	60 83       	st	Z, r22
     28a:	80 91 66 02 	lds	r24, 0x0266
     28e:	8f 5f       	subi	r24, 0xFF	; 255
     290:	80 93 66 02 	sts	0x0266, r24
     294:	08 95       	ret

00000296 <copy_buf>:
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	ec 01       	movw	r28, r24
     2a8:	88 e6       	ldi	r24, 0x68	; 104
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	90 93 01 01 	sts	0x0101, r25
     2b0:	80 93 00 01 	sts	0x0100, r24
     2b4:	c8 80       	ld	r12, Y
     2b6:	8c 2d       	mov	r24, r12
     2b8:	99 27       	eor	r25, r25
     2ba:	87 fd       	sbrc	r24, 7
     2bc:	90 95       	com	r25
     2be:	2b 81       	ldd	r18, Y+3	; 0x03
     2c0:	ac 01       	movw	r20, r24
     2c2:	42 0f       	add	r20, r18
     2c4:	51 1d       	adc	r21, r1
     2c6:	84 17       	cp	r24, r20
     2c8:	95 07       	cpc	r25, r21
     2ca:	0c f0       	brlt	.+2      	; 0x2ce <copy_buf+0x38>
     2cc:	52 c0       	rjmp	.+164    	; 0x372 <copy_buf+0xdc>
     2ce:	1c 2d       	mov	r17, r12
     2d0:	f1 2e       	mov	r15, r17
     2d2:	fc 18       	sub	r15, r12
     2d4:	69 81       	ldd	r22, Y+1	; 0x01
     2d6:	81 2f       	mov	r24, r17
     2d8:	b7 df       	rcall	.-146    	; 0x248 <buf_locate>
     2da:	d9 80       	ldd	r13, Y+1	; 0x01
     2dc:	2d 2d       	mov	r18, r13
     2de:	33 27       	eor	r19, r19
     2e0:	27 fd       	sbrc	r18, 7
     2e2:	30 95       	com	r19
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	a9 01       	movw	r20, r18
     2e8:	48 0f       	add	r20, r24
     2ea:	51 1d       	adc	r21, r1
     2ec:	24 17       	cp	r18, r20
     2ee:	35 07       	cpc	r19, r21
     2f0:	84 f5       	brge	.+96     	; 0x352 <copy_buf+0xbc>
     2f2:	0d 2d       	mov	r16, r13
     2f4:	ce 01       	movw	r24, r28
     2f6:	20 e1       	ldi	r18, 0x10	; 16
     2f8:	f2 9e       	mul	r15, r18
     2fa:	80 0d       	add	r24, r0
     2fc:	91 1d       	adc	r25, r1
     2fe:	11 24       	eor	r1, r1
     300:	7c 01       	movw	r14, r24
     302:	80 2f       	mov	r24, r16
     304:	8d 19       	sub	r24, r13
     306:	00 31       	cpi	r16, 0x10	; 16
     308:	ac f4       	brge	.+42     	; 0x334 <copy_buf+0x9e>
     30a:	12 30       	cpi	r17, 0x02	; 2
     30c:	9c f4       	brge	.+38     	; 0x334 <copy_buf+0x9e>
     30e:	00 23       	and	r16, r16
     310:	8c f0       	brlt	.+34     	; 0x334 <copy_buf+0x9e>
     312:	11 23       	and	r17, r17
     314:	7c f0       	brlt	.+30     	; 0x334 <copy_buf+0x9e>
     316:	f7 01       	movw	r30, r14
     318:	e8 0f       	add	r30, r24
     31a:	f1 1d       	adc	r31, r1
     31c:	65 81       	ldd	r22, Z+5	; 0x05
     31e:	6e 35       	cpi	r22, 0x5E	; 94
     320:	21 f0       	breq	.+8      	; 0x32a <copy_buf+0x94>
     322:	88 e6       	ldi	r24, 0x68	; 104
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	9f df       	rcall	.-194    	; 0x266 <buf_char>
     328:	05 c0       	rjmp	.+10     	; 0x334 <copy_buf+0x9e>
     32a:	80 91 66 02 	lds	r24, 0x0266
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	80 93 66 02 	sts	0x0266, r24
     334:	0f 5f       	subi	r16, 0xFF	; 255
     336:	40 2f       	mov	r20, r16
     338:	55 27       	eor	r21, r21
     33a:	47 fd       	sbrc	r20, 7
     33c:	50 95       	com	r21
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	2a 81       	ldd	r18, Y+2	; 0x02
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	28 0f       	add	r18, r24
     346:	31 1d       	adc	r19, r1
     348:	87 fd       	sbrc	r24, 7
     34a:	3a 95       	dec	r19
     34c:	42 17       	cp	r20, r18
     34e:	53 07       	cpc	r21, r19
     350:	c4 f2       	brlt	.-80     	; 0x302 <copy_buf+0x6c>
     352:	1f 5f       	subi	r17, 0xFF	; 255
     354:	41 2f       	mov	r20, r17
     356:	55 27       	eor	r21, r21
     358:	47 fd       	sbrc	r20, 7
     35a:	50 95       	com	r21
     35c:	88 81       	ld	r24, Y
     35e:	2b 81       	ldd	r18, Y+3	; 0x03
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	28 0f       	add	r18, r24
     364:	31 1d       	adc	r19, r1
     366:	87 fd       	sbrc	r24, 7
     368:	3a 95       	dec	r19
     36a:	42 17       	cp	r20, r18
     36c:	53 07       	cpc	r21, r19
     36e:	0c f4       	brge	.+2      	; 0x372 <copy_buf+0xdc>
     370:	af cf       	rjmp	.-162    	; 0x2d0 <copy_buf+0x3a>
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	08 95       	ret

00000384 <BARREL_EVENT>:
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <BARREL_EVENT+0x6>
     38a:	1f 92       	push	r1
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	1b 82       	std	Y+3, r1	; 0x03
     392:	90 91 88 02 	lds	r25, 0x0288
     396:	20 91 02 01 	lds	r18, 0x0102
     39a:	29 17       	cp	r18, r25
     39c:	09 f4       	brne	.+2      	; 0x3a0 <BARREL_EVENT+0x1c>
     39e:	72 c0       	rjmp	.+228    	; 0x484 <BARREL_EVENT+0x100>
     3a0:	88 23       	and	r24, r24
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <BARREL_EVENT+0x22>
     3a4:	44 c0       	rjmp	.+136    	; 0x42e <BARREL_EVENT+0xaa>
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	84 30       	cpi	r24, 0x04	; 4
     3aa:	08 f0       	brcs	.+2      	; 0x3ae <BARREL_EVENT+0x2a>
     3ac:	40 c0       	rjmp	.+128    	; 0x42e <BARREL_EVENT+0xaa>
     3ae:	eb 81       	ldd	r30, Y+3	; 0x03
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e2 5a       	subi	r30, 0xA2	; 162
     3b8:	fd 4f       	sbci	r31, 0xFD	; 253
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	89 2b       	or	r24, r25
     3c0:	79 f1       	breq	.+94     	; 0x420 <BARREL_EVENT+0x9c>
     3c2:	eb 81       	ldd	r30, Y+3	; 0x03
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	ee 0f       	add	r30, r30
     3c8:	ff 1f       	adc	r31, r31
     3ca:	e2 5a       	subi	r30, 0xA2	; 162
     3cc:	fd 4f       	sbci	r31, 0xFD	; 253
     3ce:	01 90       	ld	r0, Z+
     3d0:	f0 81       	ld	r31, Z
     3d2:	e0 2d       	mov	r30, r0
     3d4:	85 a1       	ldd	r24, Z+37	; 0x25
     3d6:	96 a1       	ldd	r25, Z+38	; 0x26
     3d8:	89 2b       	or	r24, r25
     3da:	69 f0       	breq	.+26     	; 0x3f6 <BARREL_EVENT+0x72>
     3dc:	eb 81       	ldd	r30, Y+3	; 0x03
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	ee 0f       	add	r30, r30
     3e2:	ff 1f       	adc	r31, r31
     3e4:	e2 5a       	subi	r30, 0xA2	; 162
     3e6:	fd 4f       	sbci	r31, 0xFD	; 253
     3e8:	01 90       	ld	r0, Z+
     3ea:	f0 81       	ld	r31, Z
     3ec:	e0 2d       	mov	r30, r0
     3ee:	05 a0       	ldd	r0, Z+37	; 0x25
     3f0:	f6 a1       	ldd	r31, Z+38	; 0x26
     3f2:	e0 2d       	mov	r30, r0
     3f4:	09 95       	icall
     3f6:	eb 81       	ldd	r30, Y+3	; 0x03
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	e2 5a       	subi	r30, 0xA2	; 162
     400:	fd 4f       	sbci	r31, 0xFD	; 253
     402:	01 90       	ld	r0, Z+
     404:	f0 81       	ld	r31, Z
     406:	e0 2d       	mov	r30, r0
     408:	84 81       	ldd	r24, Z+4	; 0x04
     40a:	88 23       	and	r24, r24
     40c:	49 f0       	breq	.+18     	; 0x420 <BARREL_EVENT+0x9c>
     40e:	eb 81       	ldd	r30, Y+3	; 0x03
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	ee 0f       	add	r30, r30
     414:	ff 1f       	adc	r31, r31
     416:	e2 5a       	subi	r30, 0xA2	; 162
     418:	fd 4f       	sbci	r31, 0xFD	; 253
     41a:	80 81       	ld	r24, Z
     41c:	91 81       	ldd	r25, Z+1	; 0x01
     41e:	3b df       	rcall	.-394    	; 0x296 <copy_buf>
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	8f 5f       	subi	r24, 0xFF	; 255
     424:	8b 83       	std	Y+3, r24	; 0x03
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	84 30       	cpi	r24, 0x04	; 4
     42a:	08 f4       	brcc	.+2      	; 0x42e <BARREL_EVENT+0xaa>
     42c:	c0 cf       	rjmp	.-128    	; 0x3ae <BARREL_EVENT+0x2a>
     42e:	80 91 88 02 	lds	r24, 0x0288
     432:	80 fd       	sbrc	r24, 0
     434:	23 c0       	rjmp	.+70     	; 0x47c <BARREL_EVENT+0xf8>
     436:	19 82       	std	Y+1, r1	; 0x01
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	f8 f4       	brcc	.+62     	; 0x47c <BARREL_EVENT+0xf8>
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	2a d2       	rcall	.+1108   	; 0x898 <lcd_locate>
     444:	1a 82       	std	Y+2, r1	; 0x02
     446:	8a 81       	ldd	r24, Y+2	; 0x02
     448:	80 31       	cpi	r24, 0x10	; 16
     44a:	90 f4       	brcc	.+36     	; 0x470 <BARREL_EVENT+0xec>
     44c:	e9 81       	ldd	r30, Y+1	; 0x01
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	90 e1       	ldi	r25, 0x10	; 16
     452:	e9 9f       	mul	r30, r25
     454:	f0 01       	movw	r30, r0
     456:	11 24       	eor	r1, r1
     458:	e8 0f       	add	r30, r24
     45a:	f1 1d       	adc	r31, r1
     45c:	e8 59       	subi	r30, 0x98	; 152
     45e:	fd 4f       	sbci	r31, 0xFD	; 253
     460:	80 81       	ld	r24, Z
     462:	14 d2       	rcall	.+1064   	; 0x88c <lcd_char>
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	8f 5f       	subi	r24, 0xFF	; 255
     468:	8a 83       	std	Y+2, r24	; 0x02
     46a:	8a 81       	ldd	r24, Y+2	; 0x02
     46c:	80 31       	cpi	r24, 0x10	; 16
     46e:	70 f3       	brcs	.-36     	; 0x44c <BARREL_EVENT+0xc8>
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	89 83       	std	Y+1, r24	; 0x01
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	82 30       	cpi	r24, 0x02	; 2
     47a:	08 f3       	brcs	.-62     	; 0x43e <BARREL_EVENT+0xba>
     47c:	80 91 88 02 	lds	r24, 0x0288
     480:	80 93 02 01 	sts	0x0102, r24
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <buf_str>:

// wys³anie stringa z pamiêci RAM
void buf_str(char * s) {
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
	while( *s ) buf_char(active_buf, *s++);
     494:	fc 01       	movw	r30, r24
     496:	60 81       	ld	r22, Z
     498:	66 23       	and	r22, r22
     49a:	51 f0       	breq	.+20     	; 0x4b0 <buf_str+0x20>
	while(len--) buf_char(active_buf, *s++);

}

// wys³anie stringa z pamiêci RAM
void buf_str(char * s) {
     49c:	ec 01       	movw	r28, r24
     49e:	21 96       	adiw	r28, 0x01	; 1
	while( *s ) buf_char(active_buf, *s++);
     4a0:	80 91 00 01 	lds	r24, 0x0100
     4a4:	90 91 01 01 	lds	r25, 0x0101
     4a8:	de de       	rcall	.-580    	; 0x266 <buf_char>
     4aa:	69 91       	ld	r22, Y+
     4ac:	61 11       	cpse	r22, r1
     4ae:	f8 cf       	rjmp	.-16     	; 0x4a0 <buf_str+0x10>
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <Buttons_Init>:
uint8_t timer1Counter = 0;

void Buttons_Init()
{
	// config as inputs
	BTN1_DDR &= ~_BV(BTN1_P);
     4b6:	52 98       	cbi	0x0a, 2	; 10
	BTN2_DDR &= ~_BV(BTN2_P);
     4b8:	53 98       	cbi	0x0a, 3	; 10
	BTN3_DDR &= ~_BV(BTN3_P);
     4ba:	6e 98       	cbi	0x0d, 6	; 13
	
	EICRA |= _BV(ISC21) | _BV(ISC31);
     4bc:	e9 e6       	ldi	r30, 0x69	; 105
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	80 6a       	ori	r24, 0xA0	; 160
     4c4:	80 83       	st	Z, r24
	EICRB |= _BV(ISC61);
     4c6:	ea e6       	ldi	r30, 0x6A	; 106
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	80 62       	ori	r24, 0x20	; 32
     4ce:	80 83       	st	Z, r24
	EIFR  |= _BV(BTN1_INTF) | _BV(BTN2_INTF) | _BV(BTN3_INTF);
     4d0:	8c b3       	in	r24, 0x1c	; 28
     4d2:	8c 64       	ori	r24, 0x4C	; 76
     4d4:	8c bb       	out	0x1c, r24	; 28
	EIMSK |= _BV(BTN1_INT) | _BV(BTN2_INT) | _BV(BTN3_INT);
     4d6:	8d b3       	in	r24, 0x1d	; 29
     4d8:	8c 64       	ori	r24, 0x4C	; 76
     4da:	8d bb       	out	0x1d, r24	; 29
     4dc:	08 95       	ret

000004de <TimeCheckTimer0_Init>:
}

void TimeCheckTimer0_Init()
{
	// set timer0 to CTC 
	TCCR0A = _BV(WGM10); // set ctc
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS00) | _BV(CS02); // prescaller = 1024
     4e2:	85 e0       	ldi	r24, 0x05	; 5
     4e4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 155; // bit more than 0.01 s 
     4e6:	8b e9       	ldi	r24, 0x9B	; 155
     4e8:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0;
     4ea:	16 bc       	out	0x26, r1	; 38
	TIFR0 |= _BV(OCF0A); // clear interrupt flag
     4ec:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= _BV(OCIE0A); // enable ctc interrupt
     4ee:	ee e6       	ldi	r30, 0x6E	; 110
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	82 60       	ori	r24, 0x02	; 2
     4f6:	80 83       	st	Z, r24
     4f8:	08 95       	ret

000004fa <__vector_21>:
}

ISR(TIMER0_COMPA_vect)
{
     4fa:	1f 92       	push	r1
     4fc:	0f 92       	push	r0
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	8f 93       	push	r24
	g_takeMeasureNow_Flag = 0;
}

static inline void SubstractTimeMeasure_Flag()
{
	g_takeMeasureNow_Flag--;
     506:	8e b3       	in	r24, 0x1e	; 30
     508:	81 50       	subi	r24, 0x01	; 1
     50a:	8e bb       	out	0x1e, r24	; 30
	SubstractTimeMeasure_Flag();
	
	if(++ms10_cnt>99)
     50c:	80 91 88 02 	lds	r24, 0x0288
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	80 93 88 02 	sts	0x0288, r24
     516:	84 36       	cpi	r24, 0x64	; 100
     518:	10 f0       	brcs	.+4      	; 0x51e <__vector_21+0x24>
	ms10_cnt=0;
     51a:	10 92 88 02 	sts	0x0288, r1
	if(++s1_cnt>59)
     51e:	80 91 67 02 	lds	r24, 0x0267
     522:	8f 5f       	subi	r24, 0xFF	; 255
     524:	80 93 67 02 	sts	0x0267, r24
     528:	8c 33       	cpi	r24, 0x3C	; 60
     52a:	10 f0       	brcs	.+4      	; 0x530 <__vector_21+0x36>
	s1_cnt=0;
     52c:	10 92 67 02 	sts	0x0267, r1
}
     530:	8f 91       	pop	r24
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <__vector_4>:
	g_activeLayer = SPECIFIC_TIME_MASK;
	TIMER3ON();
}

ISR(BTN2_vect)
{
     53c:	1f 92       	push	r1
     53e:	0f 92       	push	r0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	8f 93       	push	r24
     548:	ef 93       	push	r30
     54a:	ff 93       	push	r31
	EIMSK &= ~_BV(BTN2_INT);
     54c:	eb 98       	cbi	0x1d, 3	; 29
	g_activeLayer = LOWEST_HIGHEST_TEMP_MASK;
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	80 93 1f 04 	sts	0x041F, r24
	
	timer1Counter = 0;
     554:	10 92 3e 02 	sts	0x023E, r1
	TIMER1RESET();
     558:	e1 e8       	ldi	r30, 0x81	; 129
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	10 82       	st	Z, r1
     55e:	10 92 85 00 	sts	0x0085, r1
     562:	10 92 84 00 	sts	0x0084, r1
     566:	8d e0       	ldi	r24, 0x0D	; 13
     568:	80 83       	st	Z, r24
}
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	8f 91       	pop	r24
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <TimerPushTimeout1_Init>:
	TIMER3ON();
}

void TimerPushTimeout1_Init()
{
	TIMER1OFF();
     57a:	10 92 81 00 	sts	0x0081, r1
	OCR1A = 46874; // 3 s, prescaller 1024
     57e:	8a e1       	ldi	r24, 0x1A	; 26
     580:	97 eb       	ldi	r25, 0xB7	; 183
     582:	90 93 89 00 	sts	0x0089, r25
     586:	80 93 88 00 	sts	0x0088, r24
	TCNT1 = 0;
     58a:	10 92 85 00 	sts	0x0085, r1
     58e:	10 92 84 00 	sts	0x0084, r1
	TIFR1 = _BV(OCF1A);
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	86 bb       	out	0x16, r24	; 22
	TIMSK1 = _BV(OCIE1A);
     596:	80 93 6f 00 	sts	0x006F, r24
     59a:	08 95       	ret

0000059c <__vector_17>:
}

ISR(TIMER1_COMPA_vect)
{
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	8f 93       	push	r24
	if (timer1Counter >= 1) // every 8 seconds
     5a8:	80 91 3e 02 	lds	r24, 0x023E
     5ac:	88 23       	and	r24, r24
     5ae:	51 f0       	breq	.+20     	; 0x5c4 <__vector_17+0x28>
	{
		timer1Counter = 0;
     5b0:	10 92 3e 02 	sts	0x023E, r1
		g_activeLayer = DATE_AND_TIME_MASK;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 1f 04 	sts	0x041F, r24
		
		EIFR  |= _BV(BTN2_INTF);
     5ba:	e3 9a       	sbi	0x1c, 3	; 28
		EIMSK |= _BV(BTN2_INT);
     5bc:	eb 9a       	sbi	0x1d, 3	; 29
		
		TIMER1OFF();
     5be:	10 92 81 00 	sts	0x0081, r1
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <__vector_17+0x32>
	}
	else
	{
		timer1Counter++;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 3e 02 	sts	0x023E, r24
		g_startFastTimeSwap = true;
     5ca:	80 93 3f 02 	sts	0x023F, r24
	}
}
     5ce:	8f 91       	pop	r24
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <TimerDebounce3_Init>:

void TimerDebounce3_Init()
{
	TIMER3OFF();
     5da:	10 92 91 00 	sts	0x0091, r1
	OCR3A = 468; // 30 ms, prescaller 1024
     5de:	84 ed       	ldi	r24, 0xD4	; 212
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	90 93 99 00 	sts	0x0099, r25
     5e6:	80 93 98 00 	sts	0x0098, r24
	TCNT3 = 0;
     5ea:	10 92 95 00 	sts	0x0095, r1
     5ee:	10 92 94 00 	sts	0x0094, r1
	TIFR3 = _BV(OCF3A);
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	88 bb       	out	0x18, r24	; 24
	TIMSK3 = _BV(OCIE3A);
     5f6:	80 93 71 00 	sts	0x0071, r24
     5fa:	08 95       	ret

000005fc <__vector_32>:
}

ISR(TIMER3_COMPA_vect)
{
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	8f 93       	push	r24
	EIFR  |= _BV(BTN1_INTF) | _BV(BTN3_INTF);
     608:	8c b3       	in	r24, 0x1c	; 28
     60a:	84 64       	ori	r24, 0x44	; 68
     60c:	8c bb       	out	0x1c, r24	; 28
	EIMSK |= _BV(BTN1_INT) | _BV(BTN3_INT);
     60e:	8d b3       	in	r24, 0x1d	; 29
     610:	84 64       	ori	r24, 0x44	; 68
     612:	8d bb       	out	0x1d, r24	; 29
	
	EIFR  |= _BV(BTN2_INTF);
     614:	e3 9a       	sbi	0x1c, 3	; 28
	EIMSK |= _BV(BTN2_INT);
     616:	eb 9a       	sbi	0x1d, 3	; 29
	
	TIMER3OFF();
     618:	10 92 91 00 	sts	0x0091, r1
}
     61c:	8f 91       	pop	r24
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <IncrementTimeCell>:

void IncrementTimeCell()
{
	if (g_specificMinute >= ((MEASURES_PER_HOUR - 1) * 10))
     628:	80 91 40 02 	lds	r24, 0x0240
     62c:	82 33       	cpi	r24, 0x32	; 50
     62e:	6c f0       	brlt	.+26     	; 0x64a <IncrementTimeCell+0x22>
	{
		g_specificMinute = 0;
     630:	10 92 40 02 	sts	0x0240, r1
		
		if (g_specificHour >= (HOURS_PER_DAY - 1))
     634:	80 91 41 02 	lds	r24, 0x0241
     638:	87 31       	cpi	r24, 0x17	; 23
     63a:	1c f0       	brlt	.+6      	; 0x642 <IncrementTimeCell+0x1a>
		{
			g_specificHour = 0;
     63c:	10 92 41 02 	sts	0x0241, r1
     640:	07 c0       	rjmp	.+14     	; 0x650 <IncrementTimeCell+0x28>
		}
		else
		{
			g_specificHour++;
     642:	8f 5f       	subi	r24, 0xFF	; 255
     644:	80 93 41 02 	sts	0x0241, r24
     648:	03 c0       	rjmp	.+6      	; 0x650 <IncrementTimeCell+0x28>
		}
	}
	else
	{
		g_specificMinute += 10;
     64a:	86 5f       	subi	r24, 0xF6	; 246
     64c:	80 93 40 02 	sts	0x0240, r24
	}
	
	timer1Counter = 0;
     650:	10 92 3e 02 	sts	0x023E, r1
	TIMER1RESET();
     654:	e1 e8       	ldi	r30, 0x81	; 129
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	10 82       	st	Z, r1
     65a:	10 92 85 00 	sts	0x0085, r1
     65e:	10 92 84 00 	sts	0x0084, r1
     662:	8d e0       	ldi	r24, 0x0D	; 13
     664:	80 83       	st	Z, r24
     666:	08 95       	ret

00000668 <__vector_7>:
	timer1Counter = 0;
	TIMER1RESET();
}

ISR(BTN3_vect)
{
     668:	1f 92       	push	r1
     66a:	0f 92       	push	r0
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	0f 92       	push	r0
     670:	11 24       	eor	r1, r1
     672:	2f 93       	push	r18
     674:	3f 93       	push	r19
     676:	4f 93       	push	r20
     678:	5f 93       	push	r21
     67a:	6f 93       	push	r22
     67c:	7f 93       	push	r23
     67e:	8f 93       	push	r24
     680:	9f 93       	push	r25
     682:	af 93       	push	r26
     684:	bf 93       	push	r27
     686:	ef 93       	push	r30
     688:	ff 93       	push	r31
	EIMSK &= ~_BV(BTN3_INT);
     68a:	ee 98       	cbi	0x1d, 6	; 29
	
	IncrementTimeCell();
     68c:	cd df       	rcall	.-102    	; 0x628 <IncrementTimeCell>
	
	g_activeLayer = SPECIFIC_TIME_MASK;
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	80 93 1f 04 	sts	0x041F, r24
	TIMER3ON();
     694:	8d e0       	ldi	r24, 0x0D	; 13
     696:	80 93 91 00 	sts	0x0091, r24
}
     69a:	ff 91       	pop	r31
     69c:	ef 91       	pop	r30
     69e:	bf 91       	pop	r27
     6a0:	af 91       	pop	r26
     6a2:	9f 91       	pop	r25
     6a4:	8f 91       	pop	r24
     6a6:	7f 91       	pop	r23
     6a8:	6f 91       	pop	r22
     6aa:	5f 91       	pop	r21
     6ac:	4f 91       	pop	r20
     6ae:	3f 91       	pop	r19
     6b0:	2f 91       	pop	r18
     6b2:	0f 90       	pop	r0
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	0f 90       	pop	r0
     6b8:	1f 90       	pop	r1
     6ba:	18 95       	reti

000006bc <DecrementTimeCell>:
	TIMER1RESET();
}

void DecrementTimeCell()
{
	if (0 == g_specificMinute)
     6bc:	80 91 40 02 	lds	r24, 0x0240
     6c0:	81 11       	cpse	r24, r1
     6c2:	0f c0       	rjmp	.+30     	; 0x6e2 <DecrementTimeCell+0x26>
	{
		g_specificMinute = (MEASURES_PER_HOUR - 1) * 10;
     6c4:	82 e3       	ldi	r24, 0x32	; 50
     6c6:	80 93 40 02 	sts	0x0240, r24
		
		if (0 == g_specificHour)
     6ca:	80 91 41 02 	lds	r24, 0x0241
     6ce:	81 11       	cpse	r24, r1
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <DecrementTimeCell+0x1e>
		{
			g_specificHour = HOURS_PER_DAY - 1;
     6d2:	87 e1       	ldi	r24, 0x17	; 23
     6d4:	80 93 41 02 	sts	0x0241, r24
     6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <DecrementTimeCell+0x2c>
		}
		else
		{
			g_specificHour--;
     6da:	81 50       	subi	r24, 0x01	; 1
     6dc:	80 93 41 02 	sts	0x0241, r24
     6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <DecrementTimeCell+0x2c>
		}
	}
	else
	{
		g_specificMinute -= 10;
     6e2:	8a 50       	subi	r24, 0x0A	; 10
     6e4:	80 93 40 02 	sts	0x0240, r24
	}
	
	timer1Counter = 0;
     6e8:	10 92 3e 02 	sts	0x023E, r1
	TIMER1RESET();
     6ec:	e1 e8       	ldi	r30, 0x81	; 129
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	10 82       	st	Z, r1
     6f2:	10 92 85 00 	sts	0x0085, r1
     6f6:	10 92 84 00 	sts	0x0084, r1
     6fa:	8d e0       	ldi	r24, 0x0D	; 13
     6fc:	80 83       	st	Z, r24
     6fe:	08 95       	ret

00000700 <__vector_3>:
	if(++s1_cnt>59)
	s1_cnt=0;
}

ISR(BTN1_vect)
{
     700:	1f 92       	push	r1
     702:	0f 92       	push	r0
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	2f 93       	push	r18
     70c:	3f 93       	push	r19
     70e:	4f 93       	push	r20
     710:	5f 93       	push	r21
     712:	6f 93       	push	r22
     714:	7f 93       	push	r23
     716:	8f 93       	push	r24
     718:	9f 93       	push	r25
     71a:	af 93       	push	r26
     71c:	bf 93       	push	r27
     71e:	ef 93       	push	r30
     720:	ff 93       	push	r31
	EIMSK &= ~_BV(BTN1_INT);
     722:	ea 98       	cbi	0x1d, 2	; 29
	
	DecrementTimeCell();
     724:	cb df       	rcall	.-106    	; 0x6bc <DecrementTimeCell>
	
	g_activeLayer = SPECIFIC_TIME_MASK;
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	80 93 1f 04 	sts	0x041F, r24
	TIMER3ON();
     72c:	8d e0       	ldi	r24, 0x0D	; 13
     72e:	80 93 91 00 	sts	0x0091, r24
}
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	bf 91       	pop	r27
     738:	af 91       	pop	r26
     73a:	9f 91       	pop	r25
     73c:	8f 91       	pop	r24
     73e:	7f 91       	pop	r23
     740:	6f 91       	pop	r22
     742:	5f 91       	pop	r21
     744:	4f 91       	pop	r20
     746:	3f 91       	pop	r19
     748:	2f 91       	pop	r18
     74a:	0f 90       	pop	r0
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	0f 90       	pop	r0
     750:	1f 90       	pop	r1
     752:	18 95       	reti

00000754 <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     754:	29 2f       	mov	r18, r25
     756:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     758:	22 30       	cpi	r18, 0x02	; 2
     75a:	31 05       	cpc	r19, r1
     75c:	59 f0       	breq	.+22     	; 0x774 <CALLBACK_USB_GetDescriptor+0x20>
     75e:	23 30       	cpi	r18, 0x03	; 3
     760:	31 05       	cpc	r19, r1
     762:	69 f0       	breq	.+26     	; 0x77e <CALLBACK_USB_GetDescriptor+0x2a>
     764:	21 30       	cpi	r18, 0x01	; 1
     766:	31 05       	cpc	r19, r1
     768:	29 f1       	breq	.+74     	; 0x7b4 <CALLBACK_USB_GetDescriptor+0x60>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	29 c0       	rjmp	.+82     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     774:	2e e3       	ldi	r18, 0x3E	; 62
     776:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     778:	88 ee       	ldi	r24, 0xE8	; 232
     77a:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     77c:	24 c0       	rjmp	.+72     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x72>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     77e:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	91 05       	cpc	r25, r1
     784:	59 f0       	breq	.+22     	; 0x79c <CALLBACK_USB_GetDescriptor+0x48>
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	91 05       	cpc	r25, r1
     78a:	71 f0       	breq	.+28     	; 0x7a8 <CALLBACK_USB_GetDescriptor+0x54>
     78c:	89 2b       	or	r24, r25
     78e:	b9 f4       	brne	.+46     	; 0x7be <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     790:	e4 ee       	ldi	r30, 0xE4	; 228
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	24 91       	lpm	r18, Z
     796:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     798:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     79a:	15 c0       	rjmp	.+42     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     79c:	ea ec       	ldi	r30, 0xCA	; 202
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	24 91       	lpm	r18, Z
     7a2:	30 e0       	ldi	r19, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     7a4:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     7a6:	0f c0       	rjmp	.+30     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     7a8:	ec ea       	ldi	r30, 0xAC	; 172
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	24 91       	lpm	r18, Z
     7ae:	30 e0       	ldi	r19, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     7b0:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x72>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     7b4:	22 e1       	ldi	r18, 0x12	; 18
     7b6:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     7b8:	86 e2       	ldi	r24, 0x26	; 38
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     7c6:	fa 01       	movw	r30, r20
     7c8:	91 83       	std	Z+1, r25	; 0x01
     7ca:	80 83       	st	Z, r24
	return Size;
}
     7cc:	82 2f       	mov	r24, r18
     7ce:	93 2f       	mov	r25, r19
     7d0:	08 95       	ret

000007d2 <_lcd_read_byte>:
//		WY³¹cza miganie kursora na LCD
//
//----------------------------------------------------------------------------------------
void lcd_blink_off(void)
{
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON);
     7d2:	27 98       	cbi	0x04, 7	; 4
     7d4:	26 98       	cbi	0x04, 6	; 4
     7d6:	25 98       	cbi	0x04, 5	; 4
     7d8:	24 98       	cbi	0x04, 4	; 4
     7da:	5e 9a       	sbi	0x0b, 6	; 11
     7dc:	5c 9a       	sbi	0x0b, 4	; 11
     7de:	83 b1       	in	r24, 0x03	; 3
     7e0:	82 95       	swap	r24
     7e2:	81 70       	andi	r24, 0x01	; 1
     7e4:	1d 99       	sbic	0x03, 5	; 3
     7e6:	82 60       	ori	r24, 0x02	; 2
     7e8:	1e 99       	sbic	0x03, 6	; 3
     7ea:	84 60       	ori	r24, 0x04	; 4
     7ec:	1f 99       	sbic	0x03, 7	; 3
     7ee:	88 60       	ori	r24, 0x08	; 8
     7f0:	82 95       	swap	r24
     7f2:	80 7f       	andi	r24, 0xF0	; 240
     7f4:	5c 98       	cbi	0x0b, 4	; 11
     7f6:	5c 9a       	sbi	0x0b, 4	; 11
     7f8:	93 b1       	in	r25, 0x03	; 3
     7fa:	92 95       	swap	r25
     7fc:	91 70       	andi	r25, 0x01	; 1
     7fe:	1d 99       	sbic	0x03, 5	; 3
     800:	92 60       	ori	r25, 0x02	; 2
     802:	1e 99       	sbic	0x03, 6	; 3
     804:	94 60       	ori	r25, 0x04	; 4
     806:	1f 99       	sbic	0x03, 7	; 3
     808:	98 60       	ori	r25, 0x08	; 8
     80a:	5c 98       	cbi	0x0b, 4	; 11
     80c:	89 2b       	or	r24, r25
     80e:	08 95       	ret

00000810 <check_BF>:
     810:	5f 98       	cbi	0x0b, 7	; 11
     812:	df cf       	rjmp	.-66     	; 0x7d2 <_lcd_read_byte>

00000814 <_lcd_write_byte>:
     814:	27 9a       	sbi	0x04, 7	; 4
     816:	26 9a       	sbi	0x04, 6	; 4
     818:	25 9a       	sbi	0x04, 5	; 4
     81a:	24 9a       	sbi	0x04, 4	; 4
     81c:	5e 98       	cbi	0x0b, 6	; 11
     81e:	5c 9a       	sbi	0x0b, 4	; 11
     820:	98 2f       	mov	r25, r24
     822:	92 95       	swap	r25
     824:	9f 70       	andi	r25, 0x0F	; 15
     826:	90 ff       	sbrs	r25, 0
     828:	02 c0       	rjmp	.+4      	; 0x82e <_lcd_write_byte+0x1a>
     82a:	2c 9a       	sbi	0x05, 4	; 5
     82c:	01 c0       	rjmp	.+2      	; 0x830 <_lcd_write_byte+0x1c>
     82e:	2c 98       	cbi	0x05, 4	; 5
     830:	91 ff       	sbrs	r25, 1
     832:	02 c0       	rjmp	.+4      	; 0x838 <_lcd_write_byte+0x24>
     834:	2d 9a       	sbi	0x05, 5	; 5
     836:	01 c0       	rjmp	.+2      	; 0x83a <_lcd_write_byte+0x26>
     838:	2d 98       	cbi	0x05, 5	; 5
     83a:	92 ff       	sbrs	r25, 2
     83c:	02 c0       	rjmp	.+4      	; 0x842 <_lcd_write_byte+0x2e>
     83e:	2e 9a       	sbi	0x05, 6	; 5
     840:	01 c0       	rjmp	.+2      	; 0x844 <_lcd_write_byte+0x30>
     842:	2e 98       	cbi	0x05, 6	; 5
     844:	98 70       	andi	r25, 0x08	; 8
     846:	11 f0       	breq	.+4      	; 0x84c <_lcd_write_byte+0x38>
     848:	2f 9a       	sbi	0x05, 7	; 5
     84a:	01 c0       	rjmp	.+2      	; 0x84e <_lcd_write_byte+0x3a>
     84c:	2f 98       	cbi	0x05, 7	; 5
     84e:	5c 98       	cbi	0x0b, 4	; 11
     850:	5c 9a       	sbi	0x0b, 4	; 11
     852:	80 ff       	sbrs	r24, 0
     854:	02 c0       	rjmp	.+4      	; 0x85a <_lcd_write_byte+0x46>
     856:	2c 9a       	sbi	0x05, 4	; 5
     858:	01 c0       	rjmp	.+2      	; 0x85c <_lcd_write_byte+0x48>
     85a:	2c 98       	cbi	0x05, 4	; 5
     85c:	81 ff       	sbrs	r24, 1
     85e:	02 c0       	rjmp	.+4      	; 0x864 <_lcd_write_byte+0x50>
     860:	2d 9a       	sbi	0x05, 5	; 5
     862:	01 c0       	rjmp	.+2      	; 0x866 <_lcd_write_byte+0x52>
     864:	2d 98       	cbi	0x05, 5	; 5
     866:	82 ff       	sbrs	r24, 2
     868:	02 c0       	rjmp	.+4      	; 0x86e <_lcd_write_byte+0x5a>
     86a:	2e 9a       	sbi	0x05, 6	; 5
     86c:	01 c0       	rjmp	.+2      	; 0x870 <_lcd_write_byte+0x5c>
     86e:	2e 98       	cbi	0x05, 6	; 5
     870:	83 ff       	sbrs	r24, 3
     872:	02 c0       	rjmp	.+4      	; 0x878 <_lcd_write_byte+0x64>
     874:	2f 9a       	sbi	0x05, 7	; 5
     876:	01 c0       	rjmp	.+2      	; 0x87a <_lcd_write_byte+0x66>
     878:	2f 98       	cbi	0x05, 7	; 5
     87a:	5c 98       	cbi	0x0b, 4	; 11
     87c:	c9 df       	rcall	.-110    	; 0x810 <check_BF>
     87e:	88 23       	and	r24, r24
     880:	ec f3       	brlt	.-6      	; 0x87c <_lcd_write_byte+0x68>
     882:	08 95       	ret

00000884 <lcd_write_cmd>:
     884:	5f 98       	cbi	0x0b, 7	; 11
     886:	c6 cf       	rjmp	.-116    	; 0x814 <_lcd_write_byte>

00000888 <lcd_write_data>:
     888:	5f 9a       	sbi	0x0b, 7	; 11
     88a:	c4 cf       	rjmp	.-120    	; 0x814 <_lcd_write_byte>

0000088c <lcd_char>:
     88c:	98 2f       	mov	r25, r24
     88e:	90 58       	subi	r25, 0x80	; 128
     890:	98 30       	cpi	r25, 0x08	; 8
     892:	08 f4       	brcc	.+2      	; 0x896 <lcd_char+0xa>
     894:	87 70       	andi	r24, 0x07	; 7
     896:	f8 cf       	rjmp	.-16     	; 0x888 <lcd_write_data>

00000898 <lcd_locate>:
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	31 f0       	breq	.+12     	; 0x8a8 <lcd_locate+0x10>
     89c:	83 30       	cpi	r24, 0x03	; 3
     89e:	31 f0       	breq	.+12     	; 0x8ac <lcd_locate+0x14>
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	29 f4       	brne	.+10     	; 0x8ae <lcd_locate+0x16>
     8a4:	80 e4       	ldi	r24, 0x40	; 64
     8a6:	03 c0       	rjmp	.+6      	; 0x8ae <lcd_locate+0x16>
     8a8:	80 e1       	ldi	r24, 0x10	; 16
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <lcd_locate+0x16>
     8ac:	80 e5       	ldi	r24, 0x50	; 80
     8ae:	60 58       	subi	r22, 0x80	; 128
     8b0:	86 0f       	add	r24, r22
     8b2:	e8 cf       	rjmp	.-48     	; 0x884 <lcd_write_cmd>

000008b4 <lcd_cls>:
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	e6 cf       	rjmp	.-52     	; 0x884 <lcd_write_cmd>

000008b8 <lcd_init>:
//		 Ustawienie wszystkich 4 linii danych jako WYjœcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_out(void)
{
	DDR(LCD_D7PORT)	|= (1<<LCD_D7);
     8b8:	27 9a       	sbi	0x04, 7	; 4
	DDR(LCD_D6PORT)	|= (1<<LCD_D6);
     8ba:	26 9a       	sbi	0x04, 6	; 4
	DDR(LCD_D5PORT)	|= (1<<LCD_D5);
     8bc:	25 9a       	sbi	0x04, 5	; 4
	DDR(LCD_D4PORT)	|= (1<<LCD_D4);
     8be:	24 9a       	sbi	0x04, 4	; 4
void lcd_init(void)
{
	// inicjowanie pinów portów ustalonych do pod³¹czenia z wyœwietlaczem LCD
	// ustawienie wszystkich jako wyjœcia
	data_dir_out();
	DDR(LCD_RSPORT) |= (1<<LCD_RS);
     8c0:	57 9a       	sbi	0x0a, 7	; 10
	DDR(LCD_EPORT) |= (1<<LCD_E);
     8c2:	54 9a       	sbi	0x0a, 4	; 10
	#if USE_RW == 1
		DDR(LCD_RWPORT) |= (1<<LCD_RW);
     8c4:	56 9a       	sbi	0x0a, 6	; 10
	#endif

	PORT(LCD_RSPORT) |= (1<<LCD_RS);
     8c6:	5f 9a       	sbi	0x0b, 7	; 11
	PORT(LCD_EPORT) |= (1<<LCD_E);
     8c8:	5c 9a       	sbi	0x0b, 4	; 11
	#if USE_RW == 1
		PORT(LCD_RWPORT) |= (1<<LCD_RW);
     8ca:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8cc:	8f e5       	ldi	r24, 0x5F	; 95
     8ce:	9a ee       	ldi	r25, 0xEA	; 234
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <lcd_init+0x18>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <lcd_init+0x1e>
     8d6:	00 00       	nop
	#endif

	_delay_ms(15);
	PORT(LCD_EPORT) &= ~(1<<LCD_E);
     8d8:	5c 98       	cbi	0x0b, 4	; 11
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
     8da:	5f 98       	cbi	0x0b, 7	; 11
	PORT(LCD_RWPORT) &= ~(1<<LCD_RW);
     8dc:	5e 98       	cbi	0x0b, 6	; 11

	// jeszcze nie mo¿na u¿ywaæ Busy Flag
	SET_E;
     8de:	5c 9a       	sbi	0x0b, 4	; 11
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
     8e0:	2c 9a       	sbi	0x05, 4	; 5
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
     8e2:	2d 9a       	sbi	0x05, 5	; 5
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
     8e4:	2e 98       	cbi	0x05, 6	; 5
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
     8e6:	2f 98       	cbi	0x05, 7	; 5
	PORT(LCD_RWPORT) &= ~(1<<LCD_RW);

	// jeszcze nie mo¿na u¿ywaæ Busy Flag
	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
     8e8:	5c 98       	cbi	0x0b, 4	; 11
     8ea:	8f e0       	ldi	r24, 0x0F	; 15
     8ec:	90 e4       	ldi	r25, 0x40	; 64
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <lcd_init+0x36>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <lcd_init+0x3c>
     8f4:	00 00       	nop
	_delay_ms(4.1);

	SET_E;
     8f6:	5c 9a       	sbi	0x0b, 4	; 11
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
     8f8:	2c 9a       	sbi	0x05, 4	; 5
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
     8fa:	2d 9a       	sbi	0x05, 5	; 5
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
     8fc:	2e 98       	cbi	0x05, 6	; 5
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
     8fe:	2f 98       	cbi	0x05, 7	; 5
	CLR_E;
	_delay_ms(4.1);

	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
     900:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     902:	8f e8       	ldi	r24, 0x8F	; 143
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <lcd_init+0x4e>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <lcd_init+0x54>
     90c:	00 00       	nop
	_delay_us(100);

	SET_E;
     90e:	5c 9a       	sbi	0x0b, 4	; 11
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
     910:	2c 9a       	sbi	0x05, 4	; 5
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
     912:	2d 9a       	sbi	0x05, 5	; 5
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
     914:	2e 98       	cbi	0x05, 6	; 5
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
     916:	2f 98       	cbi	0x05, 7	; 5
	CLR_E;
	_delay_us(100);

	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
     918:	5c 98       	cbi	0x0b, 4	; 11
     91a:	8f e8       	ldi	r24, 0x8F	; 143
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	f1 f7       	brne	.-4      	; 0x91e <lcd_init+0x66>
     922:	00 c0       	rjmp	.+0      	; 0x924 <lcd_init+0x6c>
     924:	00 00       	nop
	_delay_us(100);

	SET_E;
     926:	5c 9a       	sbi	0x0b, 4	; 11
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
     928:	2c 98       	cbi	0x05, 4	; 5
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
     92a:	2d 9a       	sbi	0x05, 5	; 5
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
     92c:	2e 98       	cbi	0x05, 6	; 5
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
     92e:	2f 98       	cbi	0x05, 7	; 5
	CLR_E;
	_delay_us(100);

	SET_E;
	lcd_sendHalf(0x02);// tryb 4-bitowy
	CLR_E;
     930:	5c 98       	cbi	0x0b, 4	; 11
     932:	8f e8       	ldi	r24, 0x8F	; 143
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <lcd_init+0x7e>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <lcd_init+0x84>
     93c:	00 00       	nop
	_delay_us(100);

	// ju¿ mo¿na u¿ywaæ Busy Flag
	// tryb 4-bitowy, 2 wiersze, znak 5x7
	lcd_write_cmd( LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7 );
     93e:	88 e2       	ldi	r24, 0x28	; 40
     940:	a1 df       	rcall	.-190    	; 0x884 <lcd_write_cmd>
	// wy³¹czenie kursora
	lcd_write_cmd( LCDC_ONOFF|LCDC_CURSOROFF );
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	9f df       	rcall	.-194    	; 0x884 <lcd_write_cmd>
	// w³¹czenie wyœwietlacza
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON );
     946:	8c e0       	ldi	r24, 0x0C	; 12
     948:	9d df       	rcall	.-198    	; 0x884 <lcd_write_cmd>
	// przesuwanie kursora w prawo bez przesuwania zawartoœci ekranu
	lcd_write_cmd( LCDC_ENTRY|LCDC_ENTRYR );
     94a:	86 e0       	ldi	r24, 0x06	; 6
     94c:	9b df       	rcall	.-202    	; 0x884 <lcd_write_cmd>

	// kasowanie ekranu
	lcd_cls();
     94e:	b2 cf       	rjmp	.-156    	; 0x8b4 <lcd_cls>

00000950 <CheckCurrentVisibleLayer>:

uint8_t g_activeLayer;

void CheckCurrentVisibleLayer()
{
	g_dateAndTime_layer.visible = g_activeLayer & DATE_AND_TIME_MASK;
     950:	80 91 1f 04 	lds	r24, 0x041F
     954:	98 2f       	mov	r25, r24
     956:	91 70       	andi	r25, 0x01	; 1
     958:	90 93 d5 03 	sts	0x03D5, r25
	g_lowestAndHighestTemp_layer.visible = g_activeLayer & LOWEST_HIGHEST_TEMP_MASK;
     95c:	98 2f       	mov	r25, r24
     95e:	92 70       	andi	r25, 0x02	; 2
     960:	90 93 fc 03 	sts	0x03FC, r25
	g_specificTime_layer.visible = g_activeLayer & SPECIFIC_TIME_MASK;
     964:	84 70       	andi	r24, 0x04	; 4
     966:	80 93 ad 03 	sts	0x03AD, r24
     96a:	08 95       	ret

0000096c <DateDisplayWindow_Event>:
}

//******************** WARSTWA 1 ********************************
void DateDisplayWindow_Event()
{
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	61 97       	sbiw	r28, 0x11	; 17
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
	char slotString[17];
	int16_t temperature = g_ds18b20TempValue[0] | (g_ds18b20TempValue[1] << 8);
     98a:	90 91 22 04 	lds	r25, 0x0422
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	20 91 21 04 	lds	r18, 0x0421
     994:	7c 01       	movw	r14, r24
     996:	e2 2a       	or	r14, r18
	char half = '0';
	active_buf = g_dateAndTime_layer.buf;
     998:	86 ed       	ldi	r24, 0xD6	; 214
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	90 93 01 01 	sts	0x0101, r25
     9a0:	80 93 00 01 	sts	0x0100, r24
	
	if ((temperature & HALF_MASK) != 0)
     9a4:	e3 fc       	sbrc	r14, 3
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <DateDisplayWindow_Event+0x46>
//******************** WARSTWA 1 ********************************
void DateDisplayWindow_Event()
{
	char slotString[17];
	int16_t temperature = g_ds18b20TempValue[0] | (g_ds18b20TempValue[1] << 8);
	char half = '0';
     9a8:	0f 2e       	mov	r0, r31
     9aa:	f0 e3       	ldi	r31, 0x30	; 48
     9ac:	df 2e       	mov	r13, r31
     9ae:	f0 2d       	mov	r31, r0
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <DateDisplayWindow_Event+0x4e>
	active_buf = g_dateAndTime_layer.buf;
	
	if ((temperature & HALF_MASK) != 0)
	{
		half = '5';
     9b2:	0f 2e       	mov	r0, r31
     9b4:	f5 e3       	ldi	r31, 0x35	; 53
     9b6:	df 2e       	mov	r13, r31
     9b8:	f0 2d       	mov	r31, r0
	}
	
	buf_cls();
     9ba:	dc db       	rcall	.-2120   	; 0x174 <buf_cls>
	buf_locate(0,0);
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	43 dc       	rcall	.-1914   	; 0x248 <buf_locate>
	sprintf(slotString,"%s     %02i/%02i/%02i", daysOfWeek[g_date.day - 1], g_date.date, g_date.month, g_date.year);
     9c2:	80 91 2d 04 	lds	r24, 0x042D
     9c6:	1f 92       	push	r1
     9c8:	8f 93       	push	r24
     9ca:	80 91 2c 04 	lds	r24, 0x042C
     9ce:	1f 92       	push	r1
     9d0:	8f 93       	push	r24
     9d2:	80 91 2b 04 	lds	r24, 0x042B
     9d6:	1f 92       	push	r1
     9d8:	8f 93       	push	r24
     9da:	e0 91 2a 04 	lds	r30, 0x042A
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	ee 0f       	add	r30, r30
     9e2:	ff 1f       	adc	r31, r31
     9e4:	ef 5f       	subi	r30, 0xFF	; 255
     9e6:	fe 4f       	sbci	r31, 0xFE	; 254
     9e8:	81 81       	ldd	r24, Z+1	; 0x01
     9ea:	8f 93       	push	r24
     9ec:	80 81       	ld	r24, Z
     9ee:	8f 93       	push	r24
     9f0:	8d e2       	ldi	r24, 0x2D	; 45
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	8e 01       	movw	r16, r28
     9fa:	0f 5f       	subi	r16, 0xFF	; 255
     9fc:	1f 4f       	sbci	r17, 0xFF	; 255
     9fe:	1f 93       	push	r17
     a00:	0f 93       	push	r16
     a02:	0e 94 6e 17 	call	0x2edc	; 0x2edc <sprintf>
	buf_str(slotString);
     a06:	c8 01       	movw	r24, r16
     a08:	43 dd       	rcall	.-1402   	; 0x490 <buf_str>
	buf_locate(1,0);
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	1c dc       	rcall	.-1992   	; 0x248 <buf_locate>
	
	if (temperature >= 0)
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	ff 20       	and	r15, r15
     a1c:	54 f1       	brlt	.+84     	; 0xa72 <DateDisplayWindow_Event+0x106>
	{
		sprintf(slotString,"%02i.%c%cC  %02i:%02i:%02i",(temperature >> 4), half, CELCIUS_SIGN,  g_time.hour, g_time.minute, g_time.second);
     a1e:	80 91 2e 04 	lds	r24, 0x042E
     a22:	1f 92       	push	r1
     a24:	8f 93       	push	r24
     a26:	80 91 2f 04 	lds	r24, 0x042F
     a2a:	1f 92       	push	r1
     a2c:	8f 93       	push	r24
     a2e:	80 91 30 04 	lds	r24, 0x0430
     a32:	1f 92       	push	r1
     a34:	8f 93       	push	r24
     a36:	1f 92       	push	r1
     a38:	8f ed       	ldi	r24, 0xDF	; 223
     a3a:	8f 93       	push	r24
     a3c:	1f 92       	push	r1
     a3e:	df 92       	push	r13
     a40:	f5 94       	asr	r15
     a42:	e7 94       	ror	r14
     a44:	f5 94       	asr	r15
     a46:	e7 94       	ror	r14
     a48:	f5 94       	asr	r15
     a4a:	e7 94       	ror	r14
     a4c:	f5 94       	asr	r15
     a4e:	e7 94       	ror	r14
     a50:	ff 92       	push	r15
     a52:	ef 92       	push	r14
     a54:	83 e4       	ldi	r24, 0x43	; 67
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	9f 93       	push	r25
     a5a:	8f 93       	push	r24
     a5c:	c8 01       	movw	r24, r16
     a5e:	9f 93       	push	r25
     a60:	0f 93       	push	r16
     a62:	0e 94 6e 17 	call	0x2edc	; 0x2edc <sprintf>
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	2a c0       	rjmp	.+84     	; 0xac6 <DateDisplayWindow_Event+0x15a>
	}
	else
	{
		sprintf(slotString,"%02i.%c%cC %02i:%02i:%02i",(temperature >> 4), half, CELCIUS_SIGN, g_time.hour, g_time.minute, g_time.second);
     a72:	80 91 2e 04 	lds	r24, 0x042E
     a76:	1f 92       	push	r1
     a78:	8f 93       	push	r24
     a7a:	80 91 2f 04 	lds	r24, 0x042F
     a7e:	1f 92       	push	r1
     a80:	8f 93       	push	r24
     a82:	80 91 30 04 	lds	r24, 0x0430
     a86:	1f 92       	push	r1
     a88:	8f 93       	push	r24
     a8a:	1f 92       	push	r1
     a8c:	8f ed       	ldi	r24, 0xDF	; 223
     a8e:	8f 93       	push	r24
     a90:	1f 92       	push	r1
     a92:	df 92       	push	r13
     a94:	f5 94       	asr	r15
     a96:	e7 94       	ror	r14
     a98:	f5 94       	asr	r15
     a9a:	e7 94       	ror	r14
     a9c:	f5 94       	asr	r15
     a9e:	e7 94       	ror	r14
     aa0:	f5 94       	asr	r15
     aa2:	e7 94       	ror	r14
     aa4:	ff 92       	push	r15
     aa6:	ef 92       	push	r14
     aa8:	8e e5       	ldi	r24, 0x5E	; 94
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	0e 94 6e 17 	call	0x2edc	; 0x2edc <sprintf>
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
	}
	buf_str(slotString);
     ac6:	ce 01       	movw	r24, r28
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	e2 dc       	rcall	.-1596   	; 0x490 <buf_str>
}
     acc:	61 96       	adiw	r28, 0x11	; 17
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	cd bf       	out	0x3d, r28	; 61
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	df 90       	pop	r13
     ae6:	08 95       	ret

00000ae8 <LowestHighestTempWindow_Event>:

//******************** WARSTWA 2 ********************************
void LowestHighestTempWindow_Event()
{
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	67 97       	sbiw	r28, 0x17	; 23
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
	char slotString[17];
	char half = '0';
	
	volatile uint8_t hour = 0;
     afe:	1a 8a       	std	Y+18, r1	; 0x12
	volatile uint8_t minuteDecade = 0;
     b00:	1b 8a       	std	Y+19, r1	; 0x13
	 
	volatile uint8_t lowestTempOfTheDayHour = INVALID_CELL;
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	8c 8b       	std	Y+20, r24	; 0x14
	volatile uint8_t lowestTempOfTheDayMinuteDecade = INVALID_CELL;
     b06:	8d 8b       	std	Y+21, r24	; 0x15
	
	volatile uint8_t highestTempOfTheDayHour = INVALID_CELL;
     b08:	8e 8b       	std	Y+22, r24	; 0x16
	volatile uint8_t highestTempOfTheDayMinuteDecade = INVALID_CELL;
     b0a:	8f 8b       	std	Y+23, r24	; 0x17
	
	active_buf = g_lowestAndHighestTemp_layer.buf;
     b0c:	8d ef       	ldi	r24, 0xFD	; 253
     b0e:	93 e0       	ldi	r25, 0x03	; 3
     b10:	90 93 01 01 	sts	0x0101, r25
     b14:	80 93 00 01 	sts	0x0100, r24

	for (hour = 0; hour < HOURS_PER_DAY; hour++)
     b18:	1a 8a       	std	Y+18, r1	; 0x12
     b1a:	8a 89       	ldd	r24, Y+18	; 0x12
     b1c:	88 31       	cpi	r24, 0x18	; 24
     b1e:	08 f0       	brcs	.+2      	; 0xb22 <__stack+0x23>
     b20:	87 c0       	rjmp	.+270    	; 0xc30 <__stack+0x131>
	{
		for (minuteDecade = 0; minuteDecade < MEASURES_PER_HOUR; minuteDecade++)
     b22:	1b 8a       	std	Y+19, r1	; 0x13
     b24:	8b 89       	ldd	r24, Y+19	; 0x13
     b26:	86 30       	cpi	r24, 0x06	; 6
     b28:	08 f0       	brcs	.+2      	; 0xb2c <__stack+0x2d>
     b2a:	7b c0       	rjmp	.+246    	; 0xc22 <__stack+0x123>
		{
			if (g_timeArray[hour][minuteDecade] & CELL_TAGGED_MASK)
     b2c:	8a 89       	ldd	r24, Y+18	; 0x12
     b2e:	2b 89       	ldd	r18, Y+19	; 0x13
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	fc 01       	movw	r30, r24
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	8e 0f       	add	r24, r30
     b3a:	9f 1f       	adc	r25, r31
     b3c:	fc 01       	movw	r30, r24
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	e2 0f       	add	r30, r18
     b44:	f1 1d       	adc	r31, r1
     b46:	ee 0f       	add	r30, r30
     b48:	ff 1f       	adc	r31, r31
     b4a:	e7 57       	subi	r30, 0x77	; 119
     b4c:	fd 4f       	sbci	r31, 0xFD	; 253
     b4e:	80 81       	ld	r24, Z
     b50:	80 ff       	sbrs	r24, 0
     b52:	60 c0       	rjmp	.+192    	; 0xc14 <__stack+0x115>
			{
				if ((g_timeArray[hour][minuteDecade] > g_timeArray[highestTempOfTheDayHour][highestTempOfTheDayMinuteDecade]) || (highestTempOfTheDayHour == INVALID_CELL))
     b54:	2a 89       	ldd	r18, Y+18	; 0x12
     b56:	9b 89       	ldd	r25, Y+19	; 0x13
     b58:	8e 89       	ldd	r24, Y+22	; 0x16
     b5a:	4f 89       	ldd	r20, Y+23	; 0x17
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	d9 01       	movw	r26, r18
     b60:	aa 0f       	add	r26, r26
     b62:	bb 1f       	adc	r27, r27
     b64:	2a 0f       	add	r18, r26
     b66:	3b 1f       	adc	r19, r27
     b68:	d9 01       	movw	r26, r18
     b6a:	aa 0f       	add	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	a9 0f       	add	r26, r25
     b70:	b1 1d       	adc	r27, r1
     b72:	aa 0f       	add	r26, r26
     b74:	bb 1f       	adc	r27, r27
     b76:	a7 57       	subi	r26, 0x77	; 119
     b78:	bd 4f       	sbci	r27, 0xFD	; 253
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	fc 01       	movw	r30, r24
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	8e 0f       	add	r24, r30
     b84:	9f 1f       	adc	r25, r31
     b86:	fc 01       	movw	r30, r24
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	e4 0f       	add	r30, r20
     b8e:	f1 1d       	adc	r31, r1
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	e7 57       	subi	r30, 0x77	; 119
     b96:	fd 4f       	sbci	r31, 0xFD	; 253
     b98:	2d 91       	ld	r18, X+
     b9a:	3c 91       	ld	r19, X
     b9c:	80 81       	ld	r24, Z
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	82 17       	cp	r24, r18
     ba2:	93 07       	cpc	r25, r19
     ba4:	18 f0       	brcs	.+6      	; 0xbac <__stack+0xad>
     ba6:	8e 89       	ldd	r24, Y+22	; 0x16
     ba8:	8f 3f       	cpi	r24, 0xFF	; 255
     baa:	21 f4       	brne	.+8      	; 0xbb4 <__stack+0xb5>
				{
					highestTempOfTheDayHour = hour;
     bac:	8a 89       	ldd	r24, Y+18	; 0x12
     bae:	8e 8b       	std	Y+22, r24	; 0x16
					highestTempOfTheDayMinuteDecade = minuteDecade;
     bb0:	8b 89       	ldd	r24, Y+19	; 0x13
     bb2:	8f 8b       	std	Y+23, r24	; 0x17
				}
				
				if ((g_timeArray[hour][minuteDecade] < g_timeArray[lowestTempOfTheDayHour][lowestTempOfTheDayMinuteDecade]) || (lowestTempOfTheDayHour == INVALID_CELL))
     bb4:	2a 89       	ldd	r18, Y+18	; 0x12
     bb6:	9b 89       	ldd	r25, Y+19	; 0x13
     bb8:	8c 89       	ldd	r24, Y+20	; 0x14
     bba:	4d 89       	ldd	r20, Y+21	; 0x15
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	d9 01       	movw	r26, r18
     bc0:	aa 0f       	add	r26, r26
     bc2:	bb 1f       	adc	r27, r27
     bc4:	2a 0f       	add	r18, r26
     bc6:	3b 1f       	adc	r19, r27
     bc8:	d9 01       	movw	r26, r18
     bca:	aa 0f       	add	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	a9 0f       	add	r26, r25
     bd0:	b1 1d       	adc	r27, r1
     bd2:	aa 0f       	add	r26, r26
     bd4:	bb 1f       	adc	r27, r27
     bd6:	a7 57       	subi	r26, 0x77	; 119
     bd8:	bd 4f       	sbci	r27, 0xFD	; 253
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	fc 01       	movw	r30, r24
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	8e 0f       	add	r24, r30
     be4:	9f 1f       	adc	r25, r31
     be6:	fc 01       	movw	r30, r24
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	e4 0f       	add	r30, r20
     bee:	f1 1d       	adc	r31, r1
     bf0:	ee 0f       	add	r30, r30
     bf2:	ff 1f       	adc	r31, r31
     bf4:	e7 57       	subi	r30, 0x77	; 119
     bf6:	fd 4f       	sbci	r31, 0xFD	; 253
     bf8:	2d 91       	ld	r18, X+
     bfa:	3c 91       	ld	r19, X
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	28 17       	cp	r18, r24
     c02:	39 07       	cpc	r19, r25
     c04:	18 f0       	brcs	.+6      	; 0xc0c <__stack+0x10d>
     c06:	8c 89       	ldd	r24, Y+20	; 0x14
     c08:	8f 3f       	cpi	r24, 0xFF	; 255
     c0a:	21 f4       	brne	.+8      	; 0xc14 <__stack+0x115>
				{
					lowestTempOfTheDayHour = hour;
     c0c:	8a 89       	ldd	r24, Y+18	; 0x12
     c0e:	8c 8b       	std	Y+20, r24	; 0x14
					lowestTempOfTheDayMinuteDecade = minuteDecade;
     c10:	8b 89       	ldd	r24, Y+19	; 0x13
     c12:	8d 8b       	std	Y+21, r24	; 0x15
	
	active_buf = g_lowestAndHighestTemp_layer.buf;

	for (hour = 0; hour < HOURS_PER_DAY; hour++)
	{
		for (minuteDecade = 0; minuteDecade < MEASURES_PER_HOUR; minuteDecade++)
     c14:	8b 89       	ldd	r24, Y+19	; 0x13
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	8b 8b       	std	Y+19, r24	; 0x13
     c1a:	8b 89       	ldd	r24, Y+19	; 0x13
     c1c:	86 30       	cpi	r24, 0x06	; 6
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__stack+0x123>
     c20:	85 cf       	rjmp	.-246    	; 0xb2c <__stack+0x2d>
	volatile uint8_t highestTempOfTheDayHour = INVALID_CELL;
	volatile uint8_t highestTempOfTheDayMinuteDecade = INVALID_CELL;
	
	active_buf = g_lowestAndHighestTemp_layer.buf;

	for (hour = 0; hour < HOURS_PER_DAY; hour++)
     c22:	8a 89       	ldd	r24, Y+18	; 0x12
     c24:	8f 5f       	subi	r24, 0xFF	; 255
     c26:	8a 8b       	std	Y+18, r24	; 0x12
     c28:	8a 89       	ldd	r24, Y+18	; 0x12
     c2a:	88 31       	cpi	r24, 0x18	; 24
     c2c:	08 f4       	brcc	.+2      	; 0xc30 <__stack+0x131>
     c2e:	79 cf       	rjmp	.-270    	; 0xb22 <__stack+0x23>
				}
			}
		}
	}
	
	buf_cls();
     c30:	a1 da       	rcall	.-2750   	; 0x174 <buf_cls>
	buf_locate(0,0);
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	08 db       	rcall	.-2544   	; 0x248 <buf_locate>
	
	if (highestTempOfTheDayHour != INVALID_CELL)
     c38:	8e 89       	ldd	r24, Y+22	; 0x16
     c3a:	8f 3f       	cpi	r24, 0xFF	; 255
     c3c:	09 f4       	brne	.+2      	; 0xc40 <__stack+0x141>
     c3e:	58 c0       	rjmp	.+176    	; 0xcf0 <__stack+0x1f1>
	{
		if ((g_timeArray[highestTempOfTheDayHour][highestTempOfTheDayMinuteDecade] & HALF_MASK) != 0)
     c40:	8e 89       	ldd	r24, Y+22	; 0x16
     c42:	2f 89       	ldd	r18, Y+23	; 0x17
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	fc 01       	movw	r30, r24
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	8e 0f       	add	r24, r30
     c4e:	9f 1f       	adc	r25, r31
     c50:	fc 01       	movw	r30, r24
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	e2 0f       	add	r30, r18
     c58:	f1 1d       	adc	r31, r1
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	e7 57       	subi	r30, 0x77	; 119
     c60:	fd 4f       	sbci	r31, 0xFD	; 253
     c62:	80 81       	ld	r24, Z
     c64:	83 fd       	sbrc	r24, 3
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <__stack+0x16d>

//******************** WARSTWA 2 ********************************
void LowestHighestTempWindow_Event()
{
	char slotString[17];
	char half = '0';
     c68:	10 e3       	ldi	r17, 0x30	; 48
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <__stack+0x16f>
	
	if (highestTempOfTheDayHour != INVALID_CELL)
	{
		if ((g_timeArray[highestTempOfTheDayHour][highestTempOfTheDayMinuteDecade] & HALF_MASK) != 0)
		{
			half = '5';
     c6c:	15 e3       	ldi	r17, 0x35	; 53
		}
		
		sprintf(slotString,"Max %02i:%02i %02i.%c%cC", highestTempOfTheDayHour, highestTempOfTheDayMinuteDecade * 10, (g_timeArray[highestTempOfTheDayHour][highestTempOfTheDayMinuteDecade] >> 4), half, CELCIUS_SIGN);
     c6e:	8e 89       	ldd	r24, Y+22	; 0x16
     c70:	3f 89       	ldd	r19, Y+23	; 0x17
     c72:	2f 89       	ldd	r18, Y+23	; 0x17
     c74:	4e 89       	ldd	r20, Y+22	; 0x16
     c76:	1f 92       	push	r1
     c78:	9f ed       	ldi	r25, 0xDF	; 223
     c7a:	9f 93       	push	r25
     c7c:	1f 92       	push	r1
     c7e:	1f 93       	push	r17
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	8e 0f       	add	r24, r30
     c8a:	9f 1f       	adc	r25, r31
     c8c:	fc 01       	movw	r30, r24
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	e3 0f       	add	r30, r19
     c94:	f1 1d       	adc	r31, r1
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	e7 57       	subi	r30, 0x77	; 119
     c9c:	fd 4f       	sbci	r31, 0xFD	; 253
     c9e:	80 81       	ld	r24, Z
     ca0:	91 81       	ldd	r25, Z+1	; 0x01
     ca2:	92 95       	swap	r25
     ca4:	82 95       	swap	r24
     ca6:	8f 70       	andi	r24, 0x0F	; 15
     ca8:	89 27       	eor	r24, r25
     caa:	9f 70       	andi	r25, 0x0F	; 15
     cac:	89 27       	eor	r24, r25
     cae:	9f 93       	push	r25
     cb0:	8f 93       	push	r24
     cb2:	82 2f       	mov	r24, r18
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	9c 01       	movw	r18, r24
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	22 0f       	add	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	82 0f       	add	r24, r18
     cc6:	93 1f       	adc	r25, r19
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	1f 92       	push	r1
     cce:	4f 93       	push	r20
     cd0:	88 e7       	ldi	r24, 0x78	; 120
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	9f 93       	push	r25
     cd6:	8f 93       	push	r24
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	9f 93       	push	r25
     cde:	8f 93       	push	r24
     ce0:	0e 94 6e 17 	call	0x2edc	; 0x2edc <sprintf>
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <__stack+0x205>
	}
	else
	{
		sprintf(slotString,"Max      NO DATA");
     cf0:	81 e1       	ldi	r24, 0x11	; 17
     cf2:	e1 e9       	ldi	r30, 0x91	; 145
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	de 01       	movw	r26, r28
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	01 90       	ld	r0, Z+
     cfc:	0d 92       	st	X+, r0
     cfe:	8a 95       	dec	r24
     d00:	e1 f7       	brne	.-8      	; 0xcfa <__stack+0x1fb>

//******************** WARSTWA 2 ********************************
void LowestHighestTempWindow_Event()
{
	char slotString[17];
	char half = '0';
     d02:	10 e3       	ldi	r17, 0x30	; 48
	else
	{
		sprintf(slotString,"Max      NO DATA");
	}
	
	buf_str(slotString);
     d04:	ce 01       	movw	r24, r28
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	c3 db       	rcall	.-2170   	; 0x490 <buf_str>
	buf_locate(1,0);
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	9c da       	rcall	.-2760   	; 0x248 <buf_locate>
	
	if (lowestTempOfTheDayHour != INVALID_CELL)
     d10:	8c 89       	ldd	r24, Y+20	; 0x14
     d12:	8f 3f       	cpi	r24, 0xFF	; 255
     d14:	09 f4       	brne	.+2      	; 0xd18 <__stack+0x219>
     d16:	55 c0       	rjmp	.+170    	; 0xdc2 <__stack+0x2c3>
	{
		if ((g_timeArray[lowestTempOfTheDayHour][lowestTempOfTheDayMinuteDecade] & HALF_MASK) != 0)
     d18:	8c 89       	ldd	r24, Y+20	; 0x14
     d1a:	2d 89       	ldd	r18, Y+21	; 0x15
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	fc 01       	movw	r30, r24
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	8e 0f       	add	r24, r30
     d26:	9f 1f       	adc	r25, r31
     d28:	fc 01       	movw	r30, r24
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	e2 0f       	add	r30, r18
     d30:	f1 1d       	adc	r31, r1
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	e7 57       	subi	r30, 0x77	; 119
     d38:	fd 4f       	sbci	r31, 0xFD	; 253
     d3a:	80 81       	ld	r24, Z
     d3c:	83 fd       	sbrc	r24, 3
		{
			half = '5';
     d3e:	15 e3       	ldi	r17, 0x35	; 53
		}
		
		sprintf(slotString,"Min %02i:%02i %02i.%c%cC", lowestTempOfTheDayHour, lowestTempOfTheDayMinuteDecade * 10, (g_timeArray[lowestTempOfTheDayHour][lowestTempOfTheDayMinuteDecade] >> 4), half, CELCIUS_SIGN);
     d40:	8c 89       	ldd	r24, Y+20	; 0x14
     d42:	3d 89       	ldd	r19, Y+21	; 0x15
     d44:	2d 89       	ldd	r18, Y+21	; 0x15
     d46:	4c 89       	ldd	r20, Y+20	; 0x14
     d48:	1f 92       	push	r1
     d4a:	9f ed       	ldi	r25, 0xDF	; 223
     d4c:	9f 93       	push	r25
     d4e:	1f 92       	push	r1
     d50:	1f 93       	push	r17
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	fc 01       	movw	r30, r24
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	8e 0f       	add	r24, r30
     d5c:	9f 1f       	adc	r25, r31
     d5e:	fc 01       	movw	r30, r24
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	e3 0f       	add	r30, r19
     d66:	f1 1d       	adc	r31, r1
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	e7 57       	subi	r30, 0x77	; 119
     d6e:	fd 4f       	sbci	r31, 0xFD	; 253
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	92 95       	swap	r25
     d76:	82 95       	swap	r24
     d78:	8f 70       	andi	r24, 0x0F	; 15
     d7a:	89 27       	eor	r24, r25
     d7c:	9f 70       	andi	r25, 0x0F	; 15
     d7e:	89 27       	eor	r24, r25
     d80:	9f 93       	push	r25
     d82:	8f 93       	push	r24
     d84:	82 2f       	mov	r24, r18
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	9c 01       	movw	r18, r24
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	82 0f       	add	r24, r18
     d98:	93 1f       	adc	r25, r19
     d9a:	9f 93       	push	r25
     d9c:	8f 93       	push	r24
     d9e:	1f 92       	push	r1
     da0:	4f 93       	push	r20
     da2:	82 ea       	ldi	r24, 0xA2	; 162
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	9f 93       	push	r25
     da8:	8f 93       	push	r24
     daa:	ce 01       	movw	r24, r28
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	9f 93       	push	r25
     db0:	8f 93       	push	r24
     db2:	0e 94 6e 17 	call	0x2edc	; 0x2edc <sprintf>
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	09 c0       	rjmp	.+18     	; 0xdd4 <__stack+0x2d5>
	}
	else
	{
		sprintf(slotString,"Min      NO DATA");
     dc2:	81 e1       	ldi	r24, 0x11	; 17
     dc4:	eb eb       	ldi	r30, 0xBB	; 187
     dc6:	f1 e0       	ldi	r31, 0x01	; 1
     dc8:	de 01       	movw	r26, r28
     dca:	11 96       	adiw	r26, 0x01	; 1
     dcc:	01 90       	ld	r0, Z+
     dce:	0d 92       	st	X+, r0
     dd0:	8a 95       	dec	r24
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <__stack+0x2cd>
	}
	
	buf_str(slotString);
     dd4:	ce 01       	movw	r24, r28
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	5b db       	rcall	.-2378   	; 0x490 <buf_str>
}
     dda:	67 96       	adiw	r28, 0x17	; 23
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	08 95       	ret

00000dee <SpecificTimeWindow_Event>:

//******************** WARSTWA 2 ********************************
void SpecificTimeWindow_Event()
{
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	61 97       	sbiw	r28, 0x11	; 17
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
	char slotString[17];
	int16_t temperature = g_timeArray[g_specificHour][g_specificMinute / 10];
     e0a:	80 91 41 02 	lds	r24, 0x0241
     e0e:	99 27       	eor	r25, r25
     e10:	87 fd       	sbrc	r24, 7
     e12:	90 95       	com	r25
     e14:	20 91 40 02 	lds	r18, 0x0240
     e18:	37 e6       	ldi	r19, 0x67	; 103
     e1a:	23 02       	muls	r18, r19
     e1c:	31 2d       	mov	r19, r1
     e1e:	11 24       	eor	r1, r1
     e20:	35 95       	asr	r19
     e22:	35 95       	asr	r19
     e24:	27 fd       	sbrc	r18, 7
     e26:	33 95       	inc	r19
     e28:	fc 01       	movw	r30, r24
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	8e 0f       	add	r24, r30
     e30:	9f 1f       	adc	r25, r31
     e32:	fc 01       	movw	r30, r24
     e34:	ee 0f       	add	r30, r30
     e36:	ff 1f       	adc	r31, r31
     e38:	e3 0f       	add	r30, r19
     e3a:	f1 1d       	adc	r31, r1
     e3c:	37 fd       	sbrc	r19, 7
     e3e:	fa 95       	dec	r31
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	e7 57       	subi	r30, 0x77	; 119
     e46:	fd 4f       	sbci	r31, 0xFD	; 253
     e48:	00 81       	ld	r16, Z
     e4a:	11 81       	ldd	r17, Z+1	; 0x01
     e4c:	78 01       	movw	r14, r16
	char half = '0';
	active_buf = g_specificTime_layer.buf;
     e4e:	8e ea       	ldi	r24, 0xAE	; 174
     e50:	93 e0       	ldi	r25, 0x03	; 3
     e52:	90 93 01 01 	sts	0x0101, r25
     e56:	80 93 00 01 	sts	0x0100, r24
	
	buf_cls();
     e5a:	8c d9       	rcall	.-3304   	; 0x174 <buf_cls>
	buf_locate(0,0);
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	f3 d9       	rcall	.-3098   	; 0x248 <buf_locate>
	sprintf(slotString,"Temp       Hour");
     e62:	80 e1       	ldi	r24, 0x10	; 16
     e64:	ec ec       	ldi	r30, 0xCC	; 204
     e66:	f1 e0       	ldi	r31, 0x01	; 1
     e68:	de 01       	movw	r26, r28
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	01 90       	ld	r0, Z+
     e6e:	0d 92       	st	X+, r0
     e70:	8a 95       	dec	r24
     e72:	e1 f7       	brne	.-8      	; 0xe6c <SpecificTimeWindow_Event+0x7e>
	buf_str(slotString);
     e74:	ce 01       	movw	r24, r28
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	0b db       	rcall	.-2538   	; 0x490 <buf_str>
	buf_locate(1,0);
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	e4 d9       	rcall	.-3128   	; 0x248 <buf_locate>
	
	if (temperature & ~CELL_TAGGED_MASK)
     e80:	c8 01       	movw	r24, r16
     e82:	8e 7f       	andi	r24, 0xFE	; 254
     e84:	89 2b       	or	r24, r25
     e86:	09 f4       	brne	.+2      	; 0xe8a <SpecificTimeWindow_Event+0x9c>
     e88:	65 c0       	rjmp	.+202    	; 0xf54 <SpecificTimeWindow_Event+0x166>
	{
		if ((temperature & HALF_MASK) != 0)
     e8a:	03 fd       	sbrc	r16, 3
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <SpecificTimeWindow_Event+0xa4>
//******************** WARSTWA 2 ********************************
void SpecificTimeWindow_Event()
{
	char slotString[17];
	int16_t temperature = g_timeArray[g_specificHour][g_specificMinute / 10];
	char half = '0';
     e8e:	30 e3       	ldi	r19, 0x30	; 48
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <SpecificTimeWindow_Event+0xa6>
	
	if (temperature & ~CELL_TAGGED_MASK)
	{
		if ((temperature & HALF_MASK) != 0)
		{
			half = '5';
     e92:	35 e3       	ldi	r19, 0x35	; 53
		}
		
		if (temperature >= 0)
     e94:	ff 20       	and	r15, r15
     e96:	7c f1       	brlt	.+94     	; 0xef6 <SpecificTimeWindow_Event+0x108>
		{
			sprintf(slotString,"%02i.%c%cC     %02i:%02i",(temperature >> 4), half, CELCIUS_SIGN,  g_specificHour, g_specificMinute);
     e98:	20 91 40 02 	lds	r18, 0x0240
     e9c:	82 2f       	mov	r24, r18
     e9e:	99 27       	eor	r25, r25
     ea0:	87 fd       	sbrc	r24, 7
     ea2:	90 95       	com	r25
     ea4:	9f 93       	push	r25
     ea6:	2f 93       	push	r18
     ea8:	20 91 41 02 	lds	r18, 0x0241
     eac:	82 2f       	mov	r24, r18
     eae:	99 27       	eor	r25, r25
     eb0:	87 fd       	sbrc	r24, 7
     eb2:	90 95       	com	r25
     eb4:	9f 93       	push	r25
     eb6:	2f 93       	push	r18
     eb8:	1f 92       	push	r1
     eba:	8f ed       	ldi	r24, 0xDF	; 223
     ebc:	8f 93       	push	r24
     ebe:	1f 92       	push	r1
     ec0:	3f 93       	push	r19
     ec2:	15 95       	asr	r17
     ec4:	07 95       	ror	r16
     ec6:	15 95       	asr	r17
     ec8:	07 95       	ror	r16
     eca:	15 95       	asr	r17
     ecc:	07 95       	ror	r16
     ece:	15 95       	asr	r17
     ed0:	07 95       	ror	r16
     ed2:	1f 93       	push	r17
     ed4:	0f 93       	push	r16
     ed6:	8c ed       	ldi	r24, 0xDC	; 220
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	9f 93       	push	r25
     edc:	8f 93       	push	r24
     ede:	ce 01       	movw	r24, r28
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	9f 93       	push	r25
     ee4:	8f 93       	push	r24
     ee6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <sprintf>
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	4e c0       	rjmp	.+156    	; 0xf92 <SpecificTimeWindow_Event+0x1a4>
		}
		else
		{
			sprintf(slotString,"%02i.%c%cC   %02i:%02i",(temperature >> 4), half, CELCIUS_SIGN,  g_specificHour, g_specificMinute);
     ef6:	20 91 40 02 	lds	r18, 0x0240
     efa:	82 2f       	mov	r24, r18
     efc:	99 27       	eor	r25, r25
     efe:	87 fd       	sbrc	r24, 7
     f00:	90 95       	com	r25
     f02:	9f 93       	push	r25
     f04:	2f 93       	push	r18
     f06:	20 91 41 02 	lds	r18, 0x0241
     f0a:	82 2f       	mov	r24, r18
     f0c:	99 27       	eor	r25, r25
     f0e:	87 fd       	sbrc	r24, 7
     f10:	90 95       	com	r25
     f12:	9f 93       	push	r25
     f14:	2f 93       	push	r18
     f16:	1f 92       	push	r1
     f18:	8f ed       	ldi	r24, 0xDF	; 223
     f1a:	8f 93       	push	r24
     f1c:	1f 92       	push	r1
     f1e:	3f 93       	push	r19
     f20:	15 95       	asr	r17
     f22:	07 95       	ror	r16
     f24:	15 95       	asr	r17
     f26:	07 95       	ror	r16
     f28:	15 95       	asr	r17
     f2a:	07 95       	ror	r16
     f2c:	15 95       	asr	r17
     f2e:	07 95       	ror	r16
     f30:	1f 93       	push	r17
     f32:	0f 93       	push	r16
     f34:	85 ef       	ldi	r24, 0xF5	; 245
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	9f 93       	push	r25
     f3a:	8f 93       	push	r24
     f3c:	ce 01       	movw	r24, r28
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	9f 93       	push	r25
     f42:	8f 93       	push	r24
     f44:	0e 94 6e 17 	call	0x2edc	; 0x2edc <sprintf>
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	1f c0       	rjmp	.+62     	; 0xf92 <SpecificTimeWindow_Event+0x1a4>
		}
	}
	else
	{
		sprintf(slotString,"NO DATA @  %02i:%02i",g_specificHour, g_specificMinute);
     f54:	20 91 40 02 	lds	r18, 0x0240
     f58:	82 2f       	mov	r24, r18
     f5a:	99 27       	eor	r25, r25
     f5c:	87 fd       	sbrc	r24, 7
     f5e:	90 95       	com	r25
     f60:	9f 93       	push	r25
     f62:	2f 93       	push	r18
     f64:	20 91 41 02 	lds	r18, 0x0241
     f68:	82 2f       	mov	r24, r18
     f6a:	99 27       	eor	r25, r25
     f6c:	87 fd       	sbrc	r24, 7
     f6e:	90 95       	com	r25
     f70:	9f 93       	push	r25
     f72:	2f 93       	push	r18
     f74:	8c e0       	ldi	r24, 0x0C	; 12
     f76:	92 e0       	ldi	r25, 0x02	; 2
     f78:	9f 93       	push	r25
     f7a:	8f 93       	push	r24
     f7c:	ce 01       	movw	r24, r28
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	9f 93       	push	r25
     f82:	8f 93       	push	r24
     f84:	0e 94 6e 17 	call	0x2edc	; 0x2edc <sprintf>
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
	}
	
	buf_str(slotString);
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	7c da       	rcall	.-2824   	; 0x490 <buf_str>
}
     f98:	61 96       	adiw	r28, 0x11	; 17
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	08 95       	ret

00000fb2 <ds18b20_ReadROM>:

uint64_t g_ds18b20RomValue = 0;
uint8_t g_ds18b20TempValue[9];

uint8_t ds18b20_ReadROM(uint8_t bus, uint64_t *value)
{
     fb2:	3f 92       	push	r3
     fb4:	4f 92       	push	r4
     fb6:	5f 92       	push	r5
     fb8:	6f 92       	push	r6
     fba:	7f 92       	push	r7
     fbc:	8f 92       	push	r8
     fbe:	9f 92       	push	r9
     fc0:	af 92       	push	r10
     fc2:	bf 92       	push	r11
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	28 97       	sbiw	r28, 0x08	; 8
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	78 2e       	mov	r7, r24
     fe6:	4b 01       	movw	r8, r22
	uint8_t buffer[8];
	
	if(!OWI_DetectPresence(bus))
     fe8:	48 d3       	rcall	.+1680   	; 0x167a <OWI_DetectPresence>
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <ds18b20_ReadROM+0x3e>
     fee:	04 c1       	rjmp	.+520    	; 0x11f8 <ds18b20_ReadROM+0x246>
	{
		return OWI_ERROR_PRESENCE;
	}
	
	OWI_ReadRom(buffer, bus);
     ff0:	67 2d       	mov	r22, r7
     ff2:	ce 01       	movw	r24, r28
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	d2 d2       	rcall	.+1444   	; 0x159c <OWI_ReadRom>
	
	*value  = (uint64_t)buffer[0];
	*value += (uint64_t)buffer[1] << 8;
     ff8:	2a 81       	ldd	r18, Y+2	; 0x02
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	08 e0       	ldi	r16, 0x08	; 8
    100a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__ashldi3>
    100e:	32 2e       	mov	r3, r18
    1010:	43 2e       	mov	r4, r19
    1012:	54 2e       	mov	r5, r20
    1014:	65 2e       	mov	r6, r21
    1016:	b6 2f       	mov	r27, r22
    1018:	a7 2f       	mov	r26, r23
    101a:	f8 2f       	mov	r31, r24
    101c:	e9 2f       	mov	r30, r25
	*value += (uint64_t)buffer[2] << 16;
    101e:	2b 81       	ldd	r18, Y+3	; 0x03
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	00 e1       	ldi	r16, 0x10	; 16
    1030:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__ashldi3>
    1034:	a2 2e       	mov	r10, r18
    1036:	b3 2e       	mov	r11, r19
    1038:	c4 2e       	mov	r12, r20
    103a:	d5 2e       	mov	r13, r21
    103c:	e6 2e       	mov	r14, r22
    103e:	f7 2e       	mov	r15, r23
    1040:	08 2f       	mov	r16, r24
    1042:	19 2f       	mov	r17, r25
	}
	
	OWI_ReadRom(buffer, bus);
	
	*value  = (uint64_t)buffer[0];
	*value += (uint64_t)buffer[1] << 8;
    1044:	23 2d       	mov	r18, r3
    1046:	34 2d       	mov	r19, r4
    1048:	45 2d       	mov	r20, r5
    104a:	56 2d       	mov	r21, r6
    104c:	6b 2f       	mov	r22, r27
    104e:	7a 2f       	mov	r23, r26
    1050:	8f 2f       	mov	r24, r31
    1052:	9e 2f       	mov	r25, r30
    1054:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__adddi3>
		return OWI_ERROR_PRESENCE;
	}
	
	OWI_ReadRom(buffer, bus);
	
	*value  = (uint64_t)buffer[0];
    1058:	a9 80       	ldd	r10, Y+1	; 0x01
	*value += (uint64_t)buffer[1] << 8;
	*value += (uint64_t)buffer[2] << 16;
    105a:	b1 2c       	mov	r11, r1
    105c:	c1 2c       	mov	r12, r1
    105e:	d1 2c       	mov	r13, r1
    1060:	e1 2c       	mov	r14, r1
    1062:	f1 2c       	mov	r15, r1
    1064:	00 e0       	ldi	r16, 0x00	; 0
    1066:	10 e0       	ldi	r17, 0x00	; 0
    1068:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__adddi3>
    106c:	32 2e       	mov	r3, r18
    106e:	43 2e       	mov	r4, r19
    1070:	54 2e       	mov	r5, r20
    1072:	65 2e       	mov	r6, r21
    1074:	b6 2f       	mov	r27, r22
    1076:	a7 2f       	mov	r26, r23
    1078:	f8 2f       	mov	r31, r24
    107a:	e9 2f       	mov	r30, r25
	*value += (uint64_t)buffer[3] << 24;
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	08 e1       	ldi	r16, 0x18	; 24
    108e:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__ashldi3>
    1092:	a2 2e       	mov	r10, r18
    1094:	b3 2e       	mov	r11, r19
    1096:	c4 2e       	mov	r12, r20
    1098:	d5 2e       	mov	r13, r21
    109a:	e6 2e       	mov	r14, r22
    109c:	f7 2e       	mov	r15, r23
    109e:	08 2f       	mov	r16, r24
    10a0:	19 2f       	mov	r17, r25
    10a2:	23 2d       	mov	r18, r3
    10a4:	34 2d       	mov	r19, r4
    10a6:	45 2d       	mov	r20, r5
    10a8:	56 2d       	mov	r21, r6
    10aa:	6b 2f       	mov	r22, r27
    10ac:	7a 2f       	mov	r23, r26
    10ae:	8f 2f       	mov	r24, r31
    10b0:	9e 2f       	mov	r25, r30
    10b2:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__adddi3>
    10b6:	32 2e       	mov	r3, r18
    10b8:	43 2e       	mov	r4, r19
    10ba:	54 2e       	mov	r5, r20
    10bc:	65 2e       	mov	r6, r21
    10be:	b6 2f       	mov	r27, r22
    10c0:	a7 2f       	mov	r26, r23
    10c2:	f8 2f       	mov	r31, r24
    10c4:	e9 2f       	mov	r30, r25
	*value += (uint64_t)buffer[4] << 32;
    10c6:	2d 81       	ldd	r18, Y+5	; 0x05
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	00 e2       	ldi	r16, 0x20	; 32
    10d8:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__ashldi3>
    10dc:	a2 2e       	mov	r10, r18
    10de:	b3 2e       	mov	r11, r19
    10e0:	c4 2e       	mov	r12, r20
    10e2:	d5 2e       	mov	r13, r21
    10e4:	e6 2e       	mov	r14, r22
    10e6:	f7 2e       	mov	r15, r23
    10e8:	08 2f       	mov	r16, r24
    10ea:	19 2f       	mov	r17, r25
    10ec:	23 2d       	mov	r18, r3
    10ee:	34 2d       	mov	r19, r4
    10f0:	45 2d       	mov	r20, r5
    10f2:	56 2d       	mov	r21, r6
    10f4:	6b 2f       	mov	r22, r27
    10f6:	7a 2f       	mov	r23, r26
    10f8:	8f 2f       	mov	r24, r31
    10fa:	9e 2f       	mov	r25, r30
    10fc:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__adddi3>
    1100:	32 2e       	mov	r3, r18
    1102:	43 2e       	mov	r4, r19
    1104:	54 2e       	mov	r5, r20
    1106:	65 2e       	mov	r6, r21
    1108:	b6 2f       	mov	r27, r22
    110a:	a7 2f       	mov	r26, r23
    110c:	f8 2f       	mov	r31, r24
    110e:	e9 2f       	mov	r30, r25
	*value += (uint64_t)buffer[5] << 40;
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	08 e2       	ldi	r16, 0x28	; 40
    1122:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__ashldi3>
    1126:	a2 2e       	mov	r10, r18
    1128:	b3 2e       	mov	r11, r19
    112a:	c4 2e       	mov	r12, r20
    112c:	d5 2e       	mov	r13, r21
    112e:	e6 2e       	mov	r14, r22
    1130:	f7 2e       	mov	r15, r23
    1132:	08 2f       	mov	r16, r24
    1134:	19 2f       	mov	r17, r25
    1136:	23 2d       	mov	r18, r3
    1138:	34 2d       	mov	r19, r4
    113a:	45 2d       	mov	r20, r5
    113c:	56 2d       	mov	r21, r6
    113e:	6b 2f       	mov	r22, r27
    1140:	7a 2f       	mov	r23, r26
    1142:	8f 2f       	mov	r24, r31
    1144:	9e 2f       	mov	r25, r30
    1146:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__adddi3>
    114a:	32 2e       	mov	r3, r18
    114c:	43 2e       	mov	r4, r19
    114e:	54 2e       	mov	r5, r20
    1150:	65 2e       	mov	r6, r21
    1152:	b6 2f       	mov	r27, r22
    1154:	a7 2f       	mov	r26, r23
    1156:	f8 2f       	mov	r31, r24
    1158:	e9 2f       	mov	r30, r25
	*value += (uint64_t)buffer[6] << 48;
    115a:	2f 81       	ldd	r18, Y+7	; 0x07
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	00 e3       	ldi	r16, 0x30	; 48
    116c:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__ashldi3>
    1170:	a2 2e       	mov	r10, r18
    1172:	b3 2e       	mov	r11, r19
    1174:	c4 2e       	mov	r12, r20
    1176:	d5 2e       	mov	r13, r21
    1178:	e6 2e       	mov	r14, r22
    117a:	f7 2e       	mov	r15, r23
    117c:	08 2f       	mov	r16, r24
    117e:	19 2f       	mov	r17, r25
    1180:	23 2d       	mov	r18, r3
    1182:	34 2d       	mov	r19, r4
    1184:	45 2d       	mov	r20, r5
    1186:	56 2d       	mov	r21, r6
    1188:	6b 2f       	mov	r22, r27
    118a:	7a 2f       	mov	r23, r26
    118c:	8f 2f       	mov	r24, r31
    118e:	9e 2f       	mov	r25, r30
    1190:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__adddi3>
    1194:	32 2e       	mov	r3, r18
    1196:	43 2e       	mov	r4, r19
    1198:	54 2e       	mov	r5, r20
    119a:	65 2e       	mov	r6, r21
    119c:	b6 2f       	mov	r27, r22
    119e:	a7 2f       	mov	r26, r23
    11a0:	f8 2f       	mov	r31, r24
    11a2:	e9 2f       	mov	r30, r25
	*value += (uint64_t)buffer[7] << 56;
    11a4:	28 85       	ldd	r18, Y+8	; 0x08
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	08 e3       	ldi	r16, 0x38	; 56
    11b6:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__ashldi3>
    11ba:	a2 2e       	mov	r10, r18
    11bc:	b3 2e       	mov	r11, r19
    11be:	c4 2e       	mov	r12, r20
    11c0:	d5 2e       	mov	r13, r21
    11c2:	e6 2e       	mov	r14, r22
    11c4:	f7 2e       	mov	r15, r23
    11c6:	08 2f       	mov	r16, r24
    11c8:	19 2f       	mov	r17, r25
    11ca:	23 2d       	mov	r18, r3
    11cc:	34 2d       	mov	r19, r4
    11ce:	45 2d       	mov	r20, r5
    11d0:	56 2d       	mov	r21, r6
    11d2:	6b 2f       	mov	r22, r27
    11d4:	7a 2f       	mov	r23, r26
    11d6:	8f 2f       	mov	r24, r31
    11d8:	9e 2f       	mov	r25, r30
    11da:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__adddi3>
    11de:	f4 01       	movw	r30, r8
    11e0:	20 83       	st	Z, r18
    11e2:	31 83       	std	Z+1, r19	; 0x01
    11e4:	42 83       	std	Z+2, r20	; 0x02
    11e6:	53 83       	std	Z+3, r21	; 0x03
    11e8:	64 83       	std	Z+4, r22	; 0x04
    11ea:	75 83       	std	Z+5, r23	; 0x05
    11ec:	86 83       	std	Z+6, r24	; 0x06
    11ee:	97 83       	std	Z+7, r25	; 0x07
	
	OWI_DetectPresence(bus);
    11f0:	87 2d       	mov	r24, r7
    11f2:	43 d2       	rcall	.+1158   	; 0x167a <OWI_DetectPresence>
	return OWI_NOERROR;
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <ds18b20_ReadROM+0x248>
{
	uint8_t buffer[8];
	
	if(!OWI_DetectPresence(bus))
	{
		return OWI_ERROR_PRESENCE;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
	*value += (uint64_t)buffer[6] << 48;
	*value += (uint64_t)buffer[7] << 56;
	
	OWI_DetectPresence(bus);
	return OWI_NOERROR;
}
    11fa:	28 96       	adiw	r28, 0x08	; 8
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	bf 90       	pop	r11
    1218:	af 90       	pop	r10
    121a:	9f 90       	pop	r9
    121c:	8f 90       	pop	r8
    121e:	7f 90       	pop	r7
    1220:	6f 90       	pop	r6
    1222:	5f 90       	pop	r5
    1224:	4f 90       	pop	r4
    1226:	3f 90       	pop	r3
    1228:	08 95       	ret

0000122a <ds18b20_ReadTemp>:

uint8_t ds18b20_ReadTemp(uint8_t bus, uint8_t *value)
{
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	e8 2e       	mov	r14, r24
    1238:	8b 01       	movw	r16, r22
	unsigned char i = 0;
	
	if(!OWI_DetectPresence(bus))
    123a:	1f d2       	rcall	.+1086   	; 0x167a <OWI_DetectPresence>
    123c:	88 23       	and	r24, r24
    123e:	e9 f0       	breq	.+58     	; 0x127a <ds18b20_ReadTemp+0x50>
	{
		return OWI_ERROR_PRESENCE;
	}
	
	OWI_SkipRom(bus);
    1240:	8e 2d       	mov	r24, r14
    1242:	a9 d1       	rcall	.+850    	; 0x1596 <OWI_SkipRom>
	OWI_SendByte(0x44, bus);
    1244:	6e 2d       	mov	r22, r14
    1246:	84 e4       	ldi	r24, 0x44	; 68
    1248:	80 d1       	rcall	.+768    	; 0x154a <OWI_SendByte>
	
	OWI_DetectPresence(bus);
    124a:	8e 2d       	mov	r24, r14
    124c:	16 d2       	rcall	.+1068   	; 0x167a <OWI_DetectPresence>
	OWI_SkipRom(bus);
    124e:	8e 2d       	mov	r24, r14
    1250:	a2 d1       	rcall	.+836    	; 0x1596 <OWI_SkipRom>
	OWI_SendByte(0xBE, bus);
    1252:	6e 2d       	mov	r22, r14
    1254:	8e eb       	ldi	r24, 0xBE	; 190
    1256:	79 d1       	rcall	.+754    	; 0x154a <OWI_SendByte>
    1258:	e8 01       	movw	r28, r16

	for(i = 0; i < 9; i++)
    125a:	f1 2c       	mov	r15, r1
	{
		value[i] = OWI_ReceiveByte(bus);
    125c:	8e 2d       	mov	r24, r14
    125e:	89 d1       	rcall	.+786    	; 0x1572 <OWI_ReceiveByte>
    1260:	89 93       	st	Y+, r24
	
	OWI_DetectPresence(bus);
	OWI_SkipRom(bus);
	OWI_SendByte(0xBE, bus);

	for(i = 0; i < 9; i++)
    1262:	f3 94       	inc	r15
    1264:	89 e0       	ldi	r24, 0x09	; 9
    1266:	f8 12       	cpse	r15, r24
    1268:	f9 cf       	rjmp	.-14     	; 0x125c <ds18b20_ReadTemp+0x32>
	{
		value[i] = OWI_ReceiveByte(bus);
	}
	value[0] &= ~CELL_TAGGED_MASK;
    126a:	f8 01       	movw	r30, r16
    126c:	80 81       	ld	r24, Z
    126e:	8e 7f       	andi	r24, 0xFE	; 254
    1270:	80 83       	st	Z, r24
	
	OWI_DetectPresence(bus);
    1272:	8e 2d       	mov	r24, r14
    1274:	02 d2       	rcall	.+1028   	; 0x167a <OWI_DetectPresence>
	return OWI_NOERROR;
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	01 c0       	rjmp	.+2      	; 0x127c <ds18b20_ReadTemp+0x52>
{
	unsigned char i = 0;
	
	if(!OWI_DetectPresence(bus))
	{
		return OWI_ERROR_PRESENCE;
    127a:	81 e0       	ldi	r24, 0x01	; 1
	}
	value[0] &= ~CELL_TAGGED_MASK;
	
	OWI_DetectPresence(bus);
	return OWI_NOERROR;
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	08 95       	ret

0000128a <ds18b20_WriteScratchpad>:

uint8_t ds18b20_WriteScratchpad(uint8_t bus, uint8_t TH, uint8_t TL, uint8_t confReg)
{
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	c8 2f       	mov	r28, r24
    1294:	06 2f       	mov	r16, r22
    1296:	14 2f       	mov	r17, r20
    1298:	d2 2f       	mov	r29, r18
	if(!OWI_DetectPresence(bus))
    129a:	ef d1       	rcall	.+990    	; 0x167a <OWI_DetectPresence>
    129c:	88 23       	and	r24, r24
    129e:	91 f0       	breq	.+36     	; 0x12c4 <ds18b20_WriteScratchpad+0x3a>
	{
		return OWI_ERROR_PRESENCE;
	}
	
	OWI_SkipRom(bus);
    12a0:	8c 2f       	mov	r24, r28
    12a2:	79 d1       	rcall	.+754    	; 0x1596 <OWI_SkipRom>
	OWI_SendByte(0x4E, bus);
    12a4:	6c 2f       	mov	r22, r28
    12a6:	8e e4       	ldi	r24, 0x4E	; 78
    12a8:	50 d1       	rcall	.+672    	; 0x154a <OWI_SendByte>
	OWI_SendByte(TH, bus);
    12aa:	6c 2f       	mov	r22, r28
    12ac:	80 2f       	mov	r24, r16
    12ae:	4d d1       	rcall	.+666    	; 0x154a <OWI_SendByte>
	OWI_SendByte(TL, bus);
    12b0:	6c 2f       	mov	r22, r28
    12b2:	81 2f       	mov	r24, r17
    12b4:	4a d1       	rcall	.+660    	; 0x154a <OWI_SendByte>
	OWI_SendByte(confReg, bus);
    12b6:	6c 2f       	mov	r22, r28
    12b8:	8d 2f       	mov	r24, r29
    12ba:	47 d1       	rcall	.+654    	; 0x154a <OWI_SendByte>
	
	OWI_DetectPresence(bus);
    12bc:	8c 2f       	mov	r24, r28
    12be:	dd d1       	rcall	.+954    	; 0x167a <OWI_DetectPresence>
	return OWI_NOERROR;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <ds18b20_WriteScratchpad+0x3c>

uint8_t ds18b20_WriteScratchpad(uint8_t bus, uint8_t TH, uint8_t TL, uint8_t confReg)
{
	if(!OWI_DetectPresence(bus))
	{
		return OWI_ERROR_PRESENCE;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
	OWI_SendByte(TL, bus);
	OWI_SendByte(confReg, bus);
	
	OWI_DetectPresence(bus);
	return OWI_NOERROR;
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <i2cSetBitrate>:
#include "i2c_twi.h"

TIME_t g_time;
DATE_t g_date;

void i2cSetBitrate(uint16_t bitrateKHz) {
    12d0:	bc 01       	movw	r22, r24
	uint8_t bitrate_div;

	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
    12d2:	80 e8       	ldi	r24, 0x80	; 128
    12d4:	9e e3       	ldi	r25, 0x3E	; 62
    12d6:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__udivmodhi4>
    12da:	86 2f       	mov	r24, r22
	if(bitrate_div >= 16)
    12dc:	60 31       	cpi	r22, 0x10	; 16
    12de:	48 f0       	brcs	.+18     	; 0x12f2 <i2cSetBitrate+0x22>

// konwersja liczby BCD na dziesiêtn¹
uint8_t bcd2dec(uint8_t bcd)
{
	return ((((bcd) >> 4) & 0x0F) * 10) + ((bcd) & 0x0F);
}
    12e0:	77 27       	eor	r23, r23
void i2cSetBitrate(uint16_t bitrateKHz) {
	uint8_t bitrate_div;

	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
	if(bitrate_div >= 16)
		bitrate_div = (bitrate_div-16)/2;
    12e2:	60 51       	subi	r22, 0x10	; 16
    12e4:	71 09       	sbc	r23, r1
    12e6:	cb 01       	movw	r24, r22
    12e8:	99 23       	and	r25, r25
    12ea:	0c f4       	brge	.+2      	; 0x12ee <i2cSetBitrate+0x1e>
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	95 95       	asr	r25
    12f0:	87 95       	ror	r24

	TWBR = bitrate_div;
    12f2:	80 93 b8 00 	sts	0x00B8, r24
    12f6:	08 95       	ret

000012f8 <TWI_start>:
}

void TWI_start(void) {
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    12f8:	84 ea       	ldi	r24, 0xA4	; 164
    12fa:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR&(1<<TWINT)));
    12fe:	ec eb       	ldi	r30, 0xBC	; 188
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	ec f7       	brge	.-6      	; 0x1302 <TWI_start+0xa>
}
    1308:	08 95       	ret

0000130a <TWI_stop>:

void TWI_stop(void) {
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    130a:	84 e9       	ldi	r24, 0x94	; 148
    130c:	80 93 bc 00 	sts	0x00BC, r24
	while ( !(TWCR&(1<<TWSTO)));
    1310:	ec eb       	ldi	r30, 0xBC	; 188
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	84 ff       	sbrs	r24, 4
    1318:	fd cf       	rjmp	.-6      	; 0x1314 <TWI_stop+0xa>
}
    131a:	08 95       	ret

0000131c <TWI_write>:

void TWI_write(uint8_t bajt) {
	TWDR = bajt;
    131c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    1320:	84 e8       	ldi	r24, 0x84	; 132
    1322:	80 93 bc 00 	sts	0x00BC, r24
	while ( !(TWCR&(1<<TWINT)));
    1326:	ec eb       	ldi	r30, 0xBC	; 188
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	88 23       	and	r24, r24
    132e:	ec f7       	brge	.-6      	; 0x132a <TWI_write+0xe>
}
    1330:	08 95       	ret

00001332 <TWI_read>:

uint8_t TWI_read(uint8_t ack) {
	TWCR = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN);
    1332:	20 e4       	ldi	r18, 0x40	; 64
    1334:	82 9f       	mul	r24, r18
    1336:	c0 01       	movw	r24, r0
    1338:	11 24       	eor	r1, r1
    133a:	84 68       	ori	r24, 0x84	; 132
    133c:	9f 6f       	ori	r25, 0xFF	; 255
    133e:	80 93 bc 00 	sts	0x00BC, r24
	while ( !(TWCR & (1<<TWINT)));
    1342:	ec eb       	ldi	r30, 0xBC	; 188
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	88 23       	and	r24, r24
    134a:	ec f7       	brge	.-6      	; 0x1346 <TWI_read+0x14>
	return TWDR;
    134c:	80 91 bb 00 	lds	r24, 0x00BB
}
    1350:	08 95       	ret

00001352 <TWI_write_buf>:



void TWI_write_buf( uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf ) {
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	f8 2e       	mov	r15, r24
    135e:	06 2f       	mov	r16, r22
    1360:	14 2f       	mov	r17, r20
    1362:	e9 01       	movw	r28, r18

	TWI_start();
    1364:	c9 df       	rcall	.-110    	; 0x12f8 <TWI_start>
	TWI_write(SLA);
    1366:	8f 2d       	mov	r24, r15
    1368:	d9 df       	rcall	.-78     	; 0x131c <TWI_write>
	TWI_write(adr);
    136a:	80 2f       	mov	r24, r16
    136c:	d7 df       	rcall	.-82     	; 0x131c <TWI_write>
	while (len--) TWI_write(*buf++);
    136e:	11 23       	and	r17, r17
    1370:	21 f0       	breq	.+8      	; 0x137a <TWI_write_buf+0x28>
    1372:	89 91       	ld	r24, Y+
    1374:	d3 df       	rcall	.-90     	; 0x131c <TWI_write>
    1376:	11 50       	subi	r17, 0x01	; 1
    1378:	e1 f7       	brne	.-8      	; 0x1372 <TWI_write_buf+0x20>
	TWI_stop();
    137a:	c7 df       	rcall	.-114    	; 0x130a <TWI_stop>
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	08 95       	ret

00001388 <TWI_read_buf>:



void TWI_read_buf(uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf) {
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	08 2f       	mov	r16, r24
    1396:	f6 2e       	mov	r15, r22
    1398:	14 2f       	mov	r17, r20
    139a:	e9 01       	movw	r28, r18

	TWI_start();
    139c:	ad df       	rcall	.-166    	; 0x12f8 <TWI_start>
	TWI_write(SLA);
    139e:	80 2f       	mov	r24, r16
    13a0:	bd df       	rcall	.-134    	; 0x131c <TWI_write>
	TWI_write(adr);
    13a2:	8f 2d       	mov	r24, r15
    13a4:	bb df       	rcall	.-138    	; 0x131c <TWI_write>
	TWI_start();
    13a6:	a8 df       	rcall	.-176    	; 0x12f8 <TWI_start>
	TWI_write(SLA + 1);
    13a8:	80 2f       	mov	r24, r16
    13aa:	8f 5f       	subi	r24, 0xFF	; 255
    13ac:	b7 df       	rcall	.-146    	; 0x131c <TWI_write>
	while (len--) *buf++ = TWI_read( len ? ACK : NACK );
    13ae:	01 2f       	mov	r16, r17
    13b0:	01 50       	subi	r16, 0x01	; 1
    13b2:	11 23       	and	r17, r17
    13b4:	69 f0       	breq	.+26     	; 0x13d0 <TWI_read_buf+0x48>
    13b6:	ff 24       	eor	r15, r15
    13b8:	f3 94       	inc	r15
    13ba:	e1 2c       	mov	r14, r1
    13bc:	1f 2d       	mov	r17, r15
    13be:	01 11       	cpse	r16, r1
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <TWI_read_buf+0x3c>
    13c2:	1e 2d       	mov	r17, r14
    13c4:	81 2f       	mov	r24, r17
    13c6:	b5 df       	rcall	.-150    	; 0x1332 <TWI_read>
    13c8:	89 93       	st	Y+, r24
    13ca:	01 50       	subi	r16, 0x01	; 1
    13cc:	11 11       	cpse	r17, r1
    13ce:	f6 cf       	rjmp	.-20     	; 0x13bc <TWI_read_buf+0x34>
	TWI_stop();
    13d0:	9c df       	rcall	.-200    	; 0x130a <TWI_stop>
}
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	08 95       	ret

000013e0 <dec2bcd>:
}

// konwersja liczby dziesiêtnej na BCD
uint8_t dec2bcd(uint8_t dec)
{
	return ((dec / 10)<<4) | (dec % 10);
    13e0:	9d ec       	ldi	r25, 0xCD	; 205
    13e2:	89 9f       	mul	r24, r25
    13e4:	91 2d       	mov	r25, r1
    13e6:	11 24       	eor	r1, r1
    13e8:	96 95       	lsr	r25
    13ea:	96 95       	lsr	r25
    13ec:	96 95       	lsr	r25
    13ee:	40 e1       	ldi	r20, 0x10	; 16
    13f0:	94 9f       	mul	r25, r20
    13f2:	90 01       	movw	r18, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	99 0f       	add	r25, r25
    13f8:	39 2f       	mov	r19, r25
    13fa:	33 0f       	add	r19, r19
    13fc:	33 0f       	add	r19, r19
    13fe:	93 0f       	add	r25, r19
    1400:	89 1b       	sub	r24, r25
}
    1402:	82 2b       	or	r24, r18
    1404:	08 95       	ret

00001406 <ds1307_SetCurrentDate>:
	
	TWI_write_buf(DS1307_ADDR, TIME_ADDR_START, TIME_SIZE, buffer);
}

void ds1307_SetCurrentDate(DATE_t *date)
{
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	00 d0       	rcall	.+0      	; 0x1410 <ds1307_SetCurrentDate+0xa>
    1410:	00 d0       	rcall	.+0      	; 0x1412 <ds1307_SetCurrentDate+0xc>
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	8c 01       	movw	r16, r24
	uint8_t buffer[DATE_SIZE];
	
	buffer[0] = dec2bcd(date->day);
    1418:	fc 01       	movw	r30, r24
    141a:	80 81       	ld	r24, Z
    141c:	e1 df       	rcall	.-62     	; 0x13e0 <dec2bcd>
    141e:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = dec2bcd(date->date);
    1420:	f8 01       	movw	r30, r16
    1422:	81 81       	ldd	r24, Z+1	; 0x01
    1424:	dd df       	rcall	.-70     	; 0x13e0 <dec2bcd>
    1426:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = dec2bcd(date->month);
    1428:	f8 01       	movw	r30, r16
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	d9 df       	rcall	.-78     	; 0x13e0 <dec2bcd>
    142e:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = dec2bcd(date->year);
    1430:	f8 01       	movw	r30, r16
    1432:	83 81       	ldd	r24, Z+3	; 0x03
    1434:	d5 df       	rcall	.-86     	; 0x13e0 <dec2bcd>
    1436:	8c 83       	std	Y+4, r24	; 0x04
	
	TWI_write_buf(DS1307_ADDR, DATE_ADDR_START, DATE_SIZE, buffer);
    1438:	9e 01       	movw	r18, r28
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	44 e0       	ldi	r20, 0x04	; 4
    1440:	63 e0       	ldi	r22, 0x03	; 3
    1442:	80 ed       	ldi	r24, 0xD0	; 208
    1444:	86 df       	rcall	.-244    	; 0x1352 <TWI_write_buf>
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	08 95       	ret

00001458 <ds1307_SetCurrentTime>:
	
	return date;
}

void ds1307_SetCurrentTime(TIME_t *time)
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	00 d0       	rcall	.+0      	; 0x1462 <ds1307_SetCurrentTime+0xa>
    1462:	1f 92       	push	r1
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	8c 01       	movw	r16, r24
	uint8_t buffer[TIME_SIZE];
	
	buffer[0] = dec2bcd(time->second);
    146a:	fc 01       	movw	r30, r24
    146c:	80 81       	ld	r24, Z
    146e:	b8 df       	rcall	.-144    	; 0x13e0 <dec2bcd>
    1470:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = dec2bcd(time->minute);
    1472:	f8 01       	movw	r30, r16
    1474:	81 81       	ldd	r24, Z+1	; 0x01
    1476:	b4 df       	rcall	.-152    	; 0x13e0 <dec2bcd>
    1478:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = dec2bcd(time->hour);
    147a:	f8 01       	movw	r30, r16
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	b0 df       	rcall	.-160    	; 0x13e0 <dec2bcd>
    1480:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_write_buf(DS1307_ADDR, TIME_ADDR_START, TIME_SIZE, buffer);
    1482:	9e 01       	movw	r18, r28
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	43 e0       	ldi	r20, 0x03	; 3
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	80 ed       	ldi	r24, 0xD0	; 208
    148e:	61 df       	rcall	.-318    	; 0x1352 <TWI_write_buf>
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	08 95       	ret

000014a0 <bcd2dec>:
}

// konwersja liczby BCD na dziesiêtn¹
uint8_t bcd2dec(uint8_t bcd)
{
	return ((((bcd) >> 4) & 0x0F) * 10) + ((bcd) & 0x0F);
    14a0:	98 2f       	mov	r25, r24
    14a2:	92 95       	swap	r25
    14a4:	9f 70       	andi	r25, 0x0F	; 15
    14a6:	99 0f       	add	r25, r25
    14a8:	29 2f       	mov	r18, r25
    14aa:	22 0f       	add	r18, r18
    14ac:	22 0f       	add	r18, r18
    14ae:	92 0f       	add	r25, r18
    14b0:	8f 70       	andi	r24, 0x0F	; 15
}
    14b2:	89 0f       	add	r24, r25
    14b4:	08 95       	ret

000014b6 <ds1307_GetCurrentDate>:
	
	return time;
}

DATE_t ds1307_GetCurrentDate()
{
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <ds1307_GetCurrentDate+0xc>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <ds1307_GetCurrentDate+0xe>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	DATE_t date;
	uint8_t buffer[DATE_SIZE];
	
	TWI_read_buf(DS1307_ADDR, DATE_ADDR_START, DATE_SIZE, buffer);
    14c8:	9e 01       	movw	r18, r28
    14ca:	2f 5f       	subi	r18, 0xFF	; 255
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	44 e0       	ldi	r20, 0x04	; 4
    14d0:	63 e0       	ldi	r22, 0x03	; 3
    14d2:	80 ed       	ldi	r24, 0xD0	; 208
    14d4:	59 df       	rcall	.-334    	; 0x1388 <TWI_read_buf>
	
	date.day =	bcd2dec(buffer[0]);
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	e3 df       	rcall	.-58     	; 0x14a0 <bcd2dec>
    14da:	f8 2e       	mov	r15, r24
	date.date = bcd2dec(buffer[1]);
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	e0 df       	rcall	.-64     	; 0x14a0 <bcd2dec>
    14e0:	08 2f       	mov	r16, r24
	date.month = bcd2dec(buffer[2]);
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	dd df       	rcall	.-70     	; 0x14a0 <bcd2dec>
    14e6:	18 2f       	mov	r17, r24
	date.year = bcd2dec(buffer[3]);
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	da df       	rcall	.-76     	; 0x14a0 <bcd2dec>
    14ec:	98 2f       	mov	r25, r24
	
	return date;
}
    14ee:	6f 2d       	mov	r22, r15
    14f0:	70 2f       	mov	r23, r16
    14f2:	81 2f       	mov	r24, r17
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	08 95       	ret

00001508 <ds1307_GetCurrentTime>:
	while (len--) *buf++ = TWI_read( len ? ACK : NACK );
	TWI_stop();
}

TIME_t ds1307_GetCurrentTime()
{
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	00 d0       	rcall	.+0      	; 0x1512 <ds1307_GetCurrentTime+0xa>
    1512:	1f 92       	push	r1
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	TIME_t time;
	uint8_t buffer[TIME_SIZE];
	
	TWI_read_buf(DS1307_ADDR, TIME_ADDR_START, TIME_SIZE, buffer);
    1518:	9e 01       	movw	r18, r28
    151a:	2f 5f       	subi	r18, 0xFF	; 255
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	43 e0       	ldi	r20, 0x03	; 3
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	80 ed       	ldi	r24, 0xD0	; 208
    1524:	31 df       	rcall	.-414    	; 0x1388 <TWI_read_buf>
	
	time.second = bcd2dec(buffer[0]);
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	bb df       	rcall	.-138    	; 0x14a0 <bcd2dec>
    152a:	08 2f       	mov	r16, r24
	time.minute = bcd2dec(buffer[1]);
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	b8 df       	rcall	.-144    	; 0x14a0 <bcd2dec>
    1530:	18 2f       	mov	r17, r24
	time.hour = bcd2dec(buffer[2]);
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	b5 df       	rcall	.-150    	; 0x14a0 <bcd2dec>
	
	return time;
}
    1536:	60 2f       	mov	r22, r16
    1538:	71 2f       	mov	r23, r17
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret

0000154a <OWI_SendByte>:
 *  \param  data    The data to send on the bus(es).
 *  
 *  \param  pins    A bitmask of the buses to send the data to.
 */
void OWI_SendByte(unsigned char data, unsigned char pins)
{
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	d8 2f       	mov	r29, r24
    1552:	16 2f       	mov	r17, r22
    1554:	c8 e0       	ldi	r28, 0x08	; 8
    for (i = 0; i < 8; i++)
    {
        // Determine if lsb is '0' or '1' and transmit corresponding
        // waveform on the bus.
        temp = data & 0x01;
        if (temp)
    1556:	d0 ff       	sbrs	r29, 0
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <OWI_SendByte+0x16>
        {
            OWI_WriteBit1(pins);
    155a:	81 2f       	mov	r24, r17
    155c:	37 d0       	rcall	.+110    	; 0x15cc <OWI_WriteBit1>
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <OWI_SendByte+0x1a>
        }
        else
        {
            OWI_WriteBit0(pins);
    1560:	81 2f       	mov	r24, r17
    1562:	4f d0       	rcall	.+158    	; 0x1602 <OWI_WriteBit0>
        }
        // Right shift the data to get next bit.
        data >>= 1;
    1564:	d6 95       	lsr	r29
    1566:	c1 50       	subi	r28, 0x01	; 1
{
    unsigned char temp;
    unsigned char i;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
    1568:	b1 f7       	brne	.-20     	; 0x1556 <OWI_SendByte+0xc>
            OWI_WriteBit0(pins);
        }
        // Right shift the data to get next bit.
        data >>= 1;
    }
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	08 95       	ret

00001572 <OWI_ReceiveByte>:
 *  \param  pin     A bitmask of the bus to read from.
 *  
 *  \return     The byte read from the bus.
 */
unsigned char OWI_ReceiveByte(unsigned char pin)
{
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	18 2f       	mov	r17, r24
    157a:	d8 e0       	ldi	r29, 0x08	; 8
    unsigned char data;
    unsigned char i;

    // Clear the temporary input variable.
    data = 0x00;
    157c:	c0 e0       	ldi	r28, 0x00	; 0
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
    {
        // Shift temporary input variable right.
        data >>= 1;
    157e:	c6 95       	lsr	r28
        // Set the msb if a '1' value is read from the bus.
        // Leave as it is ('0') else.
        if (OWI_ReadBit(pin))
    1580:	81 2f       	mov	r24, r17
    1582:	5b d0       	rcall	.+182    	; 0x163a <OWI_ReadBit>
    1584:	81 11       	cpse	r24, r1
        {
            // Set msb
            data |= 0x80;
    1586:	c0 68       	ori	r28, 0x80	; 128
    1588:	d1 50       	subi	r29, 0x01	; 1

    // Clear the temporary input variable.
    data = 0x00;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
    158a:	c9 f7       	brne	.-14     	; 0x157e <OWI_ReceiveByte+0xc>
            // Set msb
            data |= 0x80;
        }
    }
    return data;
}
    158c:	8c 2f       	mov	r24, r28
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	08 95       	ret

00001596 <OWI_SkipRom>:
 *  \param  pins    A bitmask of the buses to send the SKIP ROM command to.
 */
void OWI_SkipRom(unsigned char pins)
{
    // Send the SKIP ROM command on the bus.
    OWI_SendByte(OWI_ROM_SKIP, pins);
    1596:	68 2f       	mov	r22, r24
    1598:	8c ec       	ldi	r24, 0xCC	; 204
    159a:	d7 cf       	rjmp	.-82     	; 0x154a <OWI_SendByte>

0000159c <OWI_ReadRom>:
 *  \param  romValue    A pointer where the id will be placed.
 *
 *  \param  pin     A bitmask of the bus to read from.
 */
void OWI_ReadRom(unsigned char * romValue, unsigned char pin)
{
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	ec 01       	movw	r28, r24
    15a8:	f6 2e       	mov	r15, r22
    unsigned char bytesLeft = 8;

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
    15aa:	83 e3       	ldi	r24, 0x33	; 51
    15ac:	ce df       	rcall	.-100    	; 0x154a <OWI_SendByte>
 *
 *  \param  romValue    A pointer where the id will be placed.
 *
 *  \param  pin     A bitmask of the bus to read from.
 */
void OWI_ReadRom(unsigned char * romValue, unsigned char pin)
    15ae:	8e 01       	movw	r16, r28
    15b0:	08 5f       	subi	r16, 0xF8	; 248
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    
    // Do 8 times.
    while (bytesLeft > 0)
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
    15b4:	8f 2d       	mov	r24, r15
    15b6:	dd df       	rcall	.-70     	; 0x1572 <OWI_ReceiveByte>
    15b8:	89 93       	st	Y+, r24

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
    
    // Do 8 times.
    while (bytesLeft > 0)
    15ba:	c0 17       	cp	r28, r16
    15bc:	d1 07       	cpc	r29, r17
    15be:	d1 f7       	brne	.-12     	; 0x15b4 <OWI_ReadRom+0x18>
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
        bytesLeft--;
    }
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	08 95       	ret

000015cc <OWI_WriteBit1>:
#include "OWIBitFunctions.h"


static inline uint8_t __save_interrupt(void) 
{ 
  return SREG; 
    15cc:	2f b7       	in	r18, 0x3f	; 63
{
    unsigned char intState;
    
    // Disable interrupts.
    intState = __save_interrupt();
    __disable_interrupt();
    15ce:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
    15d0:	90 b3       	in	r25, 0x10	; 16
    15d2:	98 2b       	or	r25, r24
    15d4:	90 bb       	out	0x10, r25	; 16
    15d6:	31 b3       	in	r19, 0x11	; 17
    15d8:	98 2f       	mov	r25, r24
    15da:	90 95       	com	r25
    15dc:	39 23       	and	r19, r25
    15de:	31 bb       	out	0x11, r19	; 17
    15e0:	30 e2       	ldi	r19, 0x20	; 32
    15e2:	3a 95       	dec	r19
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <OWI_WriteBit1+0x16>
    _delay_us(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
    15e6:	30 b3       	in	r19, 0x10	; 16
    15e8:	93 23       	and	r25, r19
    15ea:	90 bb       	out	0x10, r25	; 16
    15ec:	91 b3       	in	r25, 0x11	; 17
    15ee:	89 2b       	or	r24, r25
    15f0:	81 bb       	out	0x11, r24	; 17
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <OWI_WriteBit1+0x2a>
    15fa:	00 c0       	rjmp	.+0      	; 0x15fc <OWI_WriteBit1+0x30>
    15fc:	00 00       	nop
  return SREG; 
} 

static inline void __restore_interrupt(uint8_t state) 
{ 
  SREG = state; 
    15fe:	2f bf       	out	0x3f, r18	; 63
    1600:	08 95       	ret

00001602 <OWI_WriteBit0>:
#include "OWIBitFunctions.h"


static inline uint8_t __save_interrupt(void) 
{ 
  return SREG; 
    1602:	2f b7       	in	r18, 0x3f	; 63
{
    unsigned char intState;
    
    // Disable interrupts.
    intState = __save_interrupt();
    __disable_interrupt();
    1604:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
    1606:	90 b3       	in	r25, 0x10	; 16
    1608:	98 2b       	or	r25, r24
    160a:	90 bb       	out	0x10, r25	; 16
    160c:	31 b3       	in	r19, 0x11	; 17
    160e:	98 2f       	mov	r25, r24
    1610:	90 95       	com	r25
    1612:	39 23       	and	r19, r25
    1614:	31 bb       	out	0x11, r19	; 17
    1616:	ef ee       	ldi	r30, 0xEF	; 239
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <OWI_WriteBit0+0x18>
    161e:	00 c0       	rjmp	.+0      	; 0x1620 <OWI_WriteBit0+0x1e>
    1620:	00 00       	nop
    _delay_us(OWI_DELAY_C_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
    1622:	30 b3       	in	r19, 0x10	; 16
    1624:	93 23       	and	r25, r19
    1626:	90 bb       	out	0x10, r25	; 16
    1628:	91 b3       	in	r25, 0x11	; 17
    162a:	89 2b       	or	r24, r25
    162c:	81 bb       	out	0x11, r24	; 17
    162e:	f5 e3       	ldi	r31, 0x35	; 53
    1630:	fa 95       	dec	r31
    1632:	f1 f7       	brne	.-4      	; 0x1630 <OWI_WriteBit0+0x2e>
    1634:	00 00       	nop
  return SREG; 
} 

static inline void __restore_interrupt(uint8_t state) 
{ 
  SREG = state; 
    1636:	2f bf       	out	0x3f, r18	; 63
    1638:	08 95       	ret

0000163a <OWI_ReadBit>:
#include "OWIBitFunctions.h"


static inline uint8_t __save_interrupt(void) 
{ 
  return SREG; 
    163a:	2f b7       	in	r18, 0x3f	; 63
    unsigned char intState;
    unsigned char bitsRead;
    
    // Disable interrupts.
    intState = __save_interrupt();
    __disable_interrupt();
    163c:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
    163e:	90 b3       	in	r25, 0x10	; 16
    1640:	98 2b       	or	r25, r24
    1642:	90 bb       	out	0x10, r25	; 16
    1644:	31 b3       	in	r19, 0x11	; 17
    1646:	98 2f       	mov	r25, r24
    1648:	90 95       	com	r25
    164a:	39 23       	and	r19, r25
    164c:	31 bb       	out	0x11, r19	; 17
    164e:	30 e2       	ldi	r19, 0x20	; 32
    1650:	3a 95       	dec	r19
    1652:	f1 f7       	brne	.-4      	; 0x1650 <OWI_ReadBit+0x16>
    _delay_us(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
    1654:	30 b3       	in	r19, 0x10	; 16
    1656:	93 23       	and	r25, r19
    1658:	90 bb       	out	0x10, r25	; 16
    165a:	91 b3       	in	r25, 0x11	; 17
    165c:	98 2b       	or	r25, r24
    165e:	91 bb       	out	0x11, r25	; 17
    1660:	90 e3       	ldi	r25, 0x30	; 48
    1662:	9a 95       	dec	r25
    1664:	f1 f7       	brne	.-4      	; 0x1662 <OWI_ReadBit+0x28>
    _delay_us(OWI_DELAY_E_STD_MODE);
    
    // Sample bus and delay.
    bitsRead = OWI_PIN & pins;
    1666:	9f b1       	in	r25, 0x0f	; 15
    1668:	eb ed       	ldi	r30, 0xDB	; 219
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	31 97       	sbiw	r30, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <OWI_ReadBit+0x32>
    1670:	00 c0       	rjmp	.+0      	; 0x1672 <OWI_ReadBit+0x38>
    1672:	00 00       	nop
  return SREG; 
} 

static inline void __restore_interrupt(uint8_t state) 
{ 
  SREG = state; 
    1674:	2f bf       	out	0x3f, r18	; 63
    
    // Restore interrupts.
    __restore_interrupt(intState);
    
    return bitsRead;
}
    1676:	89 23       	and	r24, r25
    1678:	08 95       	ret

0000167a <OWI_DetectPresence>:
#include "OWIBitFunctions.h"


static inline uint8_t __save_interrupt(void) 
{ 
  return SREG; 
    167a:	2f b7       	in	r18, 0x3f	; 63
    unsigned char intState;
    unsigned char presenceDetected;
    
    // Disable interrupts.
    intState = __save_interrupt();
    __disable_interrupt();
    167c:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
    167e:	90 b3       	in	r25, 0x10	; 16
    1680:	98 2b       	or	r25, r24
    1682:	90 bb       	out	0x10, r25	; 16
    1684:	31 b3       	in	r19, 0x11	; 17
    1686:	98 2f       	mov	r25, r24
    1688:	90 95       	com	r25
    168a:	39 23       	and	r19, r25
    168c:	31 bb       	out	0x11, r19	; 17
    168e:	ef e7       	ldi	r30, 0x7F	; 127
    1690:	f7 e0       	ldi	r31, 0x07	; 7
    1692:	31 97       	sbiw	r30, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <OWI_DetectPresence+0x18>
    1696:	00 c0       	rjmp	.+0      	; 0x1698 <OWI_DetectPresence+0x1e>
    1698:	00 00       	nop
    _delay_us(OWI_DELAY_H_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
    169a:	30 b3       	in	r19, 0x10	; 16
    169c:	93 23       	and	r25, r19
    169e:	90 bb       	out	0x10, r25	; 16
    16a0:	91 b3       	in	r25, 0x11	; 17
    16a2:	98 2b       	or	r25, r24
    16a4:	91 bb       	out	0x11, r25	; 17
    16a6:	e7 e1       	ldi	r30, 0x17	; 23
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	31 97       	sbiw	r30, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <OWI_DetectPresence+0x30>
    16ae:	00 c0       	rjmp	.+0      	; 0x16b0 <OWI_DetectPresence+0x36>
    16b0:	00 00       	nop
    _delay_us(OWI_DELAY_I_STD_MODE);
    
    // Sample bus to detect presence signal and delay.
    presenceDetected = ((~OWI_PIN) & pins);
    16b2:	9f b1       	in	r25, 0x0f	; 15
    16b4:	e7 e6       	ldi	r30, 0x67	; 103
    16b6:	f6 e0       	ldi	r31, 0x06	; 6
    16b8:	31 97       	sbiw	r30, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <OWI_DetectPresence+0x3e>
    16bc:	00 c0       	rjmp	.+0      	; 0x16be <OWI_DetectPresence+0x44>
    16be:	00 00       	nop
  return SREG; 
} 

static inline void __restore_interrupt(uint8_t state) 
{ 
  SREG = state; 
    16c0:	2f bf       	out	0x3f, r18	; 63
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
    _delay_us(OWI_DELAY_I_STD_MODE);
    
    // Sample bus to detect presence signal and delay.
    presenceDetected = ((~OWI_PIN) & pins);
    16c2:	90 95       	com	r25
    
    // Restore interrupts.
    __restore_interrupt(intState);
    
    return presenceDetected;
}
    16c4:	89 23       	and	r24, r25
    16c6:	08 95       	ret

000016c8 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	ec 01       	movw	r28, r24
    16ce:	40 96       	adiw	r24, 0x10	; 16
    16d0:	e8 2f       	mov	r30, r24
    16d2:	f9 2f       	mov	r31, r25
    16d4:	8b e0       	ldi	r24, 0x0B	; 11
    16d6:	df 01       	movw	r26, r30
    16d8:	1d 92       	st	X+, r1
    16da:	8a 95       	dec	r24
    16dc:	e9 f7       	brne	.-6      	; 0x16d8 <CDC_Device_ConfigureEndpoints+0x10>
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	8c 83       	std	Y+4, r24	; 0x04
    16e2:	89 87       	std	Y+9, r24	; 0x09
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	8e 87       	std	Y+14, r24	; 0x0e
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	ce 01       	movw	r24, r28
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	c1 d3       	rcall	.+1922   	; 0x1e72 <Endpoint_ConfigureEndpointTable>
    16f0:	88 23       	and	r24, r24
    16f2:	59 f0       	breq	.+22     	; 0x170a <CDC_Device_ConfigureEndpoints+0x42>
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	ce 01       	movw	r24, r28
    16f8:	06 96       	adiw	r24, 0x06	; 6
    16fa:	bb d3       	rcall	.+1910   	; 0x1e72 <Endpoint_ConfigureEndpointTable>
    16fc:	88 23       	and	r24, r24
    16fe:	39 f0       	breq	.+14     	; 0x170e <CDC_Device_ConfigureEndpoints+0x46>
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	ce 01       	movw	r24, r28
    1704:	0b 96       	adiw	r24, 0x0b	; 11
    1706:	b5 d3       	rcall	.+1898   	; 0x1e72 <Endpoint_ConfigureEndpointTable>
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <CDC_Device_ConfigureEndpoints+0x48>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <CDC_Device_ConfigureEndpoints+0x48>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <CDC_Device_SendData>:
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	fb 01       	movw	r30, r22
    171c:	ba 01       	movw	r22, r20
    171e:	20 91 35 04 	lds	r18, 0x0435
    1722:	24 30       	cpi	r18, 0x04	; 4
    1724:	a9 f4       	brne	.+42     	; 0x1750 <CDC_Device_SendData+0x3a>
    1726:	dc 01       	movw	r26, r24
    1728:	54 96       	adiw	r26, 0x14	; 20
    172a:	0d 91       	ld	r16, X+
    172c:	1d 91       	ld	r17, X+
    172e:	2d 91       	ld	r18, X+
    1730:	3c 91       	ld	r19, X
    1732:	57 97       	sbiw	r26, 0x17	; 23
    1734:	01 2b       	or	r16, r17
    1736:	02 2b       	or	r16, r18
    1738:	03 2b       	or	r16, r19
    173a:	61 f0       	breq	.+24     	; 0x1754 <CDC_Device_SendData+0x3e>
    173c:	11 96       	adiw	r26, 0x01	; 1
    173e:	8c 91       	ld	r24, X
    1740:	8f 70       	andi	r24, 0x0F	; 15
    1742:	80 93 e9 00 	sts	0x00E9, r24
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	cf 01       	movw	r24, r30
    174c:	be d1       	rcall	.+892    	; 0x1aca <Endpoint_Write_Stream_LE>
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <CDC_Device_SendData+0x40>
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <CDC_Device_SendData+0x40>
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	08 95       	ret

0000175c <CDC_Device_SendByte>:
    175c:	cf 93       	push	r28
    175e:	c6 2f       	mov	r28, r22
    1760:	20 91 35 04 	lds	r18, 0x0435
    1764:	24 30       	cpi	r18, 0x04	; 4
    1766:	e9 f4       	brne	.+58     	; 0x17a2 <CDC_Device_SendByte+0x46>
    1768:	fc 01       	movw	r30, r24
    176a:	44 89       	ldd	r20, Z+20	; 0x14
    176c:	55 89       	ldd	r21, Z+21	; 0x15
    176e:	66 89       	ldd	r22, Z+22	; 0x16
    1770:	77 89       	ldd	r23, Z+23	; 0x17
    1772:	45 2b       	or	r20, r21
    1774:	46 2b       	or	r20, r22
    1776:	47 2b       	or	r20, r23
    1778:	b1 f0       	breq	.+44     	; 0x17a6 <CDC_Device_SendByte+0x4a>
    177a:	81 81       	ldd	r24, Z+1	; 0x01
    177c:	8f 70       	andi	r24, 0x0F	; 15
    177e:	80 93 e9 00 	sts	0x00E9, r24
    1782:	80 91 e8 00 	lds	r24, 0x00E8
    1786:	85 fd       	sbrc	r24, 5
    1788:	08 c0       	rjmp	.+16     	; 0x179a <CDC_Device_SendByte+0x3e>
    178a:	e8 ee       	ldi	r30, 0xE8	; 232
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8e 77       	andi	r24, 0x7E	; 126
    1792:	80 83       	st	Z, r24
    1794:	fa d3       	rcall	.+2036   	; 0x1f8a <Endpoint_WaitUntilReady>
    1796:	81 11       	cpse	r24, r1
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <CDC_Device_SendByte+0x4c>
    179a:	c0 93 f1 00 	sts	0x00F1, r28
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	03 c0       	rjmp	.+6      	; 0x17a8 <CDC_Device_SendByte+0x4c>
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <CDC_Device_SendByte+0x4c>
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret

000017ac <CDC_Device_putchar>:
    17ac:	fb 01       	movw	r30, r22
    17ae:	68 2f       	mov	r22, r24
    17b0:	84 85       	ldd	r24, Z+12	; 0x0c
    17b2:	95 85       	ldd	r25, Z+13	; 0x0d
    17b4:	d3 df       	rcall	.-90     	; 0x175c <CDC_Device_SendByte>
    17b6:	88 23       	and	r24, r24
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <CDC_Device_putchar+0x14>
    17ba:	2f ef       	ldi	r18, 0xFF	; 255
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <CDC_Device_putchar+0x18>
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	82 2f       	mov	r24, r18
    17c6:	93 2f       	mov	r25, r19
    17c8:	08 95       	ret

000017ca <CDC_Device_Flush>:
    17ca:	20 91 35 04 	lds	r18, 0x0435
    17ce:	24 30       	cpi	r18, 0x04	; 4
    17d0:	39 f5       	brne	.+78     	; 0x1820 <CDC_Device_Flush+0x56>
    17d2:	fc 01       	movw	r30, r24
    17d4:	44 89       	ldd	r20, Z+20	; 0x14
    17d6:	55 89       	ldd	r21, Z+21	; 0x15
    17d8:	66 89       	ldd	r22, Z+22	; 0x16
    17da:	77 89       	ldd	r23, Z+23	; 0x17
    17dc:	45 2b       	or	r20, r21
    17de:	46 2b       	or	r20, r22
    17e0:	47 2b       	or	r20, r23
    17e2:	01 f1       	breq	.+64     	; 0x1824 <CDC_Device_Flush+0x5a>
    17e4:	81 81       	ldd	r24, Z+1	; 0x01
    17e6:	8f 70       	andi	r24, 0x0F	; 15
    17e8:	80 93 e9 00 	sts	0x00E9, r24
    17ec:	30 91 f3 00 	lds	r19, 0x00F3
    17f0:	20 91 f2 00 	lds	r18, 0x00F2
    17f4:	93 2f       	mov	r25, r19
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	82 2b       	or	r24, r18
    17fa:	89 2b       	or	r24, r25
    17fc:	a9 f0       	breq	.+42     	; 0x1828 <CDC_Device_Flush+0x5e>
    17fe:	e8 ee       	ldi	r30, 0xE8	; 232
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	90 81       	ld	r25, Z
    1806:	9e 77       	andi	r25, 0x7E	; 126
    1808:	90 83       	st	Z, r25
    180a:	85 fd       	sbrc	r24, 5
    180c:	0f c0       	rjmp	.+30     	; 0x182c <CDC_Device_Flush+0x62>
    180e:	bd d3       	rcall	.+1914   	; 0x1f8a <Endpoint_WaitUntilReady>
    1810:	81 11       	cpse	r24, r1
    1812:	0d c0       	rjmp	.+26     	; 0x182e <CDC_Device_Flush+0x64>
    1814:	e8 ee       	ldi	r30, 0xE8	; 232
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	90 81       	ld	r25, Z
    181a:	9e 77       	andi	r25, 0x7E	; 126
    181c:	90 83       	st	Z, r25
    181e:	08 95       	ret
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	08 95       	ret
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	08 95       	ret
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	08 95       	ret
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	08 95       	ret

00001830 <CDC_Device_USBTask>:
    1830:	20 91 35 04 	lds	r18, 0x0435
    1834:	24 30       	cpi	r18, 0x04	; 4
    1836:	89 f4       	brne	.+34     	; 0x185a <CDC_Device_USBTask+0x2a>
    1838:	fc 01       	movw	r30, r24
    183a:	44 89       	ldd	r20, Z+20	; 0x14
    183c:	55 89       	ldd	r21, Z+21	; 0x15
    183e:	66 89       	ldd	r22, Z+22	; 0x16
    1840:	77 89       	ldd	r23, Z+23	; 0x17
    1842:	45 2b       	or	r20, r21
    1844:	46 2b       	or	r20, r22
    1846:	47 2b       	or	r20, r23
    1848:	41 f0       	breq	.+16     	; 0x185a <CDC_Device_USBTask+0x2a>
    184a:	21 81       	ldd	r18, Z+1	; 0x01
    184c:	2f 70       	andi	r18, 0x0F	; 15
    184e:	20 93 e9 00 	sts	0x00E9, r18
    1852:	20 91 e8 00 	lds	r18, 0x00E8
    1856:	20 fd       	sbrc	r18, 0
    1858:	b8 cf       	rjmp	.-144    	; 0x17ca <CDC_Device_Flush>
    185a:	08 95       	ret

0000185c <CDC_Device_BytesReceived>:
    185c:	20 91 35 04 	lds	r18, 0x0435
    1860:	24 30       	cpi	r18, 0x04	; 4
    1862:	51 f5       	brne	.+84     	; 0x18b8 <CDC_Device_BytesReceived+0x5c>
    1864:	fc 01       	movw	r30, r24
    1866:	44 89       	ldd	r20, Z+20	; 0x14
    1868:	55 89       	ldd	r21, Z+21	; 0x15
    186a:	66 89       	ldd	r22, Z+22	; 0x16
    186c:	77 89       	ldd	r23, Z+23	; 0x17
    186e:	45 2b       	or	r20, r21
    1870:	46 2b       	or	r20, r22
    1872:	47 2b       	or	r20, r23
    1874:	21 f1       	breq	.+72     	; 0x18be <CDC_Device_BytesReceived+0x62>
    1876:	86 81       	ldd	r24, Z+6	; 0x06
    1878:	8f 70       	andi	r24, 0x0F	; 15
    187a:	80 93 e9 00 	sts	0x00E9, r24
    187e:	80 91 e8 00 	lds	r24, 0x00E8
    1882:	82 ff       	sbrs	r24, 2
    1884:	1f c0       	rjmp	.+62     	; 0x18c4 <CDC_Device_BytesReceived+0x68>
    1886:	30 91 f3 00 	lds	r19, 0x00F3
    188a:	20 91 f2 00 	lds	r18, 0x00F2
    188e:	93 2f       	mov	r25, r19
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	82 2b       	or	r24, r18
    1894:	89 2b       	or	r24, r25
    1896:	41 f4       	brne	.+16     	; 0x18a8 <CDC_Device_BytesReceived+0x4c>
    1898:	e8 ee       	ldi	r30, 0xE8	; 232
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8b 77       	andi	r24, 0x7B	; 123
    18a0:	80 83       	st	Z, r24
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	10 c0       	rjmp	.+32     	; 0x18c8 <CDC_Device_BytesReceived+0x6c>
    18a8:	90 91 f3 00 	lds	r25, 0x00F3
    18ac:	80 91 f2 00 	lds	r24, 0x00F2
    18b0:	39 2f       	mov	r19, r25
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	28 2b       	or	r18, r24
    18b6:	08 c0       	rjmp	.+16     	; 0x18c8 <CDC_Device_BytesReceived+0x6c>
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <CDC_Device_BytesReceived+0x6c>
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <CDC_Device_BytesReceived+0x6c>
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	82 2f       	mov	r24, r18
    18ca:	93 2f       	mov	r25, r19
    18cc:	08 95       	ret

000018ce <CDC_Device_ReceiveByte>:
    18ce:	20 91 35 04 	lds	r18, 0x0435
    18d2:	24 30       	cpi	r18, 0x04	; 4
    18d4:	79 f5       	brne	.+94     	; 0x1934 <CDC_Device_ReceiveByte+0x66>
    18d6:	fc 01       	movw	r30, r24
    18d8:	44 89       	ldd	r20, Z+20	; 0x14
    18da:	55 89       	ldd	r21, Z+21	; 0x15
    18dc:	66 89       	ldd	r22, Z+22	; 0x16
    18de:	77 89       	ldd	r23, Z+23	; 0x17
    18e0:	45 2b       	or	r20, r21
    18e2:	46 2b       	or	r20, r22
    18e4:	47 2b       	or	r20, r23
    18e6:	49 f1       	breq	.+82     	; 0x193a <CDC_Device_ReceiveByte+0x6c>
    18e8:	86 81       	ldd	r24, Z+6	; 0x06
    18ea:	8f 70       	andi	r24, 0x0F	; 15
    18ec:	80 93 e9 00 	sts	0x00E9, r24
    18f0:	80 91 e8 00 	lds	r24, 0x00E8
    18f4:	82 ff       	sbrs	r24, 2
    18f6:	24 c0       	rjmp	.+72     	; 0x1940 <CDC_Device_ReceiveByte+0x72>
    18f8:	30 91 f3 00 	lds	r19, 0x00F3
    18fc:	20 91 f2 00 	lds	r18, 0x00F2
    1900:	93 2f       	mov	r25, r19
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	82 2b       	or	r24, r18
    1906:	89 2b       	or	r24, r25
    1908:	21 f0       	breq	.+8      	; 0x1912 <CDC_Device_ReceiveByte+0x44>
    190a:	20 91 f1 00 	lds	r18, 0x00F1
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <CDC_Device_ReceiveByte+0x48>
    1912:	2f ef       	ldi	r18, 0xFF	; 255
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	50 91 f3 00 	lds	r21, 0x00F3
    191a:	40 91 f2 00 	lds	r20, 0x00F2
    191e:	95 2f       	mov	r25, r21
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	84 2b       	or	r24, r20
    1924:	89 2b       	or	r24, r25
    1926:	71 f4       	brne	.+28     	; 0x1944 <CDC_Device_ReceiveByte+0x76>
    1928:	e8 ee       	ldi	r30, 0xE8	; 232
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8b 77       	andi	r24, 0x7B	; 123
    1930:	80 83       	st	Z, r24
    1932:	08 c0       	rjmp	.+16     	; 0x1944 <CDC_Device_ReceiveByte+0x76>
    1934:	2f ef       	ldi	r18, 0xFF	; 255
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <CDC_Device_ReceiveByte+0x76>
    193a:	2f ef       	ldi	r18, 0xFF	; 255
    193c:	3f ef       	ldi	r19, 0xFF	; 255
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <CDC_Device_ReceiveByte+0x76>
    1940:	2f ef       	ldi	r18, 0xFF	; 255
    1942:	3f ef       	ldi	r19, 0xFF	; 255
    1944:	82 2f       	mov	r24, r18
    1946:	93 2f       	mov	r25, r19
    1948:	08 95       	ret

0000194a <CDC_Device_getchar>:
    194a:	fc 01       	movw	r30, r24
    194c:	84 85       	ldd	r24, Z+12	; 0x0c
    194e:	95 85       	ldd	r25, Z+13	; 0x0d
    1950:	be df       	rcall	.-132    	; 0x18ce <CDC_Device_ReceiveByte>
    1952:	9c 01       	movw	r18, r24
    1954:	99 23       	and	r25, r25
    1956:	14 f4       	brge	.+4      	; 0x195c <CDC_Device_getchar+0x12>
    1958:	2e ef       	ldi	r18, 0xFE	; 254
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	82 2f       	mov	r24, r18
    195e:	93 2f       	mov	r25, r19
    1960:	08 95       	ret

00001962 <CDC_Device_CreateStream>:
    1962:	fb 01       	movw	r30, r22
    1964:	2e e0       	ldi	r18, 0x0E	; 14
    1966:	db 01       	movw	r26, r22
    1968:	1d 92       	st	X+, r1
    196a:	2a 95       	dec	r18
    196c:	e9 f7       	brne	.-6      	; 0x1968 <CDC_Device_CreateStream+0x6>
    196e:	23 e0       	ldi	r18, 0x03	; 3
    1970:	23 83       	std	Z+3, r18	; 0x03
    1972:	26 ed       	ldi	r18, 0xD6	; 214
    1974:	3b e0       	ldi	r19, 0x0B	; 11
    1976:	31 87       	std	Z+9, r19	; 0x09
    1978:	20 87       	std	Z+8, r18	; 0x08
    197a:	25 ea       	ldi	r18, 0xA5	; 165
    197c:	3c e0       	ldi	r19, 0x0C	; 12
    197e:	33 87       	std	Z+11, r19	; 0x0b
    1980:	22 87       	std	Z+10, r18	; 0x0a
    1982:	95 87       	std	Z+13, r25	; 0x0d
    1984:	84 87       	std	Z+12, r24	; 0x0c
    1986:	08 95       	ret

00001988 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1988:	08 95       	ret

0000198a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1990:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1994:	83 ff       	sbrs	r24, 3
    1996:	96 c0       	rjmp	.+300    	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1998:	88 81       	ld	r24, Y
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	20 91 3a 04 	lds	r18, 0x043A
    19a0:	30 91 3b 04 	lds	r19, 0x043B
    19a4:	28 17       	cp	r18, r24
    19a6:	39 07       	cpc	r19, r25
    19a8:	09 f0       	breq	.+2      	; 0x19ac <CDC_Device_ProcessControlRequest+0x22>
    19aa:	8c c0       	rjmp	.+280    	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
	  return;

	switch (USB_ControlRequest.bRequest)
    19ac:	80 91 37 04 	lds	r24, 0x0437
    19b0:	81 32       	cpi	r24, 0x21	; 33
    19b2:	61 f0       	breq	.+24     	; 0x19cc <CDC_Device_ProcessControlRequest+0x42>
    19b4:	20 f4       	brcc	.+8      	; 0x19be <CDC_Device_ProcessControlRequest+0x34>
    19b6:	80 32       	cpi	r24, 0x20	; 32
    19b8:	09 f0       	breq	.+2      	; 0x19bc <CDC_Device_ProcessControlRequest+0x32>
    19ba:	84 c0       	rjmp	.+264    	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
    19bc:	36 c0       	rjmp	.+108    	; 0x1a2a <CDC_Device_ProcessControlRequest+0xa0>
    19be:	82 32       	cpi	r24, 0x22	; 34
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <CDC_Device_ProcessControlRequest+0x3a>
    19c2:	5f c0       	rjmp	.+190    	; 0x1a82 <CDC_Device_ProcessControlRequest+0xf8>
    19c4:	83 32       	cpi	r24, 0x23	; 35
    19c6:	09 f0       	breq	.+2      	; 0x19ca <CDC_Device_ProcessControlRequest+0x40>
    19c8:	7d c0       	rjmp	.+250    	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
    19ca:	6e c0       	rjmp	.+220    	; 0x1aa8 <CDC_Device_ProcessControlRequest+0x11e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19cc:	80 91 36 04 	lds	r24, 0x0436
    19d0:	81 3a       	cpi	r24, 0xA1	; 161
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <CDC_Device_ProcessControlRequest+0x4c>
    19d4:	77 c0       	rjmp	.+238    	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19d6:	e8 ee       	ldi	r30, 0xE8	; 232
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	87 7f       	andi	r24, 0xF7	; 247
    19de:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19e0:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    19e2:	80 ff       	sbrs	r24, 0
    19e4:	fd cf       	rjmp	.-6      	; 0x19e0 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    19e6:	4c 89       	ldd	r20, Y+20	; 0x14
    19e8:	5d 89       	ldd	r21, Y+21	; 0x15
    19ea:	6e 89       	ldd	r22, Y+22	; 0x16
    19ec:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    19ee:	e1 ef       	ldi	r30, 0xF1	; 241
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	40 83       	st	Z, r20
				UEDATX = (Data >> 8);
    19f4:	bb 27       	eor	r27, r27
    19f6:	a7 2f       	mov	r26, r23
    19f8:	96 2f       	mov	r25, r22
    19fa:	85 2f       	mov	r24, r21
    19fc:	80 83       	st	Z, r24
				UEDATX = (Data >> 16);
    19fe:	cb 01       	movw	r24, r22
    1a00:	aa 27       	eor	r26, r26
    1a02:	bb 27       	eor	r27, r27
    1a04:	80 83       	st	Z, r24
				UEDATX = (Data >> 24);
    1a06:	47 2f       	mov	r20, r23
    1a08:	55 27       	eor	r21, r21
    1a0a:	66 27       	eor	r22, r22
    1a0c:	77 27       	eor	r23, r23
    1a0e:	40 83       	st	Z, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1a10:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a12:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1a14:	89 8d       	ldd	r24, Y+25	; 0x19
    1a16:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1a18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a1a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a1c:	e8 ee       	ldi	r30, 0xE8	; 232
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8e 77       	andi	r24, 0x7E	; 126
    1a24:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1a26:	8c d2       	rcall	.+1304   	; 0x1f40 <Endpoint_ClearStatusStage>
    1a28:	4d c0       	rjmp	.+154    	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a2a:	80 91 36 04 	lds	r24, 0x0436
    1a2e:	81 32       	cpi	r24, 0x21	; 33
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <CDC_Device_ProcessControlRequest+0xaa>
    1a32:	48 c0       	rjmp	.+144    	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a34:	e8 ee       	ldi	r30, 0xE8	; 232
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	87 7f       	andi	r24, 0xF7	; 247
    1a3c:	80 83       	st	Z, r24
    1a3e:	05 c0       	rjmp	.+10     	; 0x1a4a <CDC_Device_ProcessControlRequest+0xc0>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a40:	80 91 35 04 	lds	r24, 0x0435
    1a44:	88 23       	and	r24, r24
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <CDC_Device_ProcessControlRequest+0xc0>
    1a48:	3d c0       	rjmp	.+122    	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a4a:	80 81       	ld	r24, Z
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1a4c:	82 ff       	sbrs	r24, 2
    1a4e:	f8 cf       	rjmp	.-16     	; 0x1a40 <CDC_Device_ProcessControlRequest+0xb6>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1a50:	e1 ef       	ldi	r30, 0xF1	; 241
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
    1a56:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
    1a58:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
    1a5a:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1a5c:	3c 8b       	std	Y+20, r19	; 0x14
    1a5e:	2d 8b       	std	Y+21, r18	; 0x15
    1a60:	9e 8b       	std	Y+22, r25	; 0x16
    1a62:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a64:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1a66:	88 8f       	std	Y+24, r24	; 0x18
    1a68:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1a6a:	89 8f       	std	Y+25, r24	; 0x19
    1a6c:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1a6e:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a70:	e8 ee       	ldi	r30, 0xE8	; 232
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8b 77       	andi	r24, 0x7B	; 123
    1a78:	80 83       	st	Z, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1a7a:	62 d2       	rcall	.+1220   	; 0x1f40 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	84 df       	rcall	.-248    	; 0x1988 <CDC_Device_Event_Stub>
    1a80:	21 c0       	rjmp	.+66     	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a82:	80 91 36 04 	lds	r24, 0x0436
    1a86:	81 32       	cpi	r24, 0x21	; 33
    1a88:	e9 f4       	brne	.+58     	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a8a:	e8 ee       	ldi	r30, 0xE8	; 232
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	87 7f       	andi	r24, 0xF7	; 247
    1a92:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a94:	55 d2       	rcall	.+1194   	; 0x1f40 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1a96:	80 91 38 04 	lds	r24, 0x0438
    1a9a:	90 91 39 04 	lds	r25, 0x0439
    1a9e:	99 8b       	std	Y+17, r25	; 0x11
    1aa0:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	71 df       	rcall	.-286    	; 0x1988 <CDC_Device_Event_Stub>
    1aa6:	0e c0       	rjmp	.+28     	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1aa8:	80 91 36 04 	lds	r24, 0x0436
    1aac:	81 32       	cpi	r24, 0x21	; 33
    1aae:	51 f4       	brne	.+20     	; 0x1ac4 <CDC_Device_ProcessControlRequest+0x13a>
    1ab0:	e8 ee       	ldi	r30, 0xE8	; 232
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	87 7f       	andi	r24, 0xF7	; 247
    1ab8:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1aba:	42 d2       	rcall	.+1156   	; 0x1f40 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1abc:	60 91 38 04 	lds	r22, 0x0438
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	62 df       	rcall	.-316    	; 0x1988 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	08 95       	ret

00001aca <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1aca:	7f 92       	push	r7
    1acc:	8f 92       	push	r8
    1ace:	9f 92       	push	r9
    1ad0:	af 92       	push	r10
    1ad2:	bf 92       	push	r11
    1ad4:	cf 92       	push	r12
    1ad6:	df 92       	push	r13
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	7c 01       	movw	r14, r24
    1ae6:	eb 01       	movw	r28, r22
    1ae8:	6a 01       	movw	r12, r20
    1aea:	4f d2       	rcall	.+1182   	; 0x1f8a <Endpoint_WaitUntilReady>
    1aec:	78 2e       	mov	r7, r24
    1aee:	81 11       	cpse	r24, r1
    1af0:	3e c0       	rjmp	.+124    	; 0x1b6e <Endpoint_Write_Stream_LE+0xa4>
    1af2:	c1 14       	cp	r12, r1
    1af4:	d1 04       	cpc	r13, r1
    1af6:	39 f0       	breq	.+14     	; 0x1b06 <Endpoint_Write_Stream_LE+0x3c>
    1af8:	f6 01       	movw	r30, r12
    1afa:	20 81       	ld	r18, Z
    1afc:	31 81       	ldd	r19, Z+1	; 0x01
    1afe:	c2 1b       	sub	r28, r18
    1b00:	d3 0b       	sbc	r29, r19
    1b02:	e2 0e       	add	r14, r18
    1b04:	f3 1e       	adc	r15, r19
    1b06:	20 97       	sbiw	r28, 0x00	; 0
    1b08:	91 f1       	breq	.+100    	; 0x1b6e <Endpoint_Write_Stream_LE+0xa4>
    1b0a:	00 e0       	ldi	r16, 0x00	; 0
    1b0c:	10 e0       	ldi	r17, 0x00	; 0
    1b0e:	0f 2e       	mov	r0, r31
    1b10:	f8 ee       	ldi	r31, 0xE8	; 232
    1b12:	8f 2e       	mov	r8, r31
    1b14:	91 2c       	mov	r9, r1
    1b16:	f0 2d       	mov	r31, r0
    1b18:	0f 2e       	mov	r0, r31
    1b1a:	f1 ef       	ldi	r31, 0xF1	; 241
    1b1c:	af 2e       	mov	r10, r31
    1b1e:	b1 2c       	mov	r11, r1
    1b20:	f0 2d       	mov	r31, r0
    1b22:	f4 01       	movw	r30, r8
    1b24:	90 81       	ld	r25, Z
    1b26:	95 fd       	sbrc	r25, 5
    1b28:	16 c0       	rjmp	.+44     	; 0x1b56 <Endpoint_Write_Stream_LE+0x8c>
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8e 77       	andi	r24, 0x7E	; 126
    1b2e:	80 83       	st	Z, r24
    1b30:	c1 14       	cp	r12, r1
    1b32:	d1 04       	cpc	r13, r1
    1b34:	61 f0       	breq	.+24     	; 0x1b4e <Endpoint_Write_Stream_LE+0x84>
    1b36:	f6 01       	movw	r30, r12
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	08 0f       	add	r16, r24
    1b3e:	19 1f       	adc	r17, r25
    1b40:	11 83       	std	Z+1, r17	; 0x01
    1b42:	00 83       	st	Z, r16
    1b44:	0f 2e       	mov	r0, r31
    1b46:	f5 e0       	ldi	r31, 0x05	; 5
    1b48:	7f 2e       	mov	r7, r31
    1b4a:	f0 2d       	mov	r31, r0
    1b4c:	10 c0       	rjmp	.+32     	; 0x1b6e <Endpoint_Write_Stream_LE+0xa4>
    1b4e:	1d d2       	rcall	.+1082   	; 0x1f8a <Endpoint_WaitUntilReady>
    1b50:	88 23       	and	r24, r24
    1b52:	49 f0       	breq	.+18     	; 0x1b66 <Endpoint_Write_Stream_LE+0x9c>
    1b54:	0b c0       	rjmp	.+22     	; 0x1b6c <Endpoint_Write_Stream_LE+0xa2>
    1b56:	f7 01       	movw	r30, r14
    1b58:	81 91       	ld	r24, Z+
    1b5a:	7f 01       	movw	r14, r30
    1b5c:	f5 01       	movw	r30, r10
    1b5e:	80 83       	st	Z, r24
    1b60:	21 97       	sbiw	r28, 0x01	; 1
    1b62:	0f 5f       	subi	r16, 0xFF	; 255
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	20 97       	sbiw	r28, 0x00	; 0
    1b68:	e1 f6       	brne	.-72     	; 0x1b22 <Endpoint_Write_Stream_LE+0x58>
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <Endpoint_Write_Stream_LE+0xa4>
    1b6c:	78 2e       	mov	r7, r24
    1b6e:	87 2d       	mov	r24, r7
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	df 90       	pop	r13
    1b7e:	cf 90       	pop	r12
    1b80:	bf 90       	pop	r11
    1b82:	af 90       	pop	r10
    1b84:	9f 90       	pop	r9
    1b86:	8f 90       	pop	r8
    1b88:	7f 90       	pop	r7
    1b8a:	08 95       	ret

00001b8c <Endpoint_Write_Control_Stream_LE>:
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	20 91 3c 04 	lds	r18, 0x043C
    1ba0:	30 91 3d 04 	lds	r19, 0x043D
    1ba4:	26 17       	cp	r18, r22
    1ba6:	37 07       	cpc	r19, r23
    1ba8:	58 f0       	brcs	.+22     	; 0x1bc0 <Endpoint_Write_Control_Stream_LE+0x34>
    1baa:	61 15       	cp	r22, r1
    1bac:	71 05       	cpc	r23, r1
    1bae:	39 f4       	brne	.+14     	; 0x1bbe <Endpoint_Write_Control_Stream_LE+0x32>
    1bb0:	e8 ee       	ldi	r30, 0xE8	; 232
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	20 81       	ld	r18, Z
    1bb6:	2e 77       	andi	r18, 0x7E	; 126
    1bb8:	20 83       	st	Z, r18
    1bba:	9b 01       	movw	r18, r22
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <Endpoint_Write_Control_Stream_LE+0x34>
    1bbe:	9b 01       	movw	r18, r22
    1bc0:	e8 2e       	mov	r14, r24
    1bc2:	f9 2e       	mov	r15, r25
    1bc4:	e0 e0       	ldi	r30, 0x00	; 0
    1bc6:	a8 ee       	ldi	r26, 0xE8	; 232
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	83 ef       	ldi	r24, 0xF3	; 243
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	62 ef       	ldi	r22, 0xF2	; 242
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	dd 24       	eor	r13, r13
    1bd4:	d3 94       	inc	r13
    1bd6:	c1 2c       	mov	r12, r1
    1bd8:	c1 ef       	ldi	r28, 0xF1	; 241
    1bda:	d0 e0       	ldi	r29, 0x00	; 0
    1bdc:	38 c0       	rjmp	.+112    	; 0x1c4e <Endpoint_Write_Control_Stream_LE+0xc2>
    1bde:	40 91 35 04 	lds	r20, 0x0435
    1be2:	44 23       	and	r20, r20
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <Endpoint_Write_Control_Stream_LE+0x5c>
    1be6:	47 c0       	rjmp	.+142    	; 0x1c76 <Endpoint_Write_Control_Stream_LE+0xea>
    1be8:	45 30       	cpi	r20, 0x05	; 5
    1bea:	09 f4       	brne	.+2      	; 0x1bee <Endpoint_Write_Control_Stream_LE+0x62>
    1bec:	46 c0       	rjmp	.+140    	; 0x1c7a <Endpoint_Write_Control_Stream_LE+0xee>
    1bee:	4c 91       	ld	r20, X
    1bf0:	43 fd       	sbrc	r20, 3
    1bf2:	45 c0       	rjmp	.+138    	; 0x1c7e <Endpoint_Write_Control_Stream_LE+0xf2>
    1bf4:	4c 91       	ld	r20, X
    1bf6:	42 fd       	sbrc	r20, 2
    1bf8:	37 c0       	rjmp	.+110    	; 0x1c68 <Endpoint_Write_Control_Stream_LE+0xdc>
    1bfa:	4c 91       	ld	r20, X
    1bfc:	40 ff       	sbrs	r20, 0
    1bfe:	27 c0       	rjmp	.+78     	; 0x1c4e <Endpoint_Write_Control_Stream_LE+0xc2>
    1c00:	fc 01       	movw	r30, r24
    1c02:	50 81       	ld	r21, Z
    1c04:	fb 01       	movw	r30, r22
    1c06:	40 81       	ld	r20, Z
    1c08:	15 2f       	mov	r17, r21
    1c0a:	00 e0       	ldi	r16, 0x00	; 0
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	e4 2b       	or	r30, r20
    1c10:	af 01       	movw	r20, r30
    1c12:	21 15       	cp	r18, r1
    1c14:	31 05       	cpc	r19, r1
    1c16:	99 f0       	breq	.+38     	; 0x1c3e <Endpoint_Write_Control_Stream_LE+0xb2>
    1c18:	48 30       	cpi	r20, 0x08	; 8
    1c1a:	51 05       	cpc	r21, r1
    1c1c:	80 f4       	brcc	.+32     	; 0x1c3e <Endpoint_Write_Control_Stream_LE+0xb2>
    1c1e:	ee 2d       	mov	r30, r14
    1c20:	ff 2d       	mov	r31, r15
    1c22:	f1 90       	ld	r15, Z+
    1c24:	f8 82       	st	Y, r15
    1c26:	ee 2e       	mov	r14, r30
    1c28:	ff 2e       	mov	r15, r31
    1c2a:	21 50       	subi	r18, 0x01	; 1
    1c2c:	31 09       	sbc	r19, r1
    1c2e:	4f 5f       	subi	r20, 0xFF	; 255
    1c30:	5f 4f       	sbci	r21, 0xFF	; 255
    1c32:	21 15       	cp	r18, r1
    1c34:	31 05       	cpc	r19, r1
    1c36:	19 f0       	breq	.+6      	; 0x1c3e <Endpoint_Write_Control_Stream_LE+0xb2>
    1c38:	48 30       	cpi	r20, 0x08	; 8
    1c3a:	51 05       	cpc	r21, r1
    1c3c:	91 f7       	brne	.-28     	; 0x1c22 <Endpoint_Write_Control_Stream_LE+0x96>
    1c3e:	ed 2d       	mov	r30, r13
    1c40:	48 30       	cpi	r20, 0x08	; 8
    1c42:	51 05       	cpc	r21, r1
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <Endpoint_Write_Control_Stream_LE+0xbc>
    1c46:	ec 2d       	mov	r30, r12
    1c48:	4c 91       	ld	r20, X
    1c4a:	4e 77       	andi	r20, 0x7E	; 126
    1c4c:	4c 93       	st	X, r20
    1c4e:	21 15       	cp	r18, r1
    1c50:	31 05       	cpc	r19, r1
    1c52:	29 f6       	brne	.-118    	; 0x1bde <Endpoint_Write_Control_Stream_LE+0x52>
    1c54:	e1 11       	cpse	r30, r1
    1c56:	c3 cf       	rjmp	.-122    	; 0x1bde <Endpoint_Write_Control_Stream_LE+0x52>
    1c58:	07 c0       	rjmp	.+14     	; 0x1c68 <Endpoint_Write_Control_Stream_LE+0xdc>
    1c5a:	80 91 35 04 	lds	r24, 0x0435
    1c5e:	88 23       	and	r24, r24
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <Endpoint_Write_Control_Stream_LE+0xf6>
    1c62:	85 30       	cpi	r24, 0x05	; 5
    1c64:	19 f4       	brne	.+6      	; 0x1c6c <Endpoint_Write_Control_Stream_LE+0xe0>
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <Endpoint_Write_Control_Stream_LE+0xfa>
    1c68:	e8 ee       	ldi	r30, 0xE8	; 232
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	82 ff       	sbrs	r24, 2
    1c70:	f4 cf       	rjmp	.-24     	; 0x1c5a <Endpoint_Write_Control_Stream_LE+0xce>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <Endpoint_Write_Control_Stream_LE+0xfc>
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	07 c0       	rjmp	.+14     	; 0x1c88 <Endpoint_Write_Control_Stream_LE+0xfc>
    1c7a:	83 e0       	ldi	r24, 0x03	; 3
    1c7c:	05 c0       	rjmp	.+10     	; 0x1c88 <Endpoint_Write_Control_Stream_LE+0xfc>
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <Endpoint_Write_Control_Stream_LE+0xfc>
    1c82:	82 e0       	ldi	r24, 0x02	; 2
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <Endpoint_Write_Control_Stream_LE+0xfc>
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	df 90       	pop	r13
    1c96:	cf 90       	pop	r12
    1c98:	08 95       	ret

00001c9a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1c9a:	af 92       	push	r10
    1c9c:	bf 92       	push	r11
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1cac:	20 91 3c 04 	lds	r18, 0x043C
    1cb0:	30 91 3d 04 	lds	r19, 0x043D
    1cb4:	26 17       	cp	r18, r22
    1cb6:	37 07       	cpc	r19, r23
    1cb8:	58 f0       	brcs	.+22     	; 0x1cd0 <Endpoint_Write_Control_PStream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1cba:	61 15       	cp	r22, r1
    1cbc:	71 05       	cpc	r23, r1
    1cbe:	39 f4       	brne	.+14     	; 0x1cce <Endpoint_Write_Control_PStream_LE+0x34>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cc0:	e8 ee       	ldi	r30, 0xE8	; 232
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	20 81       	ld	r18, Z
    1cc6:	2e 77       	andi	r18, 0x7E	; 126
    1cc8:	20 83       	st	Z, r18
    1cca:	9b 01       	movw	r18, r22
    1ccc:	01 c0       	rjmp	.+2      	; 0x1cd0 <Endpoint_Write_Control_PStream_LE+0x36>
    1cce:	9b 01       	movw	r18, r22
    1cd0:	e8 2f       	mov	r30, r24
    1cd2:	f9 2f       	mov	r31, r25
    1cd4:	f1 2c       	mov	r15, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cd6:	a8 ee       	ldi	r26, 0xE8	; 232
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1cda:	03 ef       	ldi	r16, 0xF3	; 243
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	62 ef       	ldi	r22, 0xF2	; 242
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1ce2:	ee 24       	eor	r14, r14
    1ce4:	e3 94       	inc	r14
    1ce6:	d1 2c       	mov	r13, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ce8:	0f 2e       	mov	r0, r31
    1cea:	f1 ef       	ldi	r31, 0xF1	; 241
    1cec:	af 2e       	mov	r10, r31
    1cee:	b1 2c       	mov	r11, r1
    1cf0:	f0 2d       	mov	r31, r0
    1cf2:	34 c0       	rjmp	.+104    	; 0x1d5c <Endpoint_Write_Control_PStream_LE+0xc2>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1cf4:	80 91 35 04 	lds	r24, 0x0435

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1cf8:	88 23       	and	r24, r24
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <Endpoint_Write_Control_PStream_LE+0x64>
    1cfc:	43 c0       	rjmp	.+134    	; 0x1d84 <Endpoint_Write_Control_PStream_LE+0xea>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1cfe:	85 30       	cpi	r24, 0x05	; 5
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <Endpoint_Write_Control_PStream_LE+0x6a>
    1d02:	42 c0       	rjmp	.+132    	; 0x1d88 <Endpoint_Write_Control_PStream_LE+0xee>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d04:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d06:	83 fd       	sbrc	r24, 3
    1d08:	41 c0       	rjmp	.+130    	; 0x1d8c <Endpoint_Write_Control_PStream_LE+0xf2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d0a:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1d0c:	82 fd       	sbrc	r24, 2
    1d0e:	33 c0       	rjmp	.+102    	; 0x1d76 <Endpoint_Write_Control_PStream_LE+0xdc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d10:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    1d12:	80 ff       	sbrs	r24, 0
    1d14:	23 c0       	rjmp	.+70     	; 0x1d5c <Endpoint_Write_Control_PStream_LE+0xc2>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1d16:	e8 01       	movw	r28, r16
    1d18:	98 81       	ld	r25, Y
    1d1a:	eb 01       	movw	r28, r22
    1d1c:	88 81       	ld	r24, Y
    1d1e:	59 2f       	mov	r21, r25
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	ea 01       	movw	r28, r20
    1d24:	c8 2b       	or	r28, r24
    1d26:	ce 01       	movw	r24, r28
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d28:	21 15       	cp	r18, r1
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	81 f0       	breq	.+32     	; 0x1d4e <Endpoint_Write_Control_PStream_LE+0xb4>
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	91 05       	cpc	r25, r1
    1d32:	68 f4       	brcc	.+26     	; 0x1d4e <Endpoint_Write_Control_PStream_LE+0xb4>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1d34:	f4 90       	lpm	r15, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d36:	e5 01       	movw	r28, r10
    1d38:	f8 82       	st	Y, r15
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1d3a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1d3c:	21 50       	subi	r18, 0x01	; 1
    1d3e:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    1d40:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d42:	21 15       	cp	r18, r1
    1d44:	31 05       	cpc	r19, r1
    1d46:	19 f0       	breq	.+6      	; 0x1d4e <Endpoint_Write_Control_PStream_LE+0xb4>
    1d48:	88 30       	cpi	r24, 0x08	; 8
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	99 f7       	brne	.-26     	; 0x1d34 <Endpoint_Write_Control_PStream_LE+0x9a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1d4e:	fe 2c       	mov	r15, r14
    1d50:	08 97       	sbiw	r24, 0x08	; 8
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <Endpoint_Write_Control_PStream_LE+0xbc>
    1d54:	fd 2c       	mov	r15, r13
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d56:	8c 91       	ld	r24, X
    1d58:	8e 77       	andi	r24, 0x7E	; 126
    1d5a:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1d5c:	21 15       	cp	r18, r1
    1d5e:	31 05       	cpc	r19, r1
    1d60:	49 f6       	brne	.-110    	; 0x1cf4 <Endpoint_Write_Control_PStream_LE+0x5a>
    1d62:	f1 10       	cpse	r15, r1
    1d64:	c7 cf       	rjmp	.-114    	; 0x1cf4 <Endpoint_Write_Control_PStream_LE+0x5a>
    1d66:	07 c0       	rjmp	.+14     	; 0x1d76 <Endpoint_Write_Control_PStream_LE+0xdc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d68:	80 91 35 04 	lds	r24, 0x0435

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d6c:	88 23       	and	r24, r24
    1d6e:	81 f0       	breq	.+32     	; 0x1d90 <Endpoint_Write_Control_PStream_LE+0xf6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d70:	85 30       	cpi	r24, 0x05	; 5
    1d72:	19 f4       	brne	.+6      	; 0x1d7a <Endpoint_Write_Control_PStream_LE+0xe0>
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <Endpoint_Write_Control_PStream_LE+0xfa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d76:	e8 ee       	ldi	r30, 0xE8	; 232
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1d7c:	82 ff       	sbrs	r24, 2
    1d7e:	f4 cf       	rjmp	.-24     	; 0x1d68 <Endpoint_Write_Control_PStream_LE+0xce>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	09 c0       	rjmp	.+18     	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0xfc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1d84:	82 e0       	ldi	r24, 0x02	; 2
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0xfc>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0xfc>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0xfc>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	01 c0       	rjmp	.+2      	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0xfc>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1d94:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	ff 90       	pop	r15
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	bf 90       	pop	r11
    1da6:	af 90       	pop	r10
    1da8:	08 95       	ret

00001daa <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1daa:	8f 92       	push	r8
    1dac:	9f 92       	push	r9
    1dae:	bf 92       	push	r11
    1db0:	cf 92       	push	r12
    1db2:	df 92       	push	r13
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	87 30       	cpi	r24, 0x07	; 7
    1dc2:	70 f1       	brcs	.+92     	; 0x1e20 <Endpoint_ConfigureEndpoint_Prv+0x76>
    1dc4:	26 c0       	rjmp	.+76     	; 0x1e12 <Endpoint_ConfigureEndpoint_Prv+0x68>
    1dc6:	59 2f       	mov	r21, r25
    1dc8:	5f 70       	andi	r21, 0x0F	; 15
    1dca:	e8 01       	movw	r28, r16
    1dcc:	58 83       	st	Y, r21
    1dce:	89 17       	cp	r24, r25
    1dd0:	31 f0       	breq	.+12     	; 0x1dde <Endpoint_ConfigureEndpoint_Prv+0x34>
    1dd2:	e9 01       	movw	r28, r18
    1dd4:	d8 80       	ld	r13, Y
    1dd6:	50 81       	ld	r21, Z
    1dd8:	e4 01       	movw	r28, r8
    1dda:	78 81       	ld	r23, Y
    1ddc:	03 c0       	rjmp	.+6      	; 0x1de4 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    1dde:	5b 2d       	mov	r21, r11
    1de0:	d6 2e       	mov	r13, r22
    1de2:	7c 2d       	mov	r23, r12
    1de4:	51 ff       	sbrs	r21, 1
    1de6:	12 c0       	rjmp	.+36     	; 0x1e0c <Endpoint_ConfigureEndpoint_Prv+0x62>
    1de8:	4c 91       	ld	r20, X
    1dea:	4e 7f       	andi	r20, 0xFE	; 254
    1dec:	4c 93       	st	X, r20
    1dee:	40 81       	ld	r20, Z
    1df0:	4d 7f       	andi	r20, 0xFD	; 253
    1df2:	40 83       	st	Z, r20
    1df4:	4c 91       	ld	r20, X
    1df6:	41 60       	ori	r20, 0x01	; 1
    1df8:	4c 93       	st	X, r20
    1dfa:	e9 01       	movw	r28, r18
    1dfc:	d8 82       	st	Y, r13
    1dfe:	50 83       	st	Z, r21
    1e00:	e4 01       	movw	r28, r8
    1e02:	78 83       	st	Y, r23
    1e04:	e7 01       	movw	r28, r14
    1e06:	58 81       	ld	r21, Y
    1e08:	55 23       	and	r21, r21
    1e0a:	44 f4       	brge	.+16     	; 0x1e1c <Endpoint_ConfigureEndpoint_Prv+0x72>
    1e0c:	9f 5f       	subi	r25, 0xFF	; 255
    1e0e:	97 30       	cpi	r25, 0x07	; 7
    1e10:	d1 f6       	brne	.-76     	; 0x1dc6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1e12:	8f 70       	andi	r24, 0x0F	; 15
    1e14:	80 93 e9 00 	sts	0x00E9, r24
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	1f c0       	rjmp	.+62     	; 0x1e5a <Endpoint_ConfigureEndpoint_Prv+0xb0>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	1d c0       	rjmp	.+58     	; 0x1e5a <Endpoint_ConfigureEndpoint_Prv+0xb0>
    1e20:	98 2f       	mov	r25, r24
    1e22:	9f 70       	andi	r25, 0x0F	; 15
    1e24:	90 93 e9 00 	sts	0x00E9, r25
    1e28:	98 2f       	mov	r25, r24
    1e2a:	54 2f       	mov	r21, r20
    1e2c:	d6 2e       	mov	r13, r22
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	ab ee       	ldi	r26, 0xEB	; 235
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ed ee       	ldi	r30, 0xED	; 237
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	2c ee       	ldi	r18, 0xEC	; 236
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	0f 2e       	mov	r0, r31
    1e3e:	f0 ef       	ldi	r31, 0xF0	; 240
    1e40:	8f 2e       	mov	r8, r31
    1e42:	91 2c       	mov	r9, r1
    1e44:	f0 2d       	mov	r31, r0
    1e46:	0f 2e       	mov	r0, r31
    1e48:	fe ee       	ldi	r31, 0xEE	; 238
    1e4a:	ef 2e       	mov	r14, r31
    1e4c:	f1 2c       	mov	r15, r1
    1e4e:	f0 2d       	mov	r31, r0
    1e50:	09 ee       	ldi	r16, 0xE9	; 233
    1e52:	10 e0       	ldi	r17, 0x00	; 0
    1e54:	b4 2e       	mov	r11, r20
    1e56:	c1 2c       	mov	r12, r1
    1e58:	c5 cf       	rjmp	.-118    	; 0x1de4 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	df 90       	pop	r13
    1e68:	cf 90       	pop	r12
    1e6a:	bf 90       	pop	r11
    1e6c:	9f 90       	pop	r9
    1e6e:	8f 90       	pop	r8
    1e70:	08 95       	ret

00001e72 <Endpoint_ConfigureEndpointTable>:
    1e72:	9f 92       	push	r9
    1e74:	af 92       	push	r10
    1e76:	bf 92       	push	r11
    1e78:	cf 92       	push	r12
    1e7a:	df 92       	push	r13
    1e7c:	ef 92       	push	r14
    1e7e:	ff 92       	push	r15
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	c6 2e       	mov	r12, r22
    1e8a:	66 23       	and	r22, r22
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <Endpoint_ConfigureEndpointTable+0x1e>
    1e8e:	47 c0       	rjmp	.+142    	; 0x1f1e <Endpoint_ConfigureEndpointTable+0xac>
    1e90:	ec 01       	movw	r28, r24
    1e92:	8c 01       	movw	r16, r24
    1e94:	0c 5f       	subi	r16, 0xFC	; 252
    1e96:	1f 4f       	sbci	r17, 0xFF	; 255
    1e98:	d1 2c       	mov	r13, r1
    1e9a:	b1 2c       	mov	r11, r1
    1e9c:	68 94       	set
    1e9e:	ee 24       	eor	r14, r14
    1ea0:	e3 f8       	bld	r14, 3
    1ea2:	f1 2c       	mov	r15, r1
    1ea4:	68 94       	set
    1ea6:	99 24       	eor	r9, r9
    1ea8:	91 f8       	bld	r9, 1
    1eaa:	0f 2e       	mov	r0, r31
    1eac:	f6 e0       	ldi	r31, 0x06	; 6
    1eae:	af 2e       	mov	r10, r31
    1eb0:	f0 2d       	mov	r31, r0
    1eb2:	68 81       	ld	r22, Y
    1eb4:	66 23       	and	r22, r22
    1eb6:	59 f1       	breq	.+86     	; 0x1f0e <Endpoint_ConfigureEndpointTable+0x9c>
    1eb8:	f8 01       	movw	r30, r16
    1eba:	90 81       	ld	r25, Z
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	d8 01       	movw	r26, r16
    1ec2:	11 97       	sbiw	r26, 0x01	; 1
    1ec4:	5c 91       	ld	r21, X
    1ec6:	86 2f       	mov	r24, r22
    1ec8:	8f 70       	andi	r24, 0x0F	; 15
    1eca:	87 30       	cpi	r24, 0x07	; 7
    1ecc:	50 f5       	brcc	.+84     	; 0x1f22 <Endpoint_ConfigureEndpointTable+0xb0>
    1ece:	92 30       	cpi	r25, 0x02	; 2
    1ed0:	10 f0       	brcs	.+4      	; 0x1ed6 <Endpoint_ConfigureEndpointTable+0x64>
    1ed2:	4a 2d       	mov	r20, r10
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <Endpoint_ConfigureEndpointTable+0x66>
    1ed6:	49 2d       	mov	r20, r9
    1ed8:	e9 30       	cpi	r30, 0x09	; 9
    1eda:	f1 05       	cpc	r31, r1
    1edc:	48 f0       	brcs	.+18     	; 0x1ef0 <Endpoint_ConfigureEndpointTable+0x7e>
    1ede:	97 01       	movw	r18, r14
    1ee0:	9b 2d       	mov	r25, r11
    1ee2:	9f 5f       	subi	r25, 0xFF	; 255
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	2e 17       	cp	r18, r30
    1eea:	3f 07       	cpc	r19, r31
    1eec:	d0 f3       	brcs	.-12     	; 0x1ee2 <Endpoint_ConfigureEndpointTable+0x70>
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <Endpoint_ConfigureEndpointTable+0x80>
    1ef0:	9b 2d       	mov	r25, r11
    1ef2:	92 95       	swap	r25
    1ef4:	90 7f       	andi	r25, 0xF0	; 240
    1ef6:	49 2b       	or	r20, r25
    1ef8:	f0 e4       	ldi	r31, 0x40	; 64
    1efa:	5f 9f       	mul	r21, r31
    1efc:	90 01       	movw	r18, r0
    1efe:	11 24       	eor	r1, r1
    1f00:	66 1f       	adc	r22, r22
    1f02:	66 27       	eor	r22, r22
    1f04:	66 1f       	adc	r22, r22
    1f06:	62 2b       	or	r22, r18
    1f08:	50 df       	rcall	.-352    	; 0x1daa <Endpoint_ConfigureEndpoint_Prv>
    1f0a:	88 23       	and	r24, r24
    1f0c:	61 f0       	breq	.+24     	; 0x1f26 <Endpoint_ConfigureEndpointTable+0xb4>
    1f0e:	d3 94       	inc	r13
    1f10:	25 96       	adiw	r28, 0x05	; 5
    1f12:	0b 5f       	subi	r16, 0xFB	; 251
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	dc 10       	cpse	r13, r12
    1f18:	cc cf       	rjmp	.-104    	; 0x1eb2 <Endpoint_ConfigureEndpointTable+0x40>
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <Endpoint_ConfigureEndpointTable+0xb6>
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <Endpoint_ConfigureEndpointTable+0xb6>
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <Endpoint_ConfigureEndpointTable+0xb6>
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	df 90       	pop	r13
    1f36:	cf 90       	pop	r12
    1f38:	bf 90       	pop	r11
    1f3a:	af 90       	pop	r10
    1f3c:	9f 90       	pop	r9
    1f3e:	08 95       	ret

00001f40 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1f40:	80 91 36 04 	lds	r24, 0x0436
    1f44:	88 23       	and	r24, r24
    1f46:	b4 f4       	brge	.+44     	; 0x1f74 <Endpoint_ClearStatusStage+0x34>
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <Endpoint_ClearStatusStage+0x14>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1f4a:	80 91 35 04 	lds	r24, 0x0435
    1f4e:	81 11       	cpse	r24, r1
    1f50:	03 c0       	rjmp	.+6      	; 0x1f58 <Endpoint_ClearStatusStage+0x18>
    1f52:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f54:	e8 ee       	ldi	r30, 0xE8	; 232
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1f5a:	82 ff       	sbrs	r24, 2
    1f5c:	f6 cf       	rjmp	.-20     	; 0x1f4a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f5e:	e8 ee       	ldi	r30, 0xE8	; 232
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8b 77       	andi	r24, 0x7B	; 123
    1f66:	80 83       	st	Z, r24
    1f68:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1f6a:	80 91 35 04 	lds	r24, 0x0435
    1f6e:	81 11       	cpse	r24, r1
    1f70:	03 c0       	rjmp	.+6      	; 0x1f78 <Endpoint_ClearStatusStage+0x38>
    1f72:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f74:	e8 ee       	ldi	r30, 0xE8	; 232
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1f7a:	80 ff       	sbrs	r24, 0
    1f7c:	f6 cf       	rjmp	.-20     	; 0x1f6a <Endpoint_ClearStatusStage+0x2a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f7e:	e8 ee       	ldi	r30, 0xE8	; 232
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	8e 77       	andi	r24, 0x7E	; 126
    1f86:	80 83       	st	Z, r24
    1f88:	08 95       	ret

00001f8a <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1f92:	20 91 e4 00 	lds	r18, 0x00E4
    1f96:	30 91 e5 00 	lds	r19, 0x00E5
    1f9a:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f9c:	ac ee       	ldi	r26, 0xEC	; 236
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fa0:	e8 ee       	ldi	r30, 0xE8	; 232
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1fa4:	0b ee       	ldi	r16, 0xEB	; 235
    1fa6:	10 e0       	ldi	r17, 0x00	; 0
    1fa8:	44 ee       	ldi	r20, 0xE4	; 228
    1faa:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1fac:	8c 91       	ld	r24, X
    1fae:	80 fd       	sbrc	r24, 0
    1fb0:	20 c0       	rjmp	.+64     	; 0x1ff2 <Endpoint_WaitUntilReady+0x68>
    1fb2:	23 c0       	rjmp	.+70     	; 0x1ffa <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1fb4:	80 91 35 04 	lds	r24, 0x0435

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1fb8:	88 23       	and	r24, r24
    1fba:	89 f0       	breq	.+34     	; 0x1fde <Endpoint_WaitUntilReady+0x54>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1fbc:	85 30       	cpi	r24, 0x05	; 5
    1fbe:	89 f0       	breq	.+34     	; 0x1fe2 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1fc0:	e8 01       	movw	r28, r16
    1fc2:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1fc4:	85 fd       	sbrc	r24, 5
    1fc6:	0f c0       	rjmp	.+30     	; 0x1fe6 <Endpoint_WaitUntilReady+0x5c>
    1fc8:	ea 01       	movw	r28, r20
    1fca:	88 81       	ld	r24, Y
    1fcc:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1fce:	28 17       	cp	r18, r24
    1fd0:	39 07       	cpc	r19, r25
    1fd2:	61 f3       	breq	.-40     	; 0x1fac <Endpoint_WaitUntilReady+0x22>
    1fd4:	61 50       	subi	r22, 0x01	; 1
    1fd6:	9c 01       	movw	r18, r24
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1fd8:	49 f7       	brne	.-46     	; 0x1fac <Endpoint_WaitUntilReady+0x22>
			  return ENDPOINT_READYWAIT_Timeout;
    1fda:	84 e0       	ldi	r24, 0x04	; 4
    1fdc:	12 c0       	rjmp	.+36     	; 0x2002 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	10 c0       	rjmp	.+32     	; 0x2002 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	0e c0       	rjmp	.+28     	; 0x2002 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	0c c0       	rjmp	.+24     	; 0x2002 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	0a c0       	rjmp	.+20     	; 0x2002 <Endpoint_WaitUntilReady+0x78>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	08 c0       	rjmp	.+16     	; 0x2002 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ff2:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1ff4:	80 ff       	sbrs	r24, 0
    1ff6:	de cf       	rjmp	.-68     	; 0x1fb4 <Endpoint_WaitUntilReady+0x2a>
    1ff8:	f8 cf       	rjmp	.-16     	; 0x1fea <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ffa:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1ffc:	82 ff       	sbrs	r24, 2
    1ffe:	da cf       	rjmp	.-76     	; 0x1fb4 <Endpoint_WaitUntilReady+0x2a>
    2000:	f6 cf       	rjmp	.-20     	; 0x1fee <Endpoint_WaitUntilReady+0x64>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2014:	4b d0       	rcall	.+150    	; 0x20ac <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2016:	52 d0       	rcall	.+164    	; 0x20bc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2018:	c8 ed       	ldi	r28, 0xD8	; 216
    201a:	d0 e0       	ldi	r29, 0x00	; 0
    201c:	88 81       	ld	r24, Y
    201e:	8f 77       	andi	r24, 0x7F	; 127
    2020:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    2022:	88 81       	ld	r24, Y
    2024:	80 68       	ori	r24, 0x80	; 128
    2026:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2028:	88 81       	ld	r24, Y
    202a:	8f 7d       	andi	r24, 0xDF	; 223
    202c:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    202e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2030:	10 92 35 04 	sts	0x0435, r1
	USB_Device_ConfigurationNumber  = 0;
    2034:	10 92 31 04 	sts	0x0431, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2038:	10 92 33 04 	sts	0x0433, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    203c:	10 92 32 04 	sts	0x0432, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2040:	00 ee       	ldi	r16, 0xE0	; 224
    2042:	10 e0       	ldi	r17, 0x00	; 0
    2044:	f8 01       	movw	r30, r16
    2046:	80 81       	ld	r24, Z
    2048:	8b 7f       	andi	r24, 0xFB	; 251
    204a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    204c:	88 81       	ld	r24, Y
    204e:	81 60       	ori	r24, 0x01	; 1
    2050:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2052:	42 e0       	ldi	r20, 0x02	; 2
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	a8 de       	rcall	.-688    	; 0x1daa <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    205a:	e1 ee       	ldi	r30, 0xE1	; 225
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8e 7f       	andi	r24, 0xFE	; 254
    2062:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2064:	e2 ee       	ldi	r30, 0xE2	; 226
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	81 60       	ori	r24, 0x01	; 1
    206c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    206e:	80 81       	ld	r24, Z
    2070:	88 60       	ori	r24, 0x08	; 8
    2072:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2074:	f8 01       	movw	r30, r16
    2076:	80 81       	ld	r24, Z
    2078:	8e 7f       	andi	r24, 0xFE	; 254
    207a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    207c:	88 81       	ld	r24, Y
    207e:	80 61       	ori	r24, 0x10	; 16
    2080:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	08 95       	ret

0000208c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    208c:	e8 ed       	ldi	r30, 0xD8	; 216
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	8f 7e       	andi	r24, 0xEF	; 239
    2094:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2096:	e7 ed       	ldi	r30, 0xD7	; 215
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	81 60       	ori	r24, 0x01	; 1
    209e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    20a0:	84 e0       	ldi	r24, 0x04	; 4
    20a2:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	80 93 34 04 	sts	0x0434, r24

	USB_ResetInterface();
    20aa:	b0 cf       	rjmp	.-160    	; 0x200c <USB_ResetInterface>

000020ac <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    20ac:	e8 ed       	ldi	r30, 0xD8	; 216
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8e 7f       	andi	r24, 0xFE	; 254
    20b4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    20b6:	10 92 e2 00 	sts	0x00E2, r1
    20ba:	08 95       	ret

000020bc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    20bc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    20c0:	10 92 e1 00 	sts	0x00E1, r1
    20c4:	08 95       	ret

000020c6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    20c6:	1f 92       	push	r1
    20c8:	0f 92       	push	r0
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	0f 92       	push	r0
    20ce:	11 24       	eor	r1, r1
    20d0:	2f 93       	push	r18
    20d2:	3f 93       	push	r19
    20d4:	4f 93       	push	r20
    20d6:	5f 93       	push	r21
    20d8:	6f 93       	push	r22
    20da:	7f 93       	push	r23
    20dc:	8f 93       	push	r24
    20de:	9f 93       	push	r25
    20e0:	af 93       	push	r26
    20e2:	bf 93       	push	r27
    20e4:	ef 93       	push	r30
    20e6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    20e8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    20ec:	82 ff       	sbrs	r24, 2
    20ee:	0a c0       	rjmp	.+20     	; 0x2104 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    20f0:	80 91 e2 00 	lds	r24, 0x00E2
    20f4:	82 ff       	sbrs	r24, 2
    20f6:	06 c0       	rjmp	.+12     	; 0x2104 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    20f8:	e1 ee       	ldi	r30, 0xE1	; 225
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	8b 7f       	andi	r24, 0xFB	; 251
    2100:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2102:	6a d2       	rcall	.+1236   	; 0x25d8 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2104:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2108:	80 ff       	sbrs	r24, 0
    210a:	1d c0       	rjmp	.+58     	; 0x2146 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    210c:	80 91 d8 00 	lds	r24, 0x00D8
    2110:	80 ff       	sbrs	r24, 0
    2112:	19 c0       	rjmp	.+50     	; 0x2146 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2114:	ea ed       	ldi	r30, 0xDA	; 218
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8e 7f       	andi	r24, 0xFE	; 254
    211c:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    211e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2122:	80 ff       	sbrs	r24, 0
    2124:	0c c0       	rjmp	.+24     	; 0x213e <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2126:	80 e1       	ldi	r24, 0x10	; 16
    2128:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    212a:	82 e1       	ldi	r24, 0x12	; 18
    212c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    212e:	09 b4       	in	r0, 0x29	; 41
    2130:	00 fe       	sbrs	r0, 0
    2132:	fd cf       	rjmp	.-6      	; 0x212e <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	80 93 35 04 	sts	0x0435, r24
			EVENT_USB_Device_Connect();
    213a:	8f d2       	rcall	.+1310   	; 0x265a <EVENT_USB_Device_Connect>
    213c:	04 c0       	rjmp	.+8      	; 0x2146 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    213e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2140:	10 92 35 04 	sts	0x0435, r1
			EVENT_USB_Device_Disconnect();
    2144:	8b d2       	rcall	.+1302   	; 0x265c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2146:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    214a:	80 ff       	sbrs	r24, 0
    214c:	16 c0       	rjmp	.+44     	; 0x217a <__vector_10+0xb4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    214e:	80 91 e2 00 	lds	r24, 0x00E2
    2152:	80 ff       	sbrs	r24, 0
    2154:	12 c0       	rjmp	.+36     	; 0x217a <__vector_10+0xb4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2156:	e2 ee       	ldi	r30, 0xE2	; 226
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	8e 7f       	andi	r24, 0xFE	; 254
    215e:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2160:	80 81       	ld	r24, Z
    2162:	80 61       	ori	r24, 0x10	; 16
    2164:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2166:	e8 ed       	ldi	r30, 0xD8	; 216
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 62       	ori	r24, 0x20	; 32
    216e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2170:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2172:	85 e0       	ldi	r24, 0x05	; 5
    2174:	80 93 35 04 	sts	0x0435, r24
		EVENT_USB_Device_Suspend();
    2178:	2f d2       	rcall	.+1118   	; 0x25d8 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    217a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    217e:	84 ff       	sbrs	r24, 4
    2180:	2f c0       	rjmp	.+94     	; 0x21e0 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2182:	80 91 e2 00 	lds	r24, 0x00E2
    2186:	84 ff       	sbrs	r24, 4
    2188:	2b c0       	rjmp	.+86     	; 0x21e0 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    218a:	80 e1       	ldi	r24, 0x10	; 16
    218c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    218e:	82 e1       	ldi	r24, 0x12	; 18
    2190:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2192:	09 b4       	in	r0, 0x29	; 41
    2194:	00 fe       	sbrs	r0, 0
    2196:	fd cf       	rjmp	.-6      	; 0x2192 <__vector_10+0xcc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2198:	e8 ed       	ldi	r30, 0xD8	; 216
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	8f 7d       	andi	r24, 0xDF	; 223
    21a0:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    21a2:	e1 ee       	ldi	r30, 0xE1	; 225
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8f 7e       	andi	r24, 0xEF	; 239
    21aa:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    21ac:	e2 ee       	ldi	r30, 0xE2	; 226
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	8f 7e       	andi	r24, 0xEF	; 239
    21b4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    21b6:	80 81       	ld	r24, Z
    21b8:	81 60       	ori	r24, 0x01	; 1
    21ba:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    21bc:	80 91 31 04 	lds	r24, 0x0431
    21c0:	88 23       	and	r24, r24
    21c2:	21 f0       	breq	.+8      	; 0x21cc <__vector_10+0x106>
		  USB_DeviceState = DEVICE_STATE_Configured;
    21c4:	84 e0       	ldi	r24, 0x04	; 4
    21c6:	80 93 35 04 	sts	0x0435, r24
    21ca:	09 c0       	rjmp	.+18     	; 0x21de <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    21cc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    21d0:	88 23       	and	r24, r24
    21d2:	14 f4       	brge	.+4      	; 0x21d8 <__vector_10+0x112>
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <__vector_10+0x114>
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	80 93 35 04 	sts	0x0435, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    21de:	fc d1       	rcall	.+1016   	; 0x25d8 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    21e0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    21e4:	83 ff       	sbrs	r24, 3
    21e6:	23 c0       	rjmp	.+70     	; 0x222e <__vector_10+0x168>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    21e8:	80 91 e2 00 	lds	r24, 0x00E2
    21ec:	83 ff       	sbrs	r24, 3
    21ee:	1f c0       	rjmp	.+62     	; 0x222e <__vector_10+0x168>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    21f0:	e1 ee       	ldi	r30, 0xE1	; 225
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	87 7f       	andi	r24, 0xF7	; 247
    21f8:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	80 93 35 04 	sts	0x0435, r24
		USB_Device_ConfigurationNumber = 0;
    2200:	10 92 31 04 	sts	0x0431, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2204:	80 81       	ld	r24, Z
    2206:	8e 7f       	andi	r24, 0xFE	; 254
    2208:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    220a:	e2 ee       	ldi	r30, 0xE2	; 226
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8e 7f       	andi	r24, 0xFE	; 254
    2212:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2214:	80 81       	ld	r24, Z
    2216:	80 61       	ori	r24, 0x10	; 16
    2218:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    221a:	42 e0       	ldi	r20, 0x02	; 2
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	c4 dd       	rcall	.-1144   	; 0x1daa <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2222:	e0 ef       	ldi	r30, 0xF0	; 240
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	88 60       	ori	r24, 0x08	; 8
    222a:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    222c:	d5 d1       	rcall	.+938    	; 0x25d8 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    222e:	ff 91       	pop	r31
    2230:	ef 91       	pop	r30
    2232:	bf 91       	pop	r27
    2234:	af 91       	pop	r26
    2236:	9f 91       	pop	r25
    2238:	8f 91       	pop	r24
    223a:	7f 91       	pop	r23
    223c:	6f 91       	pop	r22
    223e:	5f 91       	pop	r21
    2240:	4f 91       	pop	r20
    2242:	3f 91       	pop	r19
    2244:	2f 91       	pop	r18
    2246:	0f 90       	pop	r0
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	0f 90       	pop	r0
    224c:	1f 90       	pop	r1
    224e:	18 95       	reti

00002250 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2250:	1f 92       	push	r1
    2252:	0f 92       	push	r0
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	0f 92       	push	r0
    2258:	11 24       	eor	r1, r1
    225a:	ff 92       	push	r15
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	2f 93       	push	r18
    2262:	3f 93       	push	r19
    2264:	4f 93       	push	r20
    2266:	5f 93       	push	r21
    2268:	6f 93       	push	r22
    226a:	7f 93       	push	r23
    226c:	8f 93       	push	r24
    226e:	9f 93       	push	r25
    2270:	af 93       	push	r26
    2272:	bf 93       	push	r27
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	ef 93       	push	r30
    227a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    227c:	80 91 e9 00 	lds	r24, 0x00E9
    2280:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2282:	90 91 ec 00 	lds	r25, 0x00EC
    2286:	90 ff       	sbrs	r25, 0
    2288:	02 c0       	rjmp	.+4      	; 0x228e <__vector_11+0x3e>
    228a:	90 e8       	ldi	r25, 0x80	; 128
    228c:	01 c0       	rjmp	.+2      	; 0x2290 <__vector_11+0x40>
    228e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2290:	f9 2e       	mov	r15, r25
    2292:	f8 2a       	or	r15, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2294:	09 ee       	ldi	r16, 0xE9	; 233
    2296:	10 e0       	ldi	r17, 0x00	; 0
    2298:	f8 01       	movw	r30, r16
    229a:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    229c:	c0 ef       	ldi	r28, 0xF0	; 240
    229e:	d0 e0       	ldi	r29, 0x00	; 0
    22a0:	88 81       	ld	r24, Y
    22a2:	87 7f       	andi	r24, 0xF7	; 247
    22a4:	88 83       	st	Y, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    22a6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    22a8:	1e d0       	rcall	.+60     	; 0x22e6 <USB_Device_ProcessControlRequest>
    22aa:	f8 01       	movw	r30, r16
    22ac:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    22ae:	88 81       	ld	r24, Y
    22b0:	88 60       	ori	r24, 0x08	; 8
    22b2:	88 83       	st	Y, r24
    22b4:	8f 2d       	mov	r24, r15
    22b6:	8f 70       	andi	r24, 0x0F	; 15
    22b8:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    22ba:	ff 91       	pop	r31
    22bc:	ef 91       	pop	r30
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	bf 91       	pop	r27
    22c4:	af 91       	pop	r26
    22c6:	9f 91       	pop	r25
    22c8:	8f 91       	pop	r24
    22ca:	7f 91       	pop	r23
    22cc:	6f 91       	pop	r22
    22ce:	5f 91       	pop	r21
    22d0:	4f 91       	pop	r20
    22d2:	3f 91       	pop	r19
    22d4:	2f 91       	pop	r18
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	ff 90       	pop	r15
    22dc:	0f 90       	pop	r0
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	0f 90       	pop	r0
    22e2:	1f 90       	pop	r1
    22e4:	18 95       	reti

000022e6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	ac 97       	sbiw	r28, 0x2c	; 44
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    22fe:	e6 e3       	ldi	r30, 0x36	; 54
    2300:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2302:	a1 ef       	ldi	r26, 0xF1	; 241
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	8c 91       	ld	r24, X

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2308:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    230a:	24 e0       	ldi	r18, 0x04	; 4
    230c:	ee 33       	cpi	r30, 0x3E	; 62
    230e:	f2 07       	cpc	r31, r18
    2310:	d1 f7       	brne	.-12     	; 0x2306 <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2312:	a8 d1       	rcall	.+848    	; 0x2664 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2314:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2318:	83 ff       	sbrs	r24, 3
    231a:	39 c1       	rjmp	.+626    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    231c:	90 91 36 04 	lds	r25, 0x0436

		switch (USB_ControlRequest.bRequest)
    2320:	80 91 37 04 	lds	r24, 0x0437
    2324:	85 30       	cpi	r24, 0x05	; 5
    2326:	09 f4       	brne	.+2      	; 0x232a <USB_Device_ProcessControlRequest+0x44>
    2328:	81 c0       	rjmp	.+258    	; 0x242c <USB_Device_ProcessControlRequest+0x146>
    232a:	38 f4       	brcc	.+14     	; 0x233a <USB_Device_ProcessControlRequest+0x54>
    232c:	81 30       	cpi	r24, 0x01	; 1
    232e:	d1 f1       	breq	.+116    	; 0x23a4 <USB_Device_ProcessControlRequest+0xbe>
    2330:	70 f0       	brcs	.+28     	; 0x234e <USB_Device_ProcessControlRequest+0x68>
    2332:	83 30       	cpi	r24, 0x03	; 3
    2334:	09 f0       	breq	.+2      	; 0x2338 <USB_Device_ProcessControlRequest+0x52>
    2336:	2b c1       	rjmp	.+598    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
    2338:	35 c0       	rjmp	.+106    	; 0x23a4 <USB_Device_ProcessControlRequest+0xbe>
    233a:	88 30       	cpi	r24, 0x08	; 8
    233c:	09 f4       	brne	.+2      	; 0x2340 <USB_Device_ProcessControlRequest+0x5a>
    233e:	f5 c0       	rjmp	.+490    	; 0x252a <USB_Device_ProcessControlRequest+0x244>
    2340:	89 30       	cpi	r24, 0x09	; 9
    2342:	09 f4       	brne	.+2      	; 0x2346 <USB_Device_ProcessControlRequest+0x60>
    2344:	02 c1       	rjmp	.+516    	; 0x254a <USB_Device_ProcessControlRequest+0x264>
    2346:	86 30       	cpi	r24, 0x06	; 6
    2348:	09 f0       	breq	.+2      	; 0x234c <USB_Device_ProcessControlRequest+0x66>
    234a:	21 c1       	rjmp	.+578    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
    234c:	96 c0       	rjmp	.+300    	; 0x247a <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    234e:	90 38       	cpi	r25, 0x80	; 128
    2350:	21 f0       	breq	.+8      	; 0x235a <USB_Device_ProcessControlRequest+0x74>
    2352:	92 38       	cpi	r25, 0x82	; 130
    2354:	09 f0       	breq	.+2      	; 0x2358 <USB_Device_ProcessControlRequest+0x72>
    2356:	1b c1       	rjmp	.+566    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
    2358:	08 c0       	rjmp	.+16     	; 0x236a <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    235a:	80 91 32 04 	lds	r24, 0x0432
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    235e:	90 91 33 04 	lds	r25, 0x0433
    2362:	99 23       	and	r25, r25
    2364:	89 f0       	breq	.+34     	; 0x2388 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2366:	82 60       	ori	r24, 0x02	; 2
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    236a:	80 91 3a 04 	lds	r24, 0x043A
    236e:	90 91 3b 04 	lds	r25, 0x043B
    2372:	8f 70       	andi	r24, 0x0F	; 15
    2374:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2376:	e9 ee       	ldi	r30, 0xE9	; 233
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    237c:	80 91 eb 00 	lds	r24, 0x00EB
    2380:	85 fb       	bst	r24, 5
    2382:	88 27       	eor	r24, r24
    2384:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2386:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2388:	e8 ee       	ldi	r30, 0xE8	; 232
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	90 81       	ld	r25, Z
    238e:	97 7f       	andi	r25, 0xF7	; 247
    2390:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2392:	a1 ef       	ldi	r26, 0xF1	; 241
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    2398:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    239a:	80 81       	ld	r24, Z
    239c:	8e 77       	andi	r24, 0x7E	; 126
    239e:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    23a0:	cf dd       	rcall	.-1122   	; 0x1f40 <Endpoint_ClearStatusStage>
    23a2:	f5 c0       	rjmp	.+490    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    23a4:	99 23       	and	r25, r25
    23a6:	09 f4       	brne	.+2      	; 0x23aa <USB_Device_ProcessControlRequest+0xc4>
    23a8:	01 c1       	rjmp	.+514    	; 0x25ac <USB_Device_ProcessControlRequest+0x2c6>
    23aa:	92 30       	cpi	r25, 0x02	; 2
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <USB_Device_ProcessControlRequest+0xca>
    23ae:	ef c0       	rjmp	.+478    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
    23b0:	02 c1       	rjmp	.+516    	; 0x25b6 <USB_Device_ProcessControlRequest+0x2d0>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	83 30       	cpi	r24, 0x03	; 3
    23b6:	09 f0       	breq	.+2      	; 0x23ba <USB_Device_ProcessControlRequest+0xd4>
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	90 93 33 04 	sts	0x0433, r25
    23be:	2d c0       	rjmp	.+90     	; 0x241a <USB_Device_ProcessControlRequest+0x134>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    23c0:	80 91 3a 04 	lds	r24, 0x043A
    23c4:	90 91 3b 04 	lds	r25, 0x043B
    23c8:	8f 70       	andi	r24, 0x0F	; 15
    23ca:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    23cc:	88 23       	and	r24, r24
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <USB_Device_ProcessControlRequest+0xec>
    23d0:	de c0       	rjmp	.+444    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23d2:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    23d6:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    23da:	20 ff       	sbrs	r18, 0
    23dc:	1e c0       	rjmp	.+60     	; 0x241a <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    23de:	20 91 37 04 	lds	r18, 0x0437
    23e2:	23 30       	cpi	r18, 0x03	; 3
    23e4:	31 f4       	brne	.+12     	; 0x23f2 <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    23e6:	eb ee       	ldi	r30, 0xEB	; 235
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	80 62       	ori	r24, 0x20	; 32
    23ee:	80 83       	st	Z, r24
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <USB_Device_ProcessControlRequest+0x134>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    23f2:	eb ee       	ldi	r30, 0xEB	; 235
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	90 81       	ld	r25, Z
    23f8:	90 61       	ori	r25, 0x10	; 16
    23fa:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    23fc:	21 e0       	ldi	r18, 0x01	; 1
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	a9 01       	movw	r20, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <USB_Device_ProcessControlRequest+0x122>
    2404:	44 0f       	add	r20, r20
    2406:	55 1f       	adc	r21, r21
    2408:	8a 95       	dec	r24
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <USB_Device_ProcessControlRequest+0x11e>
    240c:	aa ee       	ldi	r26, 0xEA	; 234
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	4c 93       	st	X, r20
				UERST = 0;
    2412:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2414:	80 81       	ld	r24, Z
    2416:	88 60       	ori	r24, 0x08	; 8
    2418:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    241a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    241e:	e8 ee       	ldi	r30, 0xE8	; 232
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	87 7f       	andi	r24, 0xF7	; 247
    2426:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2428:	8b dd       	rcall	.-1258   	; 0x1f40 <Endpoint_ClearStatusStage>
    242a:	b1 c0       	rjmp	.+354    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    242c:	91 11       	cpse	r25, r1
    242e:	af c0       	rjmp	.+350    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2430:	80 91 38 04 	lds	r24, 0x0438
    2434:	90 91 39 04 	lds	r25, 0x0439
    2438:	8f 77       	andi	r24, 0x7F	; 127
    243a:	99 27       	eor	r25, r25
    243c:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    243e:	e3 ee       	ldi	r30, 0xE3	; 227
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	90 81       	ld	r25, Z
    2444:	90 78       	andi	r25, 0x80	; 128
    2446:	89 2b       	or	r24, r25
    2448:	80 83       	st	Z, r24
    244a:	e8 ee       	ldi	r30, 0xE8	; 232
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	87 7f       	andi	r24, 0xF7	; 247
    2452:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2454:	75 dd       	rcall	.-1302   	; 0x1f40 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2456:	e8 ee       	ldi	r30, 0xE8	; 232
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    245c:	80 ff       	sbrs	r24, 0
    245e:	fd cf       	rjmp	.-6      	; 0x245a <USB_Device_ProcessControlRequest+0x174>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    2460:	e3 ee       	ldi	r30, 0xE3	; 227
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	80 68       	ori	r24, 0x80	; 128
    2468:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    246a:	11 23       	and	r17, r17
    246c:	11 f0       	breq	.+4      	; 0x2472 <USB_Device_ProcessControlRequest+0x18c>
    246e:	83 e0       	ldi	r24, 0x03	; 3
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <USB_Device_ProcessControlRequest+0x18e>
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	80 93 35 04 	sts	0x0435, r24
    2478:	8a c0       	rjmp	.+276    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    247a:	90 58       	subi	r25, 0x80	; 128
    247c:	92 30       	cpi	r25, 0x02	; 2
    247e:	08 f0       	brcs	.+2      	; 0x2482 <USB_Device_ProcessControlRequest+0x19c>
    2480:	86 c0       	rjmp	.+268    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2482:	80 91 38 04 	lds	r24, 0x0438
    2486:	90 91 39 04 	lds	r25, 0x0439
    248a:	8c 3d       	cpi	r24, 0xDC	; 220
    248c:	53 e0       	ldi	r21, 0x03	; 3
    248e:	95 07       	cpc	r25, r21
    2490:	99 f5       	brne	.+102    	; 0x24f8 <USB_Device_ProcessControlRequest+0x212>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2492:	83 e0       	ldi	r24, 0x03	; 3
    2494:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2496:	8a e2       	ldi	r24, 0x2A	; 42
    2498:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    249a:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    249c:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    249e:	de 01       	movw	r26, r28
    24a0:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    24a2:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    24a4:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    24a6:	41 e2       	ldi	r20, 0x21	; 33
    24a8:	e3 2f       	mov	r30, r19
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	40 93 57 00 	sts	0x0057, r20
    24b0:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    24b2:	20 ff       	sbrs	r18, 0
    24b4:	03 c0       	rjmp	.+6      	; 0x24bc <USB_Device_ProcessControlRequest+0x1d6>
					{
						SerialByte >>= 4;
    24b6:	82 95       	swap	r24
    24b8:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    24ba:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    24bc:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    24be:	8a 30       	cpi	r24, 0x0A	; 10
    24c0:	18 f0       	brcs	.+6      	; 0x24c8 <USB_Device_ProcessControlRequest+0x1e2>
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	c7 96       	adiw	r24, 0x37	; 55
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <USB_Device_ProcessControlRequest+0x1e6>
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	c0 96       	adiw	r24, 0x30	; 48
    24cc:	8d 93       	st	X+, r24
    24ce:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    24d0:	2f 5f       	subi	r18, 0xFF	; 255
    24d2:	24 31       	cpi	r18, 0x14	; 20
    24d4:	49 f7       	brne	.-46     	; 0x24a8 <USB_Device_ProcessControlRequest+0x1c2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    24d6:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24d8:	08 ee       	ldi	r16, 0xE8	; 232
    24da:	10 e0       	ldi	r17, 0x00	; 0
    24dc:	f8 01       	movw	r30, r16
    24de:	80 81       	ld	r24, Z
    24e0:	87 7f       	andi	r24, 0xF7	; 247
    24e2:	80 83       	st	Z, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    24e4:	6a e2       	ldi	r22, 0x2A	; 42
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	ce 01       	movw	r24, r28
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	4f db       	rcall	.-2402   	; 0x1b8c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    24ee:	f8 01       	movw	r30, r16
    24f0:	80 81       	ld	r24, Z
    24f2:	8b 77       	andi	r24, 0x7B	; 123
    24f4:	80 83       	st	Z, r24
    24f6:	4b c0       	rjmp	.+150    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    24f8:	ae 01       	movw	r20, r28
    24fa:	45 5d       	subi	r20, 0xD5	; 213
    24fc:	5f 4f       	sbci	r21, 0xFF	; 255
    24fe:	60 91 3a 04 	lds	r22, 0x043A
    2502:	0e 94 aa 03 	call	0x754	; 0x754 <CALLBACK_USB_GetDescriptor>
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	09 f4       	brne	.+2      	; 0x250c <USB_Device_ProcessControlRequest+0x226>
    250a:	41 c0       	rjmp	.+130    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    250c:	08 ee       	ldi	r16, 0xE8	; 232
    250e:	10 e0       	ldi	r17, 0x00	; 0
    2510:	f8 01       	movw	r30, r16
    2512:	20 81       	ld	r18, Z
    2514:	27 7f       	andi	r18, 0xF7	; 247
    2516:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2518:	bc 01       	movw	r22, r24
    251a:	8b a5       	ldd	r24, Y+43	; 0x2b
    251c:	9c a5       	ldd	r25, Y+44	; 0x2c
    251e:	bd db       	rcall	.-2182   	; 0x1c9a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2520:	f8 01       	movw	r30, r16
    2522:	80 81       	ld	r24, Z
    2524:	8b 77       	andi	r24, 0x7B	; 123
    2526:	80 83       	st	Z, r24
    2528:	32 c0       	rjmp	.+100    	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    252a:	90 38       	cpi	r25, 0x80	; 128
    252c:	81 f5       	brne	.+96     	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    252e:	e8 ee       	ldi	r30, 0xE8	; 232
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	87 7f       	andi	r24, 0xF7	; 247
    2536:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2538:	80 91 31 04 	lds	r24, 0x0431
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    253c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2540:	80 81       	ld	r24, Z
    2542:	8e 77       	andi	r24, 0x7E	; 126
    2544:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2546:	fc dc       	rcall	.-1544   	; 0x1f40 <Endpoint_ClearStatusStage>
    2548:	22 c0       	rjmp	.+68     	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    254a:	91 11       	cpse	r25, r1
    254c:	20 c0       	rjmp	.+64     	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    254e:	80 91 38 04 	lds	r24, 0x0438
    2552:	82 30       	cpi	r24, 0x02	; 2
    2554:	e0 f4       	brcc	.+56     	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2556:	e8 ee       	ldi	r30, 0xE8	; 232
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	87 7f       	andi	r24, 0xF7	; 247
    255e:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2560:	80 91 38 04 	lds	r24, 0x0438
    2564:	80 93 31 04 	sts	0x0431, r24

	Endpoint_ClearStatusStage();
    2568:	eb dc       	rcall	.-1578   	; 0x1f40 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    256a:	80 91 31 04 	lds	r24, 0x0431
    256e:	88 23       	and	r24, r24
    2570:	21 f0       	breq	.+8      	; 0x257a <USB_Device_ProcessControlRequest+0x294>
	  USB_DeviceState = DEVICE_STATE_Configured;
    2572:	84 e0       	ldi	r24, 0x04	; 4
    2574:	80 93 35 04 	sts	0x0435, r24
    2578:	09 c0       	rjmp	.+18     	; 0x258c <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    257a:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    257e:	88 23       	and	r24, r24
    2580:	14 f4       	brge	.+4      	; 0x2586 <USB_Device_ProcessControlRequest+0x2a0>
    2582:	84 e0       	ldi	r24, 0x04	; 4
    2584:	01 c0       	rjmp	.+2      	; 0x2588 <USB_Device_ProcessControlRequest+0x2a2>
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	80 93 35 04 	sts	0x0435, r24

	EVENT_USB_Device_ConfigurationChanged();
    258c:	68 d0       	rcall	.+208    	; 0x265e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    258e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2592:	83 ff       	sbrs	r24, 3
    2594:	16 c0       	rjmp	.+44     	; 0x25c2 <USB_Device_ProcessControlRequest+0x2dc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2596:	e8 ee       	ldi	r30, 0xE8	; 232
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	87 7f       	andi	r24, 0xF7	; 247
    259e:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    25a0:	eb ee       	ldi	r30, 0xEB	; 235
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 62       	ori	r24, 0x20	; 32
    25a8:	80 83       	st	Z, r24
    25aa:	0b c0       	rjmp	.+22     	; 0x25c2 <USB_Device_ProcessControlRequest+0x2dc>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    25ac:	90 91 38 04 	lds	r25, 0x0438
    25b0:	91 30       	cpi	r25, 0x01	; 1
    25b2:	69 f7       	brne	.-38     	; 0x258e <USB_Device_ProcessControlRequest+0x2a8>
    25b4:	fe ce       	rjmp	.-516    	; 0x23b2 <USB_Device_ProcessControlRequest+0xcc>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    25b6:	80 91 38 04 	lds	r24, 0x0438
    25ba:	88 23       	and	r24, r24
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <USB_Device_ProcessControlRequest+0x2da>
    25be:	00 cf       	rjmp	.-512    	; 0x23c0 <USB_Device_ProcessControlRequest+0xda>
    25c0:	2c cf       	rjmp	.-424    	; 0x241a <USB_Device_ProcessControlRequest+0x134>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    25c2:	ac 96       	adiw	r28, 0x2c	; 44
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	08 95       	ret

000025d8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    25d8:	08 95       	ret

000025da <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    25da:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    25dc:	80 91 35 04 	lds	r24, 0x0435
    25e0:	88 23       	and	r24, r24
    25e2:	a1 f0       	breq	.+40     	; 0x260c <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    25e4:	c0 91 e9 00 	lds	r28, 0x00E9
    25e8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    25ea:	80 91 ec 00 	lds	r24, 0x00EC
    25ee:	80 ff       	sbrs	r24, 0
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <USB_USBTask+0x1c>
    25f2:	80 e8       	ldi	r24, 0x80	; 128
    25f4:	01 c0       	rjmp	.+2      	; 0x25f8 <USB_USBTask+0x1e>
    25f6:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    25f8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25fa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    25fe:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2602:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2604:	70 de       	rcall	.-800    	; 0x22e6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2606:	cf 70       	andi	r28, 0x0F	; 15
    2608:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    260c:	cf 91       	pop	r28
    260e:	08 95       	ret

00002610 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    2610:	84 b7       	in	r24, 0x34	; 52
    2612:	87 7f       	andi	r24, 0xF7	; 247
    2614:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    2616:	88 e1       	ldi	r24, 0x18	; 24
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	80 93 60 00 	sts	0x0060, r24
    2620:	10 92 60 00 	sts	0x0060, r1
    2624:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	80 e8       	ldi	r24, 0x80	; 128
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	80 93 61 00 	sts	0x0061, r24
    2632:	90 93 61 00 	sts	0x0061, r25
    2636:	0f be       	out	0x3f, r0	; 63

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	USB_Init();
    2638:	29 dd       	rcall	.-1454   	; 0x208c <USB_Init>
// GPIOR2 untaken
#define SOFT_TIMER0_PRESCALLER		5

static inline void Led_Init()
{
	RX_LED_DDR |= _BV(RX_LED_P);
    263a:	20 9a       	sbi	0x04, 0	; 4
	RX_LED_PORT |= _BV(RX_LED_P);
    263c:	28 9a       	sbi	0x05, 0	; 5
	
	TX_LED_DDR |= _BV(TX_LED_P);
    263e:	55 9a       	sbi	0x0a, 5	; 10
	TX_LED_PORT |= _BV(TX_LED_P);
    2640:	5d 9a       	sbi	0x0b, 5	; 11
	
	L_LED_DDR |= _BV(L_LED_P);
    2642:	3f 9a       	sbi	0x07, 7	; 7
	L_LED_PORT &= ~_BV(L_LED_P);
    2644:	47 98       	cbi	0x08, 7	; 8
	Led_Init();
	Buttons_Init();
    2646:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <Buttons_Init>
	TimeCheckTimer0_Init();
    264a:	0e 94 6f 02 	call	0x4de	; 0x4de <TimeCheckTimer0_Init>
	TimerPushTimeout1_Init();
    264e:	0e 94 bd 02 	call	0x57a	; 0x57a <TimerPushTimeout1_Init>
	TimerDebounce3_Init();
    2652:	0e 94 ed 02 	call	0x5da	; 0x5da <TimerDebounce3_Init>
	buf_lcd_init();
    2656:	0c 94 12 01 	jmp	0x224	; 0x224 <buf_lcd_init>

0000265a <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    265a:	08 95       	ret

0000265c <EVENT_USB_Device_Disconnect>:
	
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    265c:	08 95       	ret

0000265e <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    265e:	82 e1       	ldi	r24, 0x12	; 18
    2660:	91 e0       	ldi	r25, 0x01	; 1
    2662:	32 c8       	rjmp	.-3996   	; 0x16c8 <CDC_Device_ConfigureEndpoints>

00002664 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    2664:	82 e1       	ldi	r24, 0x12	; 18
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	90 c9       	rjmp	.-3296   	; 0x198a <CDC_Device_ProcessControlRequest>

0000266a <GetCrc>:
}

/** Calculates the crc of frame set as buffer parameter */
uint8_t GetCrc(uint8_t *buffer, uint8_t bytes)
{
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	00 d0       	rcall	.+0      	; 0x2670 <GetCrc+0x6>
    2670:	1f 92       	push	r1
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	fc 01       	movw	r30, r24
	volatile uint16_t i;
	volatile uint8_t temp = 0;
    2678:	1b 82       	std	Y+3, r1	; 0x03
	
	for(i = 0; i < bytes ;i++)
    267a:	1a 82       	std	Y+2, r1	; 0x02
    267c:	19 82       	std	Y+1, r1	; 0x01
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	86 17       	cp	r24, r22
    2686:	97 07       	cpc	r25, r23
    2688:	70 f4       	brcc	.+28     	; 0x26a6 <GetCrc+0x3c>
	{
		temp += *buffer++;
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	81 91       	ld	r24, Z+
    268e:	89 0f       	add	r24, r25
    2690:	8b 83       	std	Y+3, r24	; 0x03
uint8_t GetCrc(uint8_t *buffer, uint8_t bytes)
{
	volatile uint16_t i;
	volatile uint8_t temp = 0;
	
	for(i = 0; i < bytes ;i++)
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	86 17       	cp	r24, r22
    26a2:	97 07       	cpc	r25, r23
    26a4:	90 f3       	brcs	.-28     	; 0x268a <GetCrc+0x20>
	{
		temp += *buffer++;
	}
	temp =~ temp;
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	80 95       	com	r24
    26aa:	8b 83       	std	Y+3, r24	; 0x03
	
	return temp;
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
}
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	08 95       	ret

000026ba <SendAnsferAfterSetCommand>:

void SendAnsferAfterSetCommand(uint8_t command)
{
	uint8_t i = 0;
	
	g_txBuffer[i++] = SYNC_BYTE; // sync byte
    26ba:	9e e5       	ldi	r25, 0x5E	; 94
    26bc:	90 93 4f 04 	sts	0x044F, r25
	g_txBuffer[i++] = command; // command
    26c0:	80 93 50 04 	sts	0x0450, r24
	g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
    26c4:	62 e0       	ldi	r22, 0x02	; 2
    26c6:	8f e4       	ldi	r24, 0x4F	; 79
    26c8:	94 e0       	ldi	r25, 0x04	; 4
    26ca:	cf df       	rcall	.-98     	; 0x266a <GetCrc>
    26cc:	80 93 51 04 	sts	0x0451, r24
	i++;
	CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
    26d0:	43 e0       	ldi	r20, 0x03	; 3
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	6f e4       	ldi	r22, 0x4F	; 79
    26d6:	74 e0       	ldi	r23, 0x04	; 4
    26d8:	82 e1       	ldi	r24, 0x12	; 18
    26da:	91 e0       	ldi	r25, 0x01	; 1
    26dc:	1c c8       	rjmp	.-4040   	; 0x1716 <CDC_Device_SendData>

000026de <ButtonsTimeChange>:

void ButtonsTimeChange()
{
	static uint32_t counter = 0;
	
	if ((bit_is_clear(BTN3_PIN, BTN3_P)) && g_startFastTimeSwap)
    26de:	66 99       	sbic	0x0c, 6	; 12
    26e0:	27 c0       	rjmp	.+78     	; 0x2730 <ButtonsTimeChange+0x52>
    26e2:	80 91 3f 02 	lds	r24, 0x023F
    26e6:	88 23       	and	r24, r24
    26e8:	19 f1       	breq	.+70     	; 0x2730 <ButtonsTimeChange+0x52>
	{
		counter++;
    26ea:	80 91 59 02 	lds	r24, 0x0259
    26ee:	90 91 5a 02 	lds	r25, 0x025A
    26f2:	a0 91 5b 02 	lds	r26, 0x025B
    26f6:	b0 91 5c 02 	lds	r27, 0x025C
    26fa:	01 96       	adiw	r24, 0x01	; 1
    26fc:	a1 1d       	adc	r26, r1
    26fe:	b1 1d       	adc	r27, r1
    2700:	80 93 59 02 	sts	0x0259, r24
    2704:	90 93 5a 02 	sts	0x025A, r25
    2708:	a0 93 5b 02 	sts	0x025B, r26
    270c:	b0 93 5c 02 	sts	0x025C, r27
		
		if (counter >= MAX_BTN_COUNTER_VAL)
    2710:	88 38       	cpi	r24, 0x88	; 136
    2712:	93 41       	sbci	r25, 0x13	; 19
    2714:	a1 05       	cpc	r26, r1
    2716:	b1 05       	cpc	r27, r1
    2718:	f0 f1       	brcs	.+124    	; 0x2796 <ButtonsTimeChange+0xb8>
		{
			IncrementTimeCell();
    271a:	0e 94 14 03 	call	0x628	; 0x628 <IncrementTimeCell>
			counter = 0;
    271e:	10 92 59 02 	sts	0x0259, r1
    2722:	10 92 5a 02 	sts	0x025A, r1
    2726:	10 92 5b 02 	sts	0x025B, r1
    272a:	10 92 5c 02 	sts	0x025C, r1
    272e:	08 95       	ret
		}
	}
	else if ((bit_is_clear(BTN1_PIN, BTN1_P)) && g_startFastTimeSwap)
    2730:	4a 99       	sbic	0x09, 2	; 9
    2732:	27 c0       	rjmp	.+78     	; 0x2782 <ButtonsTimeChange+0xa4>
    2734:	80 91 3f 02 	lds	r24, 0x023F
    2738:	88 23       	and	r24, r24
    273a:	19 f1       	breq	.+70     	; 0x2782 <ButtonsTimeChange+0xa4>
	{
		counter++;
    273c:	80 91 59 02 	lds	r24, 0x0259
    2740:	90 91 5a 02 	lds	r25, 0x025A
    2744:	a0 91 5b 02 	lds	r26, 0x025B
    2748:	b0 91 5c 02 	lds	r27, 0x025C
    274c:	01 96       	adiw	r24, 0x01	; 1
    274e:	a1 1d       	adc	r26, r1
    2750:	b1 1d       	adc	r27, r1
    2752:	80 93 59 02 	sts	0x0259, r24
    2756:	90 93 5a 02 	sts	0x025A, r25
    275a:	a0 93 5b 02 	sts	0x025B, r26
    275e:	b0 93 5c 02 	sts	0x025C, r27
		
		if (counter >= MAX_BTN_COUNTER_VAL)
    2762:	88 38       	cpi	r24, 0x88	; 136
    2764:	93 41       	sbci	r25, 0x13	; 19
    2766:	a1 05       	cpc	r26, r1
    2768:	b1 05       	cpc	r27, r1
    276a:	a8 f0       	brcs	.+42     	; 0x2796 <ButtonsTimeChange+0xb8>
		{
			DecrementTimeCell();
    276c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DecrementTimeCell>
			counter = 0;
    2770:	10 92 59 02 	sts	0x0259, r1
    2774:	10 92 5a 02 	sts	0x025A, r1
    2778:	10 92 5b 02 	sts	0x025B, r1
    277c:	10 92 5c 02 	sts	0x025C, r1
    2780:	08 95       	ret
		}
	}
	else
	{
		counter = 0;
    2782:	10 92 59 02 	sts	0x0259, r1
    2786:	10 92 5a 02 	sts	0x025A, r1
    278a:	10 92 5b 02 	sts	0x025B, r1
    278e:	10 92 5c 02 	sts	0x025C, r1
		g_startFastTimeSwap = false;
    2792:	10 92 3f 02 	sts	0x023F, r1
    2796:	08 95       	ret

00002798 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	1f 92       	push	r1
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
	uint8_t uartReceivedByte = 0;
	uint8_t currentByteNr = 0;
	uint8_t calculatedCrc = 0;
	g_ds18b20RomValuePointer = &g_ds18b20RomValue;
    27a2:	82 e4       	ldi	r24, 0x42	; 66
    27a4:	92 e0       	ldi	r25, 0x02	; 2
    27a6:	90 93 4e 04 	sts	0x044E, r25
    27aa:	80 93 4d 04 	sts	0x044D, r24
	L_LED_PORT ^= _BV(L_LED_P);
}

static inline void SetTimeMeasure_Flag()
{
	g_takeMeasureNow_Flag = SOFT_TIMER0_PRESCALLER;
    27ae:	85 e0       	ldi	r24, 0x05	; 5
    27b0:	8e bb       	out	0x1e, r24	; 30
	uint8_t prevSecRead = 0xFF;
	SetTimeMeasure_Flag();
	
	SetupHardware();
    27b2:	2e df       	rcall	.-420    	; 0x2610 <SetupHardware>
	i2cSetBitrate(100);
    27b4:	84 e6       	ldi	r24, 0x64	; 100
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <i2cSetBitrate>
	
	memset(&g_timeArray, 0, sizeof(g_timeArray));
    27bc:	80 e2       	ldi	r24, 0x20	; 32
    27be:	91 e0       	ldi	r25, 0x01	; 1
    27c0:	e9 e8       	ldi	r30, 0x89	; 137
    27c2:	f2 e0       	ldi	r31, 0x02	; 2
    27c4:	df 01       	movw	r26, r30
    27c6:	9c 01       	movw	r18, r24
    27c8:	1d 92       	st	X+, r1
    27ca:	21 50       	subi	r18, 0x01	; 1
    27cc:	30 40       	sbci	r19, 0x00	; 0
    27ce:	e1 f7       	brne	.-8      	; 0x27c8 <main+0x30>
	
	// utworzenie kilku obiektów/warstw na potrzeby zdarzenia BUF_LCD_EVENT()
	create_obj(&g_dateAndTime_layer,			0,	0,	COLS,	ROWS,	0,	DateDisplayWindow_Event);
    27d0:	0f 2e       	mov	r0, r31
    27d2:	f6 eb       	ldi	r31, 0xB6	; 182
    27d4:	cf 2e       	mov	r12, r31
    27d6:	f4 e0       	ldi	r31, 0x04	; 4
    27d8:	df 2e       	mov	r13, r31
    27da:	f0 2d       	mov	r31, r0
    27dc:	e1 2c       	mov	r14, r1
    27de:	02 e0       	ldi	r16, 0x02	; 2
    27e0:	20 e1       	ldi	r18, 0x10	; 16
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	81 ed       	ldi	r24, 0xD1	; 209
    27e8:	93 e0       	ldi	r25, 0x03	; 3
    27ea:	0e 94 c9 00 	call	0x192	; 0x192 <create_obj>
	create_obj(&g_lowestAndHighestTemp_layer,	0,	0,	COLS,	ROWS,	0,	LowestHighestTempWindow_Event);
    27ee:	0f 2e       	mov	r0, r31
    27f0:	f4 e7       	ldi	r31, 0x74	; 116
    27f2:	cf 2e       	mov	r12, r31
    27f4:	f5 e0       	ldi	r31, 0x05	; 5
    27f6:	df 2e       	mov	r13, r31
    27f8:	f0 2d       	mov	r31, r0
    27fa:	20 e1       	ldi	r18, 0x10	; 16
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	88 ef       	ldi	r24, 0xF8	; 248
    2802:	93 e0       	ldi	r25, 0x03	; 3
    2804:	0e 94 c9 00 	call	0x192	; 0x192 <create_obj>
	create_obj(&g_specificTime_layer,			0,	0,	COLS,	ROWS,	0,	SpecificTimeWindow_Event);
    2808:	0f 2e       	mov	r0, r31
    280a:	f7 ef       	ldi	r31, 0xF7	; 247
    280c:	cf 2e       	mov	r12, r31
    280e:	f6 e0       	ldi	r31, 0x06	; 6
    2810:	df 2e       	mov	r13, r31
    2812:	f0 2d       	mov	r31, r0
    2814:	20 e1       	ldi	r18, 0x10	; 16
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	89 ea       	ldi	r24, 0xA9	; 169
    281c:	93 e0       	ldi	r25, 0x03	; 3
    281e:	0e 94 c9 00 	call	0x192	; 0x192 <create_obj>
	g_activeLayer = DATE_AND_TIME_MASK;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	80 93 1f 04 	sts	0x041F, r24

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    2828:	6b e4       	ldi	r22, 0x4B	; 75
    282a:	72 e0       	ldi	r23, 0x02	; 2
    282c:	82 e1       	ldi	r24, 0x12	; 18
    282e:	91 e0       	ldi	r25, 0x01	; 1
    2830:	98 d8       	rcall	.-3792   	; 0x1962 <CDC_Device_CreateStream>
	
	// Read sensors ID, set scratchpad and read temp
	if	(
		(ds18b20_ReadROM(OWI_PIN_1, &g_ds18b20RomValue)) ||
    2832:	62 e4       	ldi	r22, 0x42	; 66
    2834:	72 e0       	ldi	r23, 0x02	; 2
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <ds18b20_ReadROM>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
	
	// Read sensors ID, set scratchpad and read temp
	if	(
    283c:	81 11       	cpse	r24, r1
    283e:	0e c0       	rjmp	.+28     	; 0x285c <main+0xc4>
		(ds18b20_ReadROM(OWI_PIN_1, &g_ds18b20RomValue)) ||
		(ds18b20_WriteScratchpad(OWI_PIN_1, DS18B20_MAX_ALARM_TEMP, DS18B20_MIN_ALARM_TEMP, DS18B20_MIN_RESOLUTION)) ||
    2840:	2f e1       	ldi	r18, 0x1F	; 31
    2842:	4b ef       	ldi	r20, 0xFB	; 251
    2844:	6e e1       	ldi	r22, 0x1E	; 30
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	0e 94 45 09 	call	0x128a	; 0x128a <ds18b20_WriteScratchpad>
	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
	
	// Read sensors ID, set scratchpad and read temp
	if	(
		(ds18b20_ReadROM(OWI_PIN_1, &g_ds18b20RomValue)) ||
    284c:	81 11       	cpse	r24, r1
    284e:	06 c0       	rjmp	.+12     	; 0x285c <main+0xc4>
		(ds18b20_WriteScratchpad(OWI_PIN_1, DS18B20_MAX_ALARM_TEMP, DS18B20_MIN_ALARM_TEMP, DS18B20_MIN_RESOLUTION)) ||
		(ds18b20_ReadTemp(OWI_PIN_1, g_ds18b20TempValue))
    2850:	61 e2       	ldi	r22, 0x21	; 33
    2852:	74 e0       	ldi	r23, 0x04	; 4
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	0e 94 15 09 	call	0x122a	; 0x122a <ds18b20_ReadTemp>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
	
	// Read sensors ID, set scratchpad and read temp
	if	(
		(ds18b20_ReadROM(OWI_PIN_1, &g_ds18b20RomValue)) ||
		(ds18b20_WriteScratchpad(OWI_PIN_1, DS18B20_MAX_ALARM_TEMP, DS18B20_MIN_ALARM_TEMP, DS18B20_MIN_RESOLUTION)) ||
    285a:	81 11       	cpse	r24, r1
	TX_LED_PORT ^= _BV(TX_LED_P);
}

static inline void LLedOn()
{
	L_LED_PORT |= _BV(L_LED_P);
    285c:	47 9a       	sbi	0x08, 7	; 8
	{
		LLedOn(); // couldnt read hardware
	}

	// debug
	g_time = ds1307_GetCurrentTime();
    285e:	0e 94 84 0a 	call	0x1508	; 0x1508 <ds1307_GetCurrentTime>
    2862:	60 93 2e 04 	sts	0x042E, r22
    2866:	70 93 2f 04 	sts	0x042F, r23
    286a:	80 93 30 04 	sts	0x0430, r24
	g_date = ds1307_GetCurrentDate();
    286e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <ds1307_GetCurrentDate>
    2872:	60 93 2a 04 	sts	0x042A, r22
    2876:	70 93 2b 04 	sts	0x042B, r23
    287a:	80 93 2c 04 	sts	0x042C, r24
    287e:	90 93 2d 04 	sts	0x042D, r25
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2882:	78 94       	sei
{
	uint8_t uartReceivedByte = 0;
	uint8_t currentByteNr = 0;
	uint8_t calculatedCrc = 0;
	g_ds18b20RomValuePointer = &g_ds18b20RomValue;
	uint8_t prevSecRead = 0xFF;
    2884:	33 24       	eor	r3, r3
    2886:	3a 94       	dec	r3
 *  setup of all components and the main program loop.
 */
int main(void)
{
	uint8_t uartReceivedByte = 0;
	uint8_t currentByteNr = 0;
    2888:	41 2c       	mov	r4, r1
				volatile uint8_t i = 0;
				
				currentByteNr = 0;
				g_packetStatus = PACKET_UNINITIALISED;
				
				switch (g_rxBuffer[1])
    288a:	0f 2e       	mov	r0, r31
    288c:	ff e3       	ldi	r31, 0x3F	; 63
    288e:	8f 2e       	mov	r8, r31
    2890:	f4 e0       	ldi	r31, 0x04	; 4
    2892:	9f 2e       	mov	r9, r31
    2894:	f0 2d       	mov	r31, r0
					
					case CMD_GET_DATE:
					{
						g_date = ds1307_GetCurrentDate();
						
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
    2896:	0f 2e       	mov	r0, r31
    2898:	fe e5       	ldi	r31, 0x5E	; 94
    289a:	2f 2e       	mov	r2, r31
    289c:	f0 2d       	mov	r31, r0
						g_txBuffer[i++] = g_rxBuffer[1]; // command
						g_txBuffer[i++] = g_date.day;
    289e:	0f 2e       	mov	r0, r31
    28a0:	fa e2       	ldi	r31, 0x2A	; 42
    28a2:	6f 2e       	mov	r6, r31
    28a4:	f4 e0       	ldi	r31, 0x04	; 4
    28a6:	7f 2e       	mov	r7, r31
    28a8:	f0 2d       	mov	r31, r0
					
					case CMD_GET_HOUR_TEMP:
					{
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
						g_txBuffer[i++] = g_rxBuffer[1]; // command
						g_txBuffer[i++] = (uint8_t)g_timeArray[g_rxBuffer[3]][g_rxBuffer[2] / 10];
    28aa:	0f 2e       	mov	r0, r31
    28ac:	fd ec       	ldi	r31, 0xCD	; 205
    28ae:	5f 2e       	mov	r5, r31
    28b0:	f0 2d       	mov	r31, r0
						ds18b20_ReadTemp(OWI_PIN_1, g_ds18b20TempValue);
						
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
						g_txBuffer[i++] = g_rxBuffer[1]; // command
						g_txBuffer[i++] = g_ds18b20TempValue[0] |= CELL_TAGGED_MASK; // valid temp just for current read
						g_txBuffer[i++] = g_ds18b20TempValue[1];
    28b2:	0f 2e       	mov	r0, r31
    28b4:	f2 e2       	ldi	r31, 0x22	; 34
    28b6:	cf 2e       	mov	r12, r31
    28b8:	f4 e0       	ldi	r31, 0x04	; 4
    28ba:	df 2e       	mov	r13, r31
    28bc:	f0 2d       	mov	r31, r0
					{
						g_time = ds1307_GetCurrentTime();
						
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
						g_txBuffer[i++] = g_rxBuffer[1]; // command
						g_txBuffer[i++] = g_time.second;
    28be:	0e e2       	ldi	r16, 0x2E	; 46
    28c0:	14 e0       	ldi	r17, 0x04	; 4
	
	GlobalInterruptEnable();

	while(1)
	{
		CheckCurrentVisibleLayer();
    28c2:	0e 94 a8 04 	call	0x950	; 0x950 <CheckCurrentVisibleLayer>
		
		if (CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface))
    28c6:	82 e1       	ldi	r24, 0x12	; 18
    28c8:	91 e0       	ldi	r25, 0x01	; 1
    28ca:	0e 94 2e 0c 	call	0x185c	; 0x185c <CDC_Device_BytesReceived>
    28ce:	89 2b       	or	r24, r25
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <main+0x13c>
    28d2:	47 c2       	rjmp	.+1166   	; 0x2d62 <main+0x5ca>
		{
			uartReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    28d4:	82 e1       	ldi	r24, 0x12	; 18
    28d6:	91 e0       	ldi	r25, 0x01	; 1
    28d8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <CDC_Device_ReceiveByte>
    28dc:	28 2f       	mov	r18, r24
			g_rxBuffer[currentByteNr] = uartReceivedByte;
    28de:	e4 2d       	mov	r30, r4
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	e2 5c       	subi	r30, 0xC2	; 194
    28e4:	fb 4f       	sbci	r31, 0xFB	; 251
    28e6:	80 83       	st	Z, r24
			
			if (currentByteNr > MAX_BUFFER_SIZE)
    28e8:	3f e0       	ldi	r19, 0x0F	; 15
    28ea:	34 15       	cp	r19, r4
    28ec:	20 f4       	brcc	.+8      	; 0x28f6 <main+0x15e>
			{
				currentByteNr = 0;
				g_packetStatus = PACKET_UNINITIALISED;
    28ee:	10 92 4a 02 	sts	0x024A, r1
			uartReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
			g_rxBuffer[currentByteNr] = uartReceivedByte;
			
			if (currentByteNr > MAX_BUFFER_SIZE)
			{
				currentByteNr = 0;
    28f2:	41 2c       	mov	r4, r1
    28f4:	02 c0       	rjmp	.+4      	; 0x28fa <main+0x162>
				g_packetStatus = PACKET_UNINITIALISED;
			}
			
			if (!currentByteNr && (SYNC_BYTE == uartReceivedByte))
    28f6:	41 10       	cpse	r4, r1
    28f8:	07 c0       	rjmp	.+14     	; 0x2908 <main+0x170>
    28fa:	2e 35       	cpi	r18, 0x5E	; 94
    28fc:	b9 f5       	brne	.+110    	; 0x296c <main+0x1d4>
			{
				currentByteNr = 0;
				g_packetStatus = PACKET_SYNCED;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	80 93 4a 02 	sts	0x024A, r24
				g_packetStatus = PACKET_UNINITIALISED;
			}
			
			if (!currentByteNr && (SYNC_BYTE == uartReceivedByte))
			{
				currentByteNr = 0;
    2904:	41 2c       	mov	r4, r1
    2906:	58 c0       	rjmp	.+176    	; 0x29b8 <main+0x220>
				g_packetStatus = PACKET_SYNCED;
			}
			else if ((1 == currentByteNr) && (PACKET_SYNCED == g_packetStatus))
    2908:	a1 e0       	ldi	r26, 0x01	; 1
    290a:	4a 12       	cpse	r4, r26
    290c:	2f c0       	rjmp	.+94     	; 0x296c <main+0x1d4>
    290e:	20 91 4a 02 	lds	r18, 0x024A
    2912:	21 30       	cpi	r18, 0x01	; 1
    2914:	59 f5       	brne	.+86     	; 0x296c <main+0x1d4>
			{
				switch(uartReceivedByte)
    2916:	99 27       	eor	r25, r25
    2918:	86 30       	cpi	r24, 0x06	; 6
    291a:	91 05       	cpc	r25, r1
    291c:	54 f4       	brge	.+20     	; 0x2932 <main+0x19a>
    291e:	84 30       	cpi	r24, 0x04	; 4
    2920:	91 05       	cpc	r25, r1
    2922:	cc f4       	brge	.+50     	; 0x2956 <main+0x1be>
    2924:	82 30       	cpi	r24, 0x02	; 2
    2926:	91 05       	cpc	r25, r1
    2928:	b1 f0       	breq	.+44     	; 0x2956 <main+0x1be>
    292a:	6c f4       	brge	.+26     	; 0x2946 <main+0x1ae>
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	b9 f4       	brne	.+46     	; 0x295e <main+0x1c6>
    2930:	06 c0       	rjmp	.+12     	; 0x293e <main+0x1a6>
    2932:	86 30       	cpi	r24, 0x06	; 6
    2934:	91 05       	cpc	r25, r1
    2936:	59 f0       	breq	.+22     	; 0x294e <main+0x1b6>
    2938:	09 97       	sbiw	r24, 0x09	; 9
    293a:	89 f4       	brne	.+34     	; 0x295e <main+0x1c6>
    293c:	0c c0       	rjmp	.+24     	; 0x2956 <main+0x1be>
				{
					case CMD_SET_TIME:
					{
						g_nrOfBytes2Receive = 4; // total nr of frames -2
    293e:	84 e0       	ldi	r24, 0x04	; 4
    2940:	80 93 11 01 	sts	0x0111, r24
						break;
    2944:	35 c0       	rjmp	.+106    	; 0x29b0 <main+0x218>
					}
					
					case CMD_SET_DATE:
					{
						g_nrOfBytes2Receive = 5;
    2946:	85 e0       	ldi	r24, 0x05	; 5
    2948:	80 93 11 01 	sts	0x0111, r24
						break;
    294c:	31 c0       	rjmp	.+98     	; 0x29b0 <main+0x218>
					}
					
					case CMD_GET_HOUR_TEMP:
					{
						g_nrOfBytes2Receive = 3;
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	80 93 11 01 	sts	0x0111, r24
						break;
    2954:	2d c0       	rjmp	.+90     	; 0x29b0 <main+0x218>
					case CMD_GET_TIME:
					case CMD_GET_DATE:
					case CMD_GET_CURR_TEMP:
					case CMD_GET_DS18B20_HID:
					{
						g_nrOfBytes2Receive = 1;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	80 93 11 01 	sts	0x0111, r24
						break;
    295c:	29 c0       	rjmp	.+82     	; 0x29b0 <main+0x218>
					}
					
					default:
					{
						// unknown frame
						g_nrOfBytes2Receive = DEFAULT_NR_OF_BYTES;
    295e:	82 e0       	ldi	r24, 0x02	; 2
    2960:	80 93 11 01 	sts	0x0111, r24
						currentByteNr = 0;
						g_packetStatus = PACKET_UNINITIALISED;
    2964:	10 92 4a 02 	sts	0x024A, r1
					
					default:
					{
						// unknown frame
						g_nrOfBytes2Receive = DEFAULT_NR_OF_BYTES;
						currentByteNr = 0;
    2968:	41 2c       	mov	r4, r1
						g_packetStatus = PACKET_UNINITIALISED;
						break;
    296a:	82 c2       	rjmp	.+1284   	; 0x2e70 <main+0x6d8>
					}
				}
			}
			else if ((currentByteNr >= (g_nrOfBytes2Receive + 1)) && (PACKET_SYNCED == g_packetStatus))
    296c:	e4 2c       	mov	r14, r4
    296e:	f1 2c       	mov	r15, r1
    2970:	80 91 11 01 	lds	r24, 0x0111
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	01 96       	adiw	r24, 0x01	; 1
    2978:	e8 16       	cp	r14, r24
    297a:	f9 06       	cpc	r15, r25
    297c:	cc f0       	brlt	.+50     	; 0x29b0 <main+0x218>
    297e:	80 91 4a 02 	lds	r24, 0x024A
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	09 f0       	breq	.+2      	; 0x2988 <main+0x1f0>
    2986:	74 c2       	rjmp	.+1256   	; 0x2e70 <main+0x6d8>
			{
				calculatedCrc = GetCrc(g_rxBuffer, currentByteNr);
    2988:	64 2d       	mov	r22, r4
    298a:	8e e3       	ldi	r24, 0x3E	; 62
    298c:	94 e0       	ldi	r25, 0x04	; 4
    298e:	6d de       	rcall	.-806    	; 0x266a <GetCrc>
				
				if (calculatedCrc == g_rxBuffer[currentByteNr])
    2990:	f7 01       	movw	r30, r14
    2992:	e2 5c       	subi	r30, 0xC2	; 194
    2994:	fb 4f       	sbci	r31, 0xFB	; 251
    2996:	90 81       	ld	r25, Z
    2998:	98 13       	cpse	r25, r24
    299a:	04 c0       	rjmp	.+8      	; 0x29a4 <main+0x20c>
				{
					g_packetStatus = PACKET_CRC_OK;
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	80 93 4a 02 	sts	0x024A, r24
    29a2:	66 c2       	rjmp	.+1228   	; 0x2e70 <main+0x6d8>
				}
				else //  crc error
				{
					currentByteNr = 0;
					g_packetStatus = PACKET_UNINITIALISED;
    29a4:	10 92 4a 02 	sts	0x024A, r1
					g_nrOfBytes2Receive = DEFAULT_NR_OF_BYTES;
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	80 93 11 01 	sts	0x0111, r24
				{
					g_packetStatus = PACKET_CRC_OK;
				}
				else //  crc error
				{
					currentByteNr = 0;
    29ae:	41 2c       	mov	r4, r1
					g_packetStatus = PACKET_UNINITIALISED;
					g_nrOfBytes2Receive = DEFAULT_NR_OF_BYTES;
				}
			}
			
			if (PACKET_SYNCED == g_packetStatus)
    29b0:	80 91 4a 02 	lds	r24, 0x024A
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	11 f4       	brne	.+4      	; 0x29bc <main+0x224>
			{
				currentByteNr++;
    29b8:	43 94       	inc	r4
    29ba:	d3 c1       	rjmp	.+934    	; 0x2d62 <main+0x5ca>
			}
			
			//////////////////////////////////////////////////////////////////////////
			
			if (PACKET_CRC_OK == g_packetStatus)
    29bc:	82 30       	cpi	r24, 0x02	; 2
    29be:	09 f0       	breq	.+2      	; 0x29c2 <main+0x22a>
    29c0:	d0 c1       	rjmp	.+928    	; 0x2d62 <main+0x5ca>
			{
				volatile uint8_t i = 0;
    29c2:	19 82       	std	Y+1, r1	; 0x01
				
				currentByteNr = 0;
				g_packetStatus = PACKET_UNINITIALISED;
    29c4:	10 92 4a 02 	sts	0x024A, r1
				
				switch (g_rxBuffer[1])
    29c8:	f4 01       	movw	r30, r8
    29ca:	80 81       	ld	r24, Z
    29cc:	84 30       	cpi	r24, 0x04	; 4
    29ce:	09 f4       	brne	.+2      	; 0x29d2 <main+0x23a>
    29d0:	92 c0       	rjmp	.+292    	; 0x2af6 <main+0x35e>
    29d2:	40 f4       	brcc	.+16     	; 0x29e4 <main+0x24c>
    29d4:	82 30       	cpi	r24, 0x02	; 2
    29d6:	29 f1       	breq	.+74     	; 0x2a22 <main+0x28a>
    29d8:	08 f0       	brcs	.+2      	; 0x29dc <main+0x244>
    29da:	70 c0       	rjmp	.+224    	; 0x2abc <main+0x324>
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	09 f0       	breq	.+2      	; 0x29e2 <main+0x24a>
    29e0:	bf c1       	rjmp	.+894    	; 0x2d60 <main+0x5c8>
    29e2:	09 c0       	rjmp	.+18     	; 0x29f6 <main+0x25e>
    29e4:	86 30       	cpi	r24, 0x06	; 6
    29e6:	09 f4       	brne	.+2      	; 0x29ea <main+0x252>
    29e8:	26 c1       	rjmp	.+588    	; 0x2c36 <main+0x49e>
    29ea:	08 f4       	brcc	.+2      	; 0x29ee <main+0x256>
    29ec:	df c0       	rjmp	.+446    	; 0x2bac <main+0x414>
    29ee:	89 30       	cpi	r24, 0x09	; 9
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <main+0x25c>
    29f2:	b6 c1       	rjmp	.+876    	; 0x2d60 <main+0x5c8>
    29f4:	75 c1       	rjmp	.+746    	; 0x2ce0 <main+0x548>
				{
					case CMD_SET_TIME:
					{
						g_time.second = g_rxBuffer[2];
    29f6:	a0 e4       	ldi	r26, 0x40	; 64
    29f8:	b4 e0       	ldi	r27, 0x04	; 4
    29fa:	8c 91       	ld	r24, X
    29fc:	f8 01       	movw	r30, r16
    29fe:	80 83       	st	Z, r24
						g_time.minute = g_rxBuffer[3];
    2a00:	a1 e4       	ldi	r26, 0x41	; 65
    2a02:	b4 e0       	ldi	r27, 0x04	; 4
    2a04:	8c 91       	ld	r24, X
    2a06:	80 93 2f 04 	sts	0x042F, r24
						g_time.hour = g_rxBuffer[4];
    2a0a:	80 91 42 04 	lds	r24, 0x0442
    2a0e:	80 93 30 04 	sts	0x0430, r24
						ds1307_SetCurrentTime(&g_time);
    2a12:	c8 01       	movw	r24, r16
    2a14:	0e 94 2c 0a 	call	0x1458	; 0x1458 <ds1307_SetCurrentTime>
						
						SendAnsferAfterSetCommand(g_rxBuffer[1]);
    2a18:	f4 01       	movw	r30, r8
    2a1a:	80 81       	ld	r24, Z
    2a1c:	4e de       	rcall	.-868    	; 0x26ba <SendAnsferAfterSetCommand>
			
			if (PACKET_CRC_OK == g_packetStatus)
			{
				volatile uint8_t i = 0;
				
				currentByteNr = 0;
    2a1e:	41 2c       	mov	r4, r1
						g_time.minute = g_rxBuffer[3];
						g_time.hour = g_rxBuffer[4];
						ds1307_SetCurrentTime(&g_time);
						
						SendAnsferAfterSetCommand(g_rxBuffer[1]);
						break;
    2a20:	a0 c1       	rjmp	.+832    	; 0x2d62 <main+0x5ca>
					}
					
					case CMD_GET_TIME:
					{
						g_time = ds1307_GetCurrentTime();
    2a22:	0e 94 84 0a 	call	0x1508	; 0x1508 <ds1307_GetCurrentTime>
    2a26:	60 93 2e 04 	sts	0x042E, r22
    2a2a:	70 93 2f 04 	sts	0x042F, r23
    2a2e:	80 93 30 04 	sts	0x0430, r24
						
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	e8 2f       	mov	r30, r24
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	e1 5b       	subi	r30, 0xB1	; 177
    2a3a:	fb 4f       	sbci	r31, 0xFB	; 251
    2a3c:	20 82       	st	Z, r2
    2a3e:	8f 5f       	subi	r24, 0xFF	; 255
    2a40:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_rxBuffer[1]; // command
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	e8 2f       	mov	r30, r24
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	e1 5b       	subi	r30, 0xB1	; 177
    2a4a:	fb 4f       	sbci	r31, 0xFB	; 251
    2a4c:	d4 01       	movw	r26, r8
    2a4e:	9c 91       	ld	r25, X
    2a50:	90 83       	st	Z, r25
    2a52:	8f 5f       	subi	r24, 0xFF	; 255
    2a54:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_time.second;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	e8 2f       	mov	r30, r24
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	e1 5b       	subi	r30, 0xB1	; 177
    2a5e:	fb 4f       	sbci	r31, 0xFB	; 251
    2a60:	d8 01       	movw	r26, r16
    2a62:	9c 91       	ld	r25, X
    2a64:	90 83       	st	Z, r25
    2a66:	8f 5f       	subi	r24, 0xFF	; 255
    2a68:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_time.minute;
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	e8 2f       	mov	r30, r24
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	e1 5b       	subi	r30, 0xB1	; 177
    2a72:	fb 4f       	sbci	r31, 0xFB	; 251
    2a74:	70 83       	st	Z, r23
    2a76:	8f 5f       	subi	r24, 0xFF	; 255
    2a78:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_time.hour;
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	e8 2f       	mov	r30, r24
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	e1 5b       	subi	r30, 0xB1	; 177
    2a82:	fb 4f       	sbci	r31, 0xFB	; 251
    2a84:	90 91 30 04 	lds	r25, 0x0430
    2a88:	90 83       	st	Z, r25
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
    2a8e:	f9 80       	ldd	r15, Y+1	; 0x01
    2a90:	69 81       	ldd	r22, Y+1	; 0x01
    2a92:	8f e4       	ldi	r24, 0x4F	; 79
    2a94:	94 e0       	ldi	r25, 0x04	; 4
    2a96:	e9 dd       	rcall	.-1070   	; 0x266a <GetCrc>
    2a98:	ef 2d       	mov	r30, r15
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	e1 5b       	subi	r30, 0xB1	; 177
    2a9e:	fb 4f       	sbci	r31, 0xFB	; 251
    2aa0:	80 83       	st	Z, r24
						i++;
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	8f 5f       	subi	r24, 0xFF	; 255
    2aa6:	89 83       	std	Y+1, r24	; 0x01
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
    2aa8:	49 81       	ldd	r20, Y+1	; 0x01
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    2aac:	6f e4       	ldi	r22, 0x4F	; 79
    2aae:	74 e0       	ldi	r23, 0x04	; 4
    2ab0:	82 e1       	ldi	r24, 0x12	; 18
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <CDC_Device_SendData>
			
			if (PACKET_CRC_OK == g_packetStatus)
			{
				volatile uint8_t i = 0;
				
				currentByteNr = 0;
    2ab8:	41 2c       	mov	r4, r1
						g_txBuffer[i++] = g_time.minute;
						g_txBuffer[i++] = g_time.hour;
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
						i++;
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
						break;
    2aba:	53 c1       	rjmp	.+678    	; 0x2d62 <main+0x5ca>
					}
					
					case CMD_SET_DATE:
					{
						g_date.day = g_rxBuffer[2];
    2abc:	e0 e4       	ldi	r30, 0x40	; 64
    2abe:	f4 e0       	ldi	r31, 0x04	; 4
    2ac0:	80 81       	ld	r24, Z
    2ac2:	d3 01       	movw	r26, r6
    2ac4:	8c 93       	st	X, r24
						g_date.date = g_rxBuffer[3];
    2ac6:	e1 e4       	ldi	r30, 0x41	; 65
    2ac8:	f4 e0       	ldi	r31, 0x04	; 4
    2aca:	80 81       	ld	r24, Z
    2acc:	ab e2       	ldi	r26, 0x2B	; 43
    2ace:	b4 e0       	ldi	r27, 0x04	; 4
    2ad0:	8c 93       	st	X, r24
						g_date.month = g_rxBuffer[4];
    2ad2:	80 91 42 04 	lds	r24, 0x0442
    2ad6:	ec e2       	ldi	r30, 0x2C	; 44
    2ad8:	f4 e0       	ldi	r31, 0x04	; 4
    2ada:	80 83       	st	Z, r24
						g_date.year = g_rxBuffer[5];
    2adc:	80 91 43 04 	lds	r24, 0x0443
    2ae0:	ad e2       	ldi	r26, 0x2D	; 45
    2ae2:	b4 e0       	ldi	r27, 0x04	; 4
    2ae4:	8c 93       	st	X, r24
						ds1307_SetCurrentDate(&g_date);
    2ae6:	c3 01       	movw	r24, r6
    2ae8:	0e 94 03 0a 	call	0x1406	; 0x1406 <ds1307_SetCurrentDate>
						
						SendAnsferAfterSetCommand(g_rxBuffer[1]);
    2aec:	f4 01       	movw	r30, r8
    2aee:	80 81       	ld	r24, Z
    2af0:	e4 dd       	rcall	.-1080   	; 0x26ba <SendAnsferAfterSetCommand>
			
			if (PACKET_CRC_OK == g_packetStatus)
			{
				volatile uint8_t i = 0;
				
				currentByteNr = 0;
    2af2:	41 2c       	mov	r4, r1
						g_date.month = g_rxBuffer[4];
						g_date.year = g_rxBuffer[5];
						ds1307_SetCurrentDate(&g_date);
						
						SendAnsferAfterSetCommand(g_rxBuffer[1]);
						break;
    2af4:	36 c1       	rjmp	.+620    	; 0x2d62 <main+0x5ca>
					}
					
					case CMD_GET_DATE:
					{
						g_date = ds1307_GetCurrentDate();
    2af6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <ds1307_GetCurrentDate>
    2afa:	60 93 2a 04 	sts	0x042A, r22
    2afe:	70 93 2b 04 	sts	0x042B, r23
    2b02:	80 93 2c 04 	sts	0x042C, r24
    2b06:	90 93 2d 04 	sts	0x042D, r25
						
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	e8 2f       	mov	r30, r24
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	e1 5b       	subi	r30, 0xB1	; 177
    2b12:	fb 4f       	sbci	r31, 0xFB	; 251
    2b14:	20 82       	st	Z, r2
    2b16:	8f 5f       	subi	r24, 0xFF	; 255
    2b18:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_rxBuffer[1]; // command
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	e8 2f       	mov	r30, r24
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	e1 5b       	subi	r30, 0xB1	; 177
    2b22:	fb 4f       	sbci	r31, 0xFB	; 251
    2b24:	d4 01       	movw	r26, r8
    2b26:	9c 91       	ld	r25, X
    2b28:	90 83       	st	Z, r25
    2b2a:	8f 5f       	subi	r24, 0xFF	; 255
    2b2c:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_date.day;
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	e8 2f       	mov	r30, r24
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	e1 5b       	subi	r30, 0xB1	; 177
    2b36:	fb 4f       	sbci	r31, 0xFB	; 251
    2b38:	d3 01       	movw	r26, r6
    2b3a:	9c 91       	ld	r25, X
    2b3c:	90 83       	st	Z, r25
    2b3e:	8f 5f       	subi	r24, 0xFF	; 255
    2b40:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_date.date;
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	e8 2f       	mov	r30, r24
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	e1 5b       	subi	r30, 0xB1	; 177
    2b4a:	fb 4f       	sbci	r31, 0xFB	; 251
    2b4c:	70 83       	st	Z, r23
    2b4e:	8f 5f       	subi	r24, 0xFF	; 255
    2b50:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_date.month;
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	e8 2f       	mov	r30, r24
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	e1 5b       	subi	r30, 0xB1	; 177
    2b5a:	fb 4f       	sbci	r31, 0xFB	; 251
    2b5c:	ac e2       	ldi	r26, 0x2C	; 44
    2b5e:	b4 e0       	ldi	r27, 0x04	; 4
    2b60:	9c 91       	ld	r25, X
    2b62:	90 83       	st	Z, r25
    2b64:	8f 5f       	subi	r24, 0xFF	; 255
    2b66:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_date.year;
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	e8 2f       	mov	r30, r24
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	e1 5b       	subi	r30, 0xB1	; 177
    2b70:	fb 4f       	sbci	r31, 0xFB	; 251
    2b72:	ad e2       	ldi	r26, 0x2D	; 45
    2b74:	b4 e0       	ldi	r27, 0x04	; 4
    2b76:	9c 91       	ld	r25, X
    2b78:	90 83       	st	Z, r25
    2b7a:	8f 5f       	subi	r24, 0xFF	; 255
    2b7c:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
    2b7e:	f9 80       	ldd	r15, Y+1	; 0x01
    2b80:	69 81       	ldd	r22, Y+1	; 0x01
    2b82:	8f e4       	ldi	r24, 0x4F	; 79
    2b84:	94 e0       	ldi	r25, 0x04	; 4
    2b86:	71 dd       	rcall	.-1310   	; 0x266a <GetCrc>
    2b88:	ef 2d       	mov	r30, r15
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	e1 5b       	subi	r30, 0xB1	; 177
    2b8e:	fb 4f       	sbci	r31, 0xFB	; 251
    2b90:	80 83       	st	Z, r24
						i++;
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	8f 5f       	subi	r24, 0xFF	; 255
    2b96:	89 83       	std	Y+1, r24	; 0x01
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
    2b98:	49 81       	ldd	r20, Y+1	; 0x01
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	6f e4       	ldi	r22, 0x4F	; 79
    2b9e:	74 e0       	ldi	r23, 0x04	; 4
    2ba0:	82 e1       	ldi	r24, 0x12	; 18
    2ba2:	91 e0       	ldi	r25, 0x01	; 1
    2ba4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <CDC_Device_SendData>
			
			if (PACKET_CRC_OK == g_packetStatus)
			{
				volatile uint8_t i = 0;
				
				currentByteNr = 0;
    2ba8:	41 2c       	mov	r4, r1
						g_txBuffer[i++] = g_date.month;
						g_txBuffer[i++] = g_date.year;
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
						i++;
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
						break;
    2baa:	db c0       	rjmp	.+438    	; 0x2d62 <main+0x5ca>
					}
					
					case CMD_GET_CURR_TEMP:
					{
						ds18b20_ReadTemp(OWI_PIN_1, g_ds18b20TempValue);
    2bac:	61 e2       	ldi	r22, 0x21	; 33
    2bae:	74 e0       	ldi	r23, 0x04	; 4
    2bb0:	82 e0       	ldi	r24, 0x02	; 2
    2bb2:	0e 94 15 09 	call	0x122a	; 0x122a <ds18b20_ReadTemp>
						
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	e8 2f       	mov	r30, r24
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	e1 5b       	subi	r30, 0xB1	; 177
    2bbe:	fb 4f       	sbci	r31, 0xFB	; 251
    2bc0:	20 82       	st	Z, r2
    2bc2:	8f 5f       	subi	r24, 0xFF	; 255
    2bc4:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_rxBuffer[1]; // command
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	e8 2f       	mov	r30, r24
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	e1 5b       	subi	r30, 0xB1	; 177
    2bce:	fb 4f       	sbci	r31, 0xFB	; 251
    2bd0:	d4 01       	movw	r26, r8
    2bd2:	9c 91       	ld	r25, X
    2bd4:	90 83       	st	Z, r25
    2bd6:	8f 5f       	subi	r24, 0xFF	; 255
    2bd8:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_ds18b20TempValue[0] |= CELL_TAGGED_MASK; // valid temp just for current read
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	e1 e2       	ldi	r30, 0x21	; 33
    2bde:	f4 e0       	ldi	r31, 0x04	; 4
    2be0:	90 81       	ld	r25, Z
    2be2:	91 60       	ori	r25, 0x01	; 1
    2be4:	90 83       	st	Z, r25
    2be6:	e8 2f       	mov	r30, r24
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	e1 5b       	subi	r30, 0xB1	; 177
    2bec:	fb 4f       	sbci	r31, 0xFB	; 251
    2bee:	90 83       	st	Z, r25
    2bf0:	8f 5f       	subi	r24, 0xFF	; 255
    2bf2:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_ds18b20TempValue[1];
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	e8 2f       	mov	r30, r24
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	e1 5b       	subi	r30, 0xB1	; 177
    2bfc:	fb 4f       	sbci	r31, 0xFB	; 251
    2bfe:	d6 01       	movw	r26, r12
    2c00:	9c 91       	ld	r25, X
    2c02:	90 83       	st	Z, r25
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
    2c08:	f9 80       	ldd	r15, Y+1	; 0x01
    2c0a:	69 81       	ldd	r22, Y+1	; 0x01
    2c0c:	8f e4       	ldi	r24, 0x4F	; 79
    2c0e:	94 e0       	ldi	r25, 0x04	; 4
    2c10:	2c dd       	rcall	.-1448   	; 0x266a <GetCrc>
    2c12:	ef 2d       	mov	r30, r15
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	e1 5b       	subi	r30, 0xB1	; 177
    2c18:	fb 4f       	sbci	r31, 0xFB	; 251
    2c1a:	80 83       	st	Z, r24
						i++;
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	8f 5f       	subi	r24, 0xFF	; 255
    2c20:	89 83       	std	Y+1, r24	; 0x01
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
    2c22:	49 81       	ldd	r20, Y+1	; 0x01
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	6f e4       	ldi	r22, 0x4F	; 79
    2c28:	74 e0       	ldi	r23, 0x04	; 4
    2c2a:	82 e1       	ldi	r24, 0x12	; 18
    2c2c:	91 e0       	ldi	r25, 0x01	; 1
    2c2e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <CDC_Device_SendData>
			
			if (PACKET_CRC_OK == g_packetStatus)
			{
				volatile uint8_t i = 0;
				
				currentByteNr = 0;
    2c32:	41 2c       	mov	r4, r1
						g_txBuffer[i++] = g_ds18b20TempValue[0] |= CELL_TAGGED_MASK; // valid temp just for current read
						g_txBuffer[i++] = g_ds18b20TempValue[1];
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
						i++;
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
						break;
    2c34:	96 c0       	rjmp	.+300    	; 0x2d62 <main+0x5ca>
					}
					
					case CMD_GET_HOUR_TEMP:
					{
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	e8 2f       	mov	r30, r24
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	e1 5b       	subi	r30, 0xB1	; 177
    2c3e:	fb 4f       	sbci	r31, 0xFB	; 251
    2c40:	20 82       	st	Z, r2
    2c42:	8f 5f       	subi	r24, 0xFF	; 255
    2c44:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_rxBuffer[1]; // command
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	e8 2f       	mov	r30, r24
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	e1 5b       	subi	r30, 0xB1	; 177
    2c4e:	fb 4f       	sbci	r31, 0xFB	; 251
    2c50:	b6 e0       	ldi	r27, 0x06	; 6
    2c52:	b0 83       	st	Z, r27
    2c54:	8f 5f       	subi	r24, 0xFF	; 255
    2c56:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = (uint8_t)g_timeArray[g_rxBuffer[3]][g_rxBuffer[2] / 10];
    2c58:	29 81       	ldd	r18, Y+1	; 0x01
    2c5a:	e1 e4       	ldi	r30, 0x41	; 65
    2c5c:	f4 e0       	ldi	r31, 0x04	; 4
    2c5e:	80 81       	ld	r24, Z
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a0 e4       	ldi	r26, 0x40	; 64
    2c64:	b4 e0       	ldi	r27, 0x04	; 4
    2c66:	3c 91       	ld	r19, X
    2c68:	35 9d       	mul	r19, r5
    2c6a:	31 2d       	mov	r19, r1
    2c6c:	11 24       	eor	r1, r1
    2c6e:	36 95       	lsr	r19
    2c70:	36 95       	lsr	r19
    2c72:	36 95       	lsr	r19
    2c74:	fc 01       	movw	r30, r24
    2c76:	ee 0f       	add	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	8e 0f       	add	r24, r30
    2c7c:	9f 1f       	adc	r25, r31
    2c7e:	fc 01       	movw	r30, r24
    2c80:	ee 0f       	add	r30, r30
    2c82:	ff 1f       	adc	r31, r31
    2c84:	e3 0f       	add	r30, r19
    2c86:	f1 1d       	adc	r31, r1
    2c88:	ee 0f       	add	r30, r30
    2c8a:	ff 1f       	adc	r31, r31
    2c8c:	e7 57       	subi	r30, 0x77	; 119
    2c8e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c90:	80 81       	ld	r24, Z
    2c92:	91 81       	ldd	r25, Z+1	; 0x01
    2c94:	e2 2f       	mov	r30, r18
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	e1 5b       	subi	r30, 0xB1	; 177
    2c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    2c9c:	80 83       	st	Z, r24
    2c9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ca0:	29 83       	std	Y+1, r18	; 0x01
						g_txBuffer[i++] = (uint8_t)(g_timeArray[g_rxBuffer[3]][g_rxBuffer[2] / 10] >> 8);
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	e8 2f       	mov	r30, r24
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	e1 5b       	subi	r30, 0xB1	; 177
    2caa:	fb 4f       	sbci	r31, 0xFB	; 251
    2cac:	90 83       	st	Z, r25
    2cae:	8f 5f       	subi	r24, 0xFF	; 255
    2cb0:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
    2cb2:	f9 80       	ldd	r15, Y+1	; 0x01
    2cb4:	69 81       	ldd	r22, Y+1	; 0x01
    2cb6:	8f e4       	ldi	r24, 0x4F	; 79
    2cb8:	94 e0       	ldi	r25, 0x04	; 4
    2cba:	d7 dc       	rcall	.-1618   	; 0x266a <GetCrc>
    2cbc:	ef 2d       	mov	r30, r15
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	e1 5b       	subi	r30, 0xB1	; 177
    2cc2:	fb 4f       	sbci	r31, 0xFB	; 251
    2cc4:	80 83       	st	Z, r24
						i++;
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	8f 5f       	subi	r24, 0xFF	; 255
    2cca:	89 83       	std	Y+1, r24	; 0x01
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
    2ccc:	49 81       	ldd	r20, Y+1	; 0x01
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	6f e4       	ldi	r22, 0x4F	; 79
    2cd2:	74 e0       	ldi	r23, 0x04	; 4
    2cd4:	82 e1       	ldi	r24, 0x12	; 18
    2cd6:	91 e0       	ldi	r25, 0x01	; 1
    2cd8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <CDC_Device_SendData>
			
			if (PACKET_CRC_OK == g_packetStatus)
			{
				volatile uint8_t i = 0;
				
				currentByteNr = 0;
    2cdc:	41 2c       	mov	r4, r1
						g_txBuffer[i++] = (uint8_t)g_timeArray[g_rxBuffer[3]][g_rxBuffer[2] / 10];
						g_txBuffer[i++] = (uint8_t)(g_timeArray[g_rxBuffer[3]][g_rxBuffer[2] / 10] >> 8);
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
						i++;
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
						break;
    2cde:	41 c0       	rjmp	.+130    	; 0x2d62 <main+0x5ca>
					}
					
					case CMD_GET_DS18B20_HID:
					{
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	e8 2f       	mov	r30, r24
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	e1 5b       	subi	r30, 0xB1	; 177
    2ce8:	fb 4f       	sbci	r31, 0xFB	; 251
    2cea:	20 82       	st	Z, r2
    2cec:	8f 5f       	subi	r24, 0xFF	; 255
    2cee:	89 83       	std	Y+1, r24	; 0x01
						g_txBuffer[i++] = g_rxBuffer[1]; // command
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	e8 2f       	mov	r30, r24
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	e1 5b       	subi	r30, 0xB1	; 177
    2cf8:	fb 4f       	sbci	r31, 0xFB	; 251
    2cfa:	b9 e0       	ldi	r27, 0x09	; 9
    2cfc:	b0 83       	st	Z, r27
    2cfe:	8f 5f       	subi	r24, 0xFF	; 255
    2d00:	89 83       	std	Y+1, r24	; 0x01
						
						for (; i < 10; i++)
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	8a 30       	cpi	r24, 0x0A	; 10
    2d06:	a8 f4       	brcc	.+42     	; 0x2d32 <main+0x59a>
						{
							g_txBuffer[i] = *(g_ds18b20RomValuePointer + i -2);
    2d08:	80 91 4d 04 	lds	r24, 0x044D
    2d0c:	90 91 4e 04 	lds	r25, 0x044E
    2d10:	e9 81       	ldd	r30, Y+1	; 0x01
    2d12:	29 81       	ldd	r18, Y+1	; 0x01
    2d14:	dc 01       	movw	r26, r24
    2d16:	a2 0f       	add	r26, r18
    2d18:	b1 1d       	adc	r27, r1
    2d1a:	12 97       	sbiw	r26, 0x02	; 2
    2d1c:	2c 91       	ld	r18, X
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	e1 5b       	subi	r30, 0xB1	; 177
    2d22:	fb 4f       	sbci	r31, 0xFB	; 251
    2d24:	20 83       	st	Z, r18
					case CMD_GET_DS18B20_HID:
					{
						g_txBuffer[i++] = SYNC_BYTE; // sync byte
						g_txBuffer[i++] = g_rxBuffer[1]; // command
						
						for (; i < 10; i++)
    2d26:	29 81       	ldd	r18, Y+1	; 0x01
    2d28:	2f 5f       	subi	r18, 0xFF	; 255
    2d2a:	29 83       	std	Y+1, r18	; 0x01
    2d2c:	29 81       	ldd	r18, Y+1	; 0x01
    2d2e:	2a 30       	cpi	r18, 0x0A	; 10
    2d30:	78 f3       	brcs	.-34     	; 0x2d10 <main+0x578>
						{
							g_txBuffer[i] = *(g_ds18b20RomValuePointer + i -2);
						}
						
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
    2d32:	f9 80       	ldd	r15, Y+1	; 0x01
    2d34:	69 81       	ldd	r22, Y+1	; 0x01
    2d36:	8f e4       	ldi	r24, 0x4F	; 79
    2d38:	94 e0       	ldi	r25, 0x04	; 4
    2d3a:	97 dc       	rcall	.-1746   	; 0x266a <GetCrc>
    2d3c:	ef 2d       	mov	r30, r15
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	e1 5b       	subi	r30, 0xB1	; 177
    2d42:	fb 4f       	sbci	r31, 0xFB	; 251
    2d44:	80 83       	st	Z, r24
						i++;
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	8f 5f       	subi	r24, 0xFF	; 255
    2d4a:	89 83       	std	Y+1, r24	; 0x01
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
    2d4c:	49 81       	ldd	r20, Y+1	; 0x01
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	6f e4       	ldi	r22, 0x4F	; 79
    2d52:	74 e0       	ldi	r23, 0x04	; 4
    2d54:	82 e1       	ldi	r24, 0x12	; 18
    2d56:	91 e0       	ldi	r25, 0x01	; 1
    2d58:	0e 94 8b 0b 	call	0x1716	; 0x1716 <CDC_Device_SendData>
			
			if (PACKET_CRC_OK == g_packetStatus)
			{
				volatile uint8_t i = 0;
				
				currentByteNr = 0;
    2d5c:	41 2c       	mov	r4, r1
						}
						
						g_txBuffer[i] = GetCrc(g_txBuffer, i); // calculate crc
						i++;
						CDC_Device_SendData(&VirtualSerial_CDC_Interface, g_txBuffer, i); // send the ansfer back
						break;
    2d5e:	01 c0       	rjmp	.+2      	; 0x2d62 <main+0x5ca>
			
			if (PACKET_CRC_OK == g_packetStatus)
			{
				volatile uint8_t i = 0;
				
				currentByteNr = 0;
    2d60:	41 2c       	mov	r4, r1
	g_takeMeasureNow_Flag--;
}

static inline uint8_t GetTimeMeasure_Flag()
{
	return g_takeMeasureNow_Flag;
    2d62:	8e b3       	in	r24, 0x1e	; 30
					}
				}
			}
		}

		if(!GetTimeMeasure_Flag())
    2d64:	81 11       	cpse	r24, r1
    2d66:	18 c0       	rjmp	.+48     	; 0x2d98 <main+0x600>
		{
			g_time = ds1307_GetCurrentTime();
    2d68:	0e 94 84 0a 	call	0x1508	; 0x1508 <ds1307_GetCurrentTime>
    2d6c:	60 93 2e 04 	sts	0x042E, r22
    2d70:	70 93 2f 04 	sts	0x042F, r23
    2d74:	80 93 30 04 	sts	0x0430, r24
			g_date = ds1307_GetCurrentDate();
    2d78:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <ds1307_GetCurrentDate>
    2d7c:	60 93 2a 04 	sts	0x042A, r22
    2d80:	70 93 2b 04 	sts	0x042B, r23
    2d84:	80 93 2c 04 	sts	0x042C, r24
    2d88:	90 93 2d 04 	sts	0x042D, r25
	RX_LED_PORT |= _BV(RX_LED_P);
}

static inline void RxLedToggle()
{
	RX_LED_PORT ^= _BV(RX_LED_P);
    2d8c:	95 b1       	in	r25, 0x05	; 5
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	89 27       	eor	r24, r25
    2d92:	85 b9       	out	0x05, r24	; 5
	L_LED_PORT ^= _BV(L_LED_P);
}

static inline void SetTimeMeasure_Flag()
{
	g_takeMeasureNow_Flag = SOFT_TIMER0_PRESCALLER;
    2d94:	85 e0       	ldi	r24, 0x05	; 5
    2d96:	8e bb       	out	0x1e, r24	; 30
			RxLedToggle();
			SetTimeMeasure_Flag();
		}
		
		if (g_time.second != prevSecRead)
    2d98:	f8 01       	movw	r30, r16
    2d9a:	80 81       	ld	r24, Z
    2d9c:	83 15       	cp	r24, r3
    2d9e:	39 f0       	breq	.+14     	; 0x2dae <main+0x616>
		{
			ds18b20_ReadTemp(OWI_PIN_1, g_ds18b20TempValue);
    2da0:	61 e2       	ldi	r22, 0x21	; 33
    2da2:	74 e0       	ldi	r23, 0x04	; 4
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	0e 94 15 09 	call	0x122a	; 0x122a <ds18b20_ReadTemp>
			prevSecRead = g_time.second;
    2daa:	d8 01       	movw	r26, r16
    2dac:	3c 90       	ld	r3, X
		}
		
		if (!((g_time.minute % DATA_STORE_INTERVAL_MIN) | (g_time.second % DATA_STORE_INTERVAL_MIN)))
    2dae:	20 91 2f 04 	lds	r18, 0x042F
    2db2:	f8 01       	movw	r30, r16
    2db4:	80 81       	ld	r24, Z
    2db6:	85 9d       	mul	r24, r5
    2db8:	91 2d       	mov	r25, r1
    2dba:	11 24       	eor	r1, r1
    2dbc:	96 95       	lsr	r25
    2dbe:	96 95       	lsr	r25
    2dc0:	96 95       	lsr	r25
    2dc2:	99 0f       	add	r25, r25
    2dc4:	39 2f       	mov	r19, r25
    2dc6:	33 0f       	add	r19, r19
    2dc8:	33 0f       	add	r19, r19
    2dca:	93 0f       	add	r25, r19
    2dcc:	38 2f       	mov	r19, r24
    2dce:	39 1b       	sub	r19, r25
    2dd0:	25 9d       	mul	r18, r5
    2dd2:	81 2d       	mov	r24, r1
    2dd4:	11 24       	eor	r1, r1
    2dd6:	86 95       	lsr	r24
    2dd8:	86 95       	lsr	r24
    2dda:	86 95       	lsr	r24
    2ddc:	88 0f       	add	r24, r24
    2dde:	98 2f       	mov	r25, r24
    2de0:	99 0f       	add	r25, r25
    2de2:	99 0f       	add	r25, r25
    2de4:	89 0f       	add	r24, r25
    2de6:	92 2f       	mov	r25, r18
    2de8:	98 1b       	sub	r25, r24
    2dea:	83 2f       	mov	r24, r19
    2dec:	89 2b       	or	r24, r25
    2dee:	b1 f5       	brne	.+108    	; 0x2e5c <main+0x6c4>
		{
			if (!(g_timeArray[g_time.hour][g_time.minute / 10] & CELL_TAGGED_MASK))
    2df0:	80 91 30 04 	lds	r24, 0x0430
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	25 9d       	mul	r18, r5
    2df8:	21 2d       	mov	r18, r1
    2dfa:	11 24       	eor	r1, r1
    2dfc:	26 95       	lsr	r18
    2dfe:	26 95       	lsr	r18
    2e00:	26 95       	lsr	r18
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	fc 01       	movw	r30, r24
    2e06:	ee 0f       	add	r30, r30
    2e08:	ff 1f       	adc	r31, r31
    2e0a:	e8 0f       	add	r30, r24
    2e0c:	f9 1f       	adc	r31, r25
    2e0e:	ee 0f       	add	r30, r30
    2e10:	ff 1f       	adc	r31, r31
    2e12:	e2 0f       	add	r30, r18
    2e14:	f3 1f       	adc	r31, r19
    2e16:	ee 0f       	add	r30, r30
    2e18:	ff 1f       	adc	r31, r31
    2e1a:	e7 57       	subi	r30, 0x77	; 119
    2e1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e1e:	40 81       	ld	r20, Z
    2e20:	40 fd       	sbrc	r20, 0
    2e22:	1c c0       	rjmp	.+56     	; 0x2e5c <main+0x6c4>
			{
				g_timeArray[g_time.hour][g_time.minute / 10] = g_ds18b20TempValue[0] | (g_ds18b20TempValue[1] << 8);
    2e24:	40 91 21 04 	lds	r20, 0x0421
				g_timeArray[g_time.hour][g_time.minute / 10] |= CELL_TAGGED_MASK;
    2e28:	fc 01       	movw	r30, r24
    2e2a:	ee 0f       	add	r30, r30
    2e2c:	ff 1f       	adc	r31, r31
    2e2e:	8e 0f       	add	r24, r30
    2e30:	9f 1f       	adc	r25, r31
    2e32:	fc 01       	movw	r30, r24
    2e34:	ee 0f       	add	r30, r30
    2e36:	ff 1f       	adc	r31, r31
    2e38:	2e 0f       	add	r18, r30
    2e3a:	3f 1f       	adc	r19, r31
    2e3c:	f9 01       	movw	r30, r18
    2e3e:	ee 0f       	add	r30, r30
    2e40:	ff 1f       	adc	r31, r31
    2e42:	e7 57       	subi	r30, 0x77	; 119
    2e44:	fd 4f       	sbci	r31, 0xFD	; 253
		
		if (!((g_time.minute % DATA_STORE_INTERVAL_MIN) | (g_time.second % DATA_STORE_INTERVAL_MIN)))
		{
			if (!(g_timeArray[g_time.hour][g_time.minute / 10] & CELL_TAGGED_MASK))
			{
				g_timeArray[g_time.hour][g_time.minute / 10] = g_ds18b20TempValue[0] | (g_ds18b20TempValue[1] << 8);
    2e46:	84 2f       	mov	r24, r20
    2e48:	81 60       	ori	r24, 0x01	; 1
    2e4a:	d6 01       	movw	r26, r12
    2e4c:	bc 90       	ld	r11, X
    2e4e:	a1 2c       	mov	r10, r1
				g_timeArray[g_time.hour][g_time.minute / 10] |= CELL_TAGGED_MASK;
    2e50:	95 01       	movw	r18, r10
    2e52:	28 2b       	or	r18, r24
    2e54:	c9 01       	movw	r24, r18
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
				NOP();
    2e5a:	00 00       	nop
			}
		}
		
		ButtonsTimeChange();
    2e5c:	40 dc       	rcall	.-1920   	; 0x26de <ButtonsTimeChange>
		
		BARREL_EVENT(1);	// zdarzenie obs³ugi warstw LCD i procesów
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	0e 94 c2 01 	call	0x384	; 0x384 <BARREL_EVENT>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    2e64:	82 e1       	ldi	r24, 0x12	; 18
    2e66:	91 e0       	ldi	r25, 0x01	; 1
    2e68:	0e 94 18 0c 	call	0x1830	; 0x1830 <CDC_Device_USBTask>
		USB_USBTask();
    2e6c:	b6 db       	rcall	.-2196   	; 0x25da <USB_USBTask>
	} // end while
    2e6e:	29 cd       	rjmp	.-1454   	; 0x28c2 <main+0x12a>
					g_packetStatus = PACKET_UNINITIALISED;
					g_nrOfBytes2Receive = DEFAULT_NR_OF_BYTES;
				}
			}
			
			if (PACKET_SYNCED == g_packetStatus)
    2e70:	80 91 4a 02 	lds	r24, 0x024A
    2e74:	a3 cd       	rjmp	.-1210   	; 0x29bc <main+0x224>

00002e76 <__udivmodhi4>:
    2e76:	aa 1b       	sub	r26, r26
    2e78:	bb 1b       	sub	r27, r27
    2e7a:	51 e1       	ldi	r21, 0x11	; 17
    2e7c:	07 c0       	rjmp	.+14     	; 0x2e8c <__udivmodhi4_ep>

00002e7e <__udivmodhi4_loop>:
    2e7e:	aa 1f       	adc	r26, r26
    2e80:	bb 1f       	adc	r27, r27
    2e82:	a6 17       	cp	r26, r22
    2e84:	b7 07       	cpc	r27, r23
    2e86:	10 f0       	brcs	.+4      	; 0x2e8c <__udivmodhi4_ep>
    2e88:	a6 1b       	sub	r26, r22
    2e8a:	b7 0b       	sbc	r27, r23

00002e8c <__udivmodhi4_ep>:
    2e8c:	88 1f       	adc	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	5a 95       	dec	r21
    2e92:	a9 f7       	brne	.-22     	; 0x2e7e <__udivmodhi4_loop>
    2e94:	80 95       	com	r24
    2e96:	90 95       	com	r25
    2e98:	bc 01       	movw	r22, r24
    2e9a:	cd 01       	movw	r24, r26
    2e9c:	08 95       	ret

00002e9e <__ashldi3>:
    2e9e:	0f 93       	push	r16
    2ea0:	0f 73       	andi	r16, 0x3F	; 63
    2ea2:	51 f0       	breq	.+20     	; 0x2eb8 <__ashldi3+0x1a>
    2ea4:	22 0f       	add	r18, r18
    2ea6:	33 1f       	adc	r19, r19
    2ea8:	44 1f       	adc	r20, r20
    2eaa:	55 1f       	adc	r21, r21
    2eac:	66 1f       	adc	r22, r22
    2eae:	77 1f       	adc	r23, r23
    2eb0:	88 1f       	adc	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	0a 95       	dec	r16
    2eb6:	b1 f7       	brne	.-20     	; 0x2ea4 <__ashldi3+0x6>
    2eb8:	0f 91       	pop	r16
    2eba:	08 95       	ret

00002ebc <__adddi3>:
    2ebc:	2a 0d       	add	r18, r10
    2ebe:	3b 1d       	adc	r19, r11
    2ec0:	4c 1d       	adc	r20, r12
    2ec2:	5d 1d       	adc	r21, r13
    2ec4:	6e 1d       	adc	r22, r14
    2ec6:	7f 1d       	adc	r23, r15
    2ec8:	80 1f       	adc	r24, r16
    2eca:	91 1f       	adc	r25, r17
    2ecc:	08 95       	ret

00002ece <memset>:
    2ece:	dc 01       	movw	r26, r24
    2ed0:	01 c0       	rjmp	.+2      	; 0x2ed4 <memset+0x6>
    2ed2:	6d 93       	st	X+, r22
    2ed4:	41 50       	subi	r20, 0x01	; 1
    2ed6:	50 40       	sbci	r21, 0x00	; 0
    2ed8:	e0 f7       	brcc	.-8      	; 0x2ed2 <memset+0x4>
    2eda:	08 95       	ret

00002edc <sprintf>:
    2edc:	ae e0       	ldi	r26, 0x0E	; 14
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	e3 e7       	ldi	r30, 0x73	; 115
    2ee2:	f7 e1       	ldi	r31, 0x17	; 23
    2ee4:	95 c2       	rjmp	.+1322   	; 0x3410 <__prologue_saves__+0x1c>
    2ee6:	0d 89       	ldd	r16, Y+21	; 0x15
    2ee8:	1e 89       	ldd	r17, Y+22	; 0x16
    2eea:	86 e0       	ldi	r24, 0x06	; 6
    2eec:	8c 83       	std	Y+4, r24	; 0x04
    2eee:	1a 83       	std	Y+2, r17	; 0x02
    2ef0:	09 83       	std	Y+1, r16	; 0x01
    2ef2:	8f ef       	ldi	r24, 0xFF	; 255
    2ef4:	9f e7       	ldi	r25, 0x7F	; 127
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
    2efa:	ce 01       	movw	r24, r28
    2efc:	49 96       	adiw	r24, 0x19	; 25
    2efe:	ac 01       	movw	r20, r24
    2f00:	6f 89       	ldd	r22, Y+23	; 0x17
    2f02:	78 8d       	ldd	r23, Y+24	; 0x18
    2f04:	ce 01       	movw	r24, r28
    2f06:	01 96       	adiw	r24, 0x01	; 1
    2f08:	08 d0       	rcall	.+16     	; 0x2f1a <vfprintf>
    2f0a:	ef 81       	ldd	r30, Y+7	; 0x07
    2f0c:	f8 85       	ldd	r31, Y+8	; 0x08
    2f0e:	e0 0f       	add	r30, r16
    2f10:	f1 1f       	adc	r31, r17
    2f12:	10 82       	st	Z, r1
    2f14:	2e 96       	adiw	r28, 0x0e	; 14
    2f16:	e4 e0       	ldi	r30, 0x04	; 4
    2f18:	97 c2       	rjmp	.+1326   	; 0x3448 <__epilogue_restores__+0x1c>

00002f1a <vfprintf>:
    2f1a:	ac e0       	ldi	r26, 0x0C	; 12
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	e2 e9       	ldi	r30, 0x92	; 146
    2f20:	f7 e1       	ldi	r31, 0x17	; 23
    2f22:	68 c2       	rjmp	.+1232   	; 0x33f4 <__prologue_saves__>
    2f24:	7c 01       	movw	r14, r24
    2f26:	6b 01       	movw	r12, r22
    2f28:	8a 01       	movw	r16, r20
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	17 82       	std	Z+7, r1	; 0x07
    2f2e:	16 82       	std	Z+6, r1	; 0x06
    2f30:	83 81       	ldd	r24, Z+3	; 0x03
    2f32:	81 ff       	sbrs	r24, 1
    2f34:	b9 c1       	rjmp	.+882    	; 0x32a8 <vfprintf+0x38e>
    2f36:	88 24       	eor	r8, r8
    2f38:	83 94       	inc	r8
    2f3a:	91 2c       	mov	r9, r1
    2f3c:	8c 0e       	add	r8, r28
    2f3e:	9d 1e       	adc	r9, r29
    2f40:	f7 01       	movw	r30, r14
    2f42:	93 81       	ldd	r25, Z+3	; 0x03
    2f44:	f6 01       	movw	r30, r12
    2f46:	93 fd       	sbrc	r25, 3
    2f48:	85 91       	lpm	r24, Z+
    2f4a:	93 ff       	sbrs	r25, 3
    2f4c:	81 91       	ld	r24, Z+
    2f4e:	6f 01       	movw	r12, r30
    2f50:	88 23       	and	r24, r24
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <vfprintf+0x3c>
    2f54:	a5 c1       	rjmp	.+842    	; 0x32a0 <vfprintf+0x386>
    2f56:	85 32       	cpi	r24, 0x25	; 37
    2f58:	39 f4       	brne	.+14     	; 0x2f68 <vfprintf+0x4e>
    2f5a:	93 fd       	sbrc	r25, 3
    2f5c:	85 91       	lpm	r24, Z+
    2f5e:	93 ff       	sbrs	r25, 3
    2f60:	81 91       	ld	r24, Z+
    2f62:	6f 01       	movw	r12, r30
    2f64:	85 32       	cpi	r24, 0x25	; 37
    2f66:	21 f4       	brne	.+8      	; 0x2f70 <vfprintf+0x56>
    2f68:	b7 01       	movw	r22, r14
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	b9 d1       	rcall	.+882    	; 0x32e0 <fputc>
    2f6e:	e8 cf       	rjmp	.-48     	; 0x2f40 <vfprintf+0x26>
    2f70:	51 2c       	mov	r5, r1
    2f72:	31 2c       	mov	r3, r1
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	20 32       	cpi	r18, 0x20	; 32
    2f78:	a8 f4       	brcc	.+42     	; 0x2fa4 <vfprintf+0x8a>
    2f7a:	8b 32       	cpi	r24, 0x2B	; 43
    2f7c:	61 f0       	breq	.+24     	; 0x2f96 <vfprintf+0x7c>
    2f7e:	28 f4       	brcc	.+10     	; 0x2f8a <vfprintf+0x70>
    2f80:	80 32       	cpi	r24, 0x20	; 32
    2f82:	51 f0       	breq	.+20     	; 0x2f98 <vfprintf+0x7e>
    2f84:	83 32       	cpi	r24, 0x23	; 35
    2f86:	71 f4       	brne	.+28     	; 0x2fa4 <vfprintf+0x8a>
    2f88:	0b c0       	rjmp	.+22     	; 0x2fa0 <vfprintf+0x86>
    2f8a:	8d 32       	cpi	r24, 0x2D	; 45
    2f8c:	39 f0       	breq	.+14     	; 0x2f9c <vfprintf+0x82>
    2f8e:	80 33       	cpi	r24, 0x30	; 48
    2f90:	49 f4       	brne	.+18     	; 0x2fa4 <vfprintf+0x8a>
    2f92:	21 60       	ori	r18, 0x01	; 1
    2f94:	28 c0       	rjmp	.+80     	; 0x2fe6 <vfprintf+0xcc>
    2f96:	22 60       	ori	r18, 0x02	; 2
    2f98:	24 60       	ori	r18, 0x04	; 4
    2f9a:	25 c0       	rjmp	.+74     	; 0x2fe6 <vfprintf+0xcc>
    2f9c:	28 60       	ori	r18, 0x08	; 8
    2f9e:	23 c0       	rjmp	.+70     	; 0x2fe6 <vfprintf+0xcc>
    2fa0:	20 61       	ori	r18, 0x10	; 16
    2fa2:	21 c0       	rjmp	.+66     	; 0x2fe6 <vfprintf+0xcc>
    2fa4:	27 fd       	sbrc	r18, 7
    2fa6:	27 c0       	rjmp	.+78     	; 0x2ff6 <vfprintf+0xdc>
    2fa8:	38 2f       	mov	r19, r24
    2faa:	30 53       	subi	r19, 0x30	; 48
    2fac:	3a 30       	cpi	r19, 0x0A	; 10
    2fae:	78 f4       	brcc	.+30     	; 0x2fce <vfprintf+0xb4>
    2fb0:	26 ff       	sbrs	r18, 6
    2fb2:	06 c0       	rjmp	.+12     	; 0x2fc0 <vfprintf+0xa6>
    2fb4:	fa e0       	ldi	r31, 0x0A	; 10
    2fb6:	5f 9e       	mul	r5, r31
    2fb8:	30 0d       	add	r19, r0
    2fba:	11 24       	eor	r1, r1
    2fbc:	53 2e       	mov	r5, r19
    2fbe:	13 c0       	rjmp	.+38     	; 0x2fe6 <vfprintf+0xcc>
    2fc0:	8a e0       	ldi	r24, 0x0A	; 10
    2fc2:	38 9e       	mul	r3, r24
    2fc4:	30 0d       	add	r19, r0
    2fc6:	11 24       	eor	r1, r1
    2fc8:	33 2e       	mov	r3, r19
    2fca:	20 62       	ori	r18, 0x20	; 32
    2fcc:	0c c0       	rjmp	.+24     	; 0x2fe6 <vfprintf+0xcc>
    2fce:	8e 32       	cpi	r24, 0x2E	; 46
    2fd0:	21 f4       	brne	.+8      	; 0x2fda <vfprintf+0xc0>
    2fd2:	26 fd       	sbrc	r18, 6
    2fd4:	65 c1       	rjmp	.+714    	; 0x32a0 <vfprintf+0x386>
    2fd6:	20 64       	ori	r18, 0x40	; 64
    2fd8:	06 c0       	rjmp	.+12     	; 0x2fe6 <vfprintf+0xcc>
    2fda:	8c 36       	cpi	r24, 0x6C	; 108
    2fdc:	11 f4       	brne	.+4      	; 0x2fe2 <vfprintf+0xc8>
    2fde:	20 68       	ori	r18, 0x80	; 128
    2fe0:	02 c0       	rjmp	.+4      	; 0x2fe6 <vfprintf+0xcc>
    2fe2:	88 36       	cpi	r24, 0x68	; 104
    2fe4:	41 f4       	brne	.+16     	; 0x2ff6 <vfprintf+0xdc>
    2fe6:	f6 01       	movw	r30, r12
    2fe8:	93 fd       	sbrc	r25, 3
    2fea:	85 91       	lpm	r24, Z+
    2fec:	93 ff       	sbrs	r25, 3
    2fee:	81 91       	ld	r24, Z+
    2ff0:	6f 01       	movw	r12, r30
    2ff2:	81 11       	cpse	r24, r1
    2ff4:	c0 cf       	rjmp	.-128    	; 0x2f76 <vfprintf+0x5c>
    2ff6:	98 2f       	mov	r25, r24
    2ff8:	95 54       	subi	r25, 0x45	; 69
    2ffa:	93 30       	cpi	r25, 0x03	; 3
    2ffc:	18 f0       	brcs	.+6      	; 0x3004 <vfprintf+0xea>
    2ffe:	90 52       	subi	r25, 0x20	; 32
    3000:	93 30       	cpi	r25, 0x03	; 3
    3002:	28 f4       	brcc	.+10     	; 0x300e <vfprintf+0xf4>
    3004:	0c 5f       	subi	r16, 0xFC	; 252
    3006:	1f 4f       	sbci	r17, 0xFF	; 255
    3008:	ff e3       	ldi	r31, 0x3F	; 63
    300a:	f9 83       	std	Y+1, r31	; 0x01
    300c:	0d c0       	rjmp	.+26     	; 0x3028 <vfprintf+0x10e>
    300e:	83 36       	cpi	r24, 0x63	; 99
    3010:	31 f0       	breq	.+12     	; 0x301e <vfprintf+0x104>
    3012:	83 37       	cpi	r24, 0x73	; 115
    3014:	71 f0       	breq	.+28     	; 0x3032 <vfprintf+0x118>
    3016:	83 35       	cpi	r24, 0x53	; 83
    3018:	09 f0       	breq	.+2      	; 0x301c <vfprintf+0x102>
    301a:	5a c0       	rjmp	.+180    	; 0x30d0 <vfprintf+0x1b6>
    301c:	22 c0       	rjmp	.+68     	; 0x3062 <vfprintf+0x148>
    301e:	f8 01       	movw	r30, r16
    3020:	80 81       	ld	r24, Z
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	0e 5f       	subi	r16, 0xFE	; 254
    3026:	1f 4f       	sbci	r17, 0xFF	; 255
    3028:	44 24       	eor	r4, r4
    302a:	43 94       	inc	r4
    302c:	51 2c       	mov	r5, r1
    302e:	54 01       	movw	r10, r8
    3030:	14 c0       	rjmp	.+40     	; 0x305a <vfprintf+0x140>
    3032:	38 01       	movw	r6, r16
    3034:	f2 e0       	ldi	r31, 0x02	; 2
    3036:	6f 0e       	add	r6, r31
    3038:	71 1c       	adc	r7, r1
    303a:	f8 01       	movw	r30, r16
    303c:	a0 80       	ld	r10, Z
    303e:	b1 80       	ldd	r11, Z+1	; 0x01
    3040:	26 ff       	sbrs	r18, 6
    3042:	03 c0       	rjmp	.+6      	; 0x304a <vfprintf+0x130>
    3044:	65 2d       	mov	r22, r5
    3046:	70 e0       	ldi	r23, 0x00	; 0
    3048:	02 c0       	rjmp	.+4      	; 0x304e <vfprintf+0x134>
    304a:	6f ef       	ldi	r22, 0xFF	; 255
    304c:	7f ef       	ldi	r23, 0xFF	; 255
    304e:	c5 01       	movw	r24, r10
    3050:	2c 87       	std	Y+12, r18	; 0x0c
    3052:	3b d1       	rcall	.+630    	; 0x32ca <strnlen>
    3054:	2c 01       	movw	r4, r24
    3056:	83 01       	movw	r16, r6
    3058:	2c 85       	ldd	r18, Y+12	; 0x0c
    305a:	6f e7       	ldi	r22, 0x7F	; 127
    305c:	26 2e       	mov	r2, r22
    305e:	22 22       	and	r2, r18
    3060:	17 c0       	rjmp	.+46     	; 0x3090 <vfprintf+0x176>
    3062:	38 01       	movw	r6, r16
    3064:	f2 e0       	ldi	r31, 0x02	; 2
    3066:	6f 0e       	add	r6, r31
    3068:	71 1c       	adc	r7, r1
    306a:	f8 01       	movw	r30, r16
    306c:	a0 80       	ld	r10, Z
    306e:	b1 80       	ldd	r11, Z+1	; 0x01
    3070:	26 ff       	sbrs	r18, 6
    3072:	03 c0       	rjmp	.+6      	; 0x307a <vfprintf+0x160>
    3074:	65 2d       	mov	r22, r5
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	02 c0       	rjmp	.+4      	; 0x307e <vfprintf+0x164>
    307a:	6f ef       	ldi	r22, 0xFF	; 255
    307c:	7f ef       	ldi	r23, 0xFF	; 255
    307e:	c5 01       	movw	r24, r10
    3080:	2c 87       	std	Y+12, r18	; 0x0c
    3082:	18 d1       	rcall	.+560    	; 0x32b4 <strnlen_P>
    3084:	2c 01       	movw	r4, r24
    3086:	2c 85       	ldd	r18, Y+12	; 0x0c
    3088:	50 e8       	ldi	r21, 0x80	; 128
    308a:	25 2e       	mov	r2, r21
    308c:	22 2a       	or	r2, r18
    308e:	83 01       	movw	r16, r6
    3090:	23 fc       	sbrc	r2, 3
    3092:	1a c0       	rjmp	.+52     	; 0x30c8 <vfprintf+0x1ae>
    3094:	05 c0       	rjmp	.+10     	; 0x30a0 <vfprintf+0x186>
    3096:	b7 01       	movw	r22, r14
    3098:	80 e2       	ldi	r24, 0x20	; 32
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	21 d1       	rcall	.+578    	; 0x32e0 <fputc>
    309e:	3a 94       	dec	r3
    30a0:	83 2d       	mov	r24, r3
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	48 16       	cp	r4, r24
    30a6:	59 06       	cpc	r5, r25
    30a8:	b0 f3       	brcs	.-20     	; 0x3096 <vfprintf+0x17c>
    30aa:	0e c0       	rjmp	.+28     	; 0x30c8 <vfprintf+0x1ae>
    30ac:	f5 01       	movw	r30, r10
    30ae:	27 fc       	sbrc	r2, 7
    30b0:	85 91       	lpm	r24, Z+
    30b2:	27 fe       	sbrs	r2, 7
    30b4:	81 91       	ld	r24, Z+
    30b6:	5f 01       	movw	r10, r30
    30b8:	b7 01       	movw	r22, r14
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	11 d1       	rcall	.+546    	; 0x32e0 <fputc>
    30be:	31 10       	cpse	r3, r1
    30c0:	3a 94       	dec	r3
    30c2:	f1 e0       	ldi	r31, 0x01	; 1
    30c4:	4f 1a       	sub	r4, r31
    30c6:	51 08       	sbc	r5, r1
    30c8:	41 14       	cp	r4, r1
    30ca:	51 04       	cpc	r5, r1
    30cc:	79 f7       	brne	.-34     	; 0x30ac <vfprintf+0x192>
    30ce:	e5 c0       	rjmp	.+458    	; 0x329a <vfprintf+0x380>
    30d0:	84 36       	cpi	r24, 0x64	; 100
    30d2:	11 f0       	breq	.+4      	; 0x30d8 <vfprintf+0x1be>
    30d4:	89 36       	cpi	r24, 0x69	; 105
    30d6:	39 f5       	brne	.+78     	; 0x3126 <vfprintf+0x20c>
    30d8:	f8 01       	movw	r30, r16
    30da:	27 ff       	sbrs	r18, 7
    30dc:	07 c0       	rjmp	.+14     	; 0x30ec <vfprintf+0x1d2>
    30de:	60 81       	ld	r22, Z
    30e0:	71 81       	ldd	r23, Z+1	; 0x01
    30e2:	82 81       	ldd	r24, Z+2	; 0x02
    30e4:	93 81       	ldd	r25, Z+3	; 0x03
    30e6:	0c 5f       	subi	r16, 0xFC	; 252
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	08 c0       	rjmp	.+16     	; 0x30fc <vfprintf+0x1e2>
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	88 27       	eor	r24, r24
    30f2:	77 fd       	sbrc	r23, 7
    30f4:	80 95       	com	r24
    30f6:	98 2f       	mov	r25, r24
    30f8:	0e 5f       	subi	r16, 0xFE	; 254
    30fa:	1f 4f       	sbci	r17, 0xFF	; 255
    30fc:	4f e6       	ldi	r20, 0x6F	; 111
    30fe:	b4 2e       	mov	r11, r20
    3100:	b2 22       	and	r11, r18
    3102:	97 ff       	sbrs	r25, 7
    3104:	09 c0       	rjmp	.+18     	; 0x3118 <vfprintf+0x1fe>
    3106:	90 95       	com	r25
    3108:	80 95       	com	r24
    310a:	70 95       	com	r23
    310c:	61 95       	neg	r22
    310e:	7f 4f       	sbci	r23, 0xFF	; 255
    3110:	8f 4f       	sbci	r24, 0xFF	; 255
    3112:	9f 4f       	sbci	r25, 0xFF	; 255
    3114:	f0 e8       	ldi	r31, 0x80	; 128
    3116:	bf 2a       	or	r11, r31
    3118:	2a e0       	ldi	r18, 0x0A	; 10
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	a4 01       	movw	r20, r8
    311e:	0c d1       	rcall	.+536    	; 0x3338 <__ultoa_invert>
    3120:	a8 2e       	mov	r10, r24
    3122:	a8 18       	sub	r10, r8
    3124:	42 c0       	rjmp	.+132    	; 0x31aa <vfprintf+0x290>
    3126:	85 37       	cpi	r24, 0x75	; 117
    3128:	31 f4       	brne	.+12     	; 0x3136 <vfprintf+0x21c>
    312a:	3f ee       	ldi	r19, 0xEF	; 239
    312c:	b3 2e       	mov	r11, r19
    312e:	b2 22       	and	r11, r18
    3130:	2a e0       	ldi	r18, 0x0A	; 10
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	24 c0       	rjmp	.+72     	; 0x317e <vfprintf+0x264>
    3136:	99 ef       	ldi	r25, 0xF9	; 249
    3138:	b9 2e       	mov	r11, r25
    313a:	b2 22       	and	r11, r18
    313c:	8f 36       	cpi	r24, 0x6F	; 111
    313e:	b9 f0       	breq	.+46     	; 0x316e <vfprintf+0x254>
    3140:	20 f4       	brcc	.+8      	; 0x314a <vfprintf+0x230>
    3142:	88 35       	cpi	r24, 0x58	; 88
    3144:	09 f0       	breq	.+2      	; 0x3148 <vfprintf+0x22e>
    3146:	ac c0       	rjmp	.+344    	; 0x32a0 <vfprintf+0x386>
    3148:	0d c0       	rjmp	.+26     	; 0x3164 <vfprintf+0x24a>
    314a:	80 37       	cpi	r24, 0x70	; 112
    314c:	21 f0       	breq	.+8      	; 0x3156 <vfprintf+0x23c>
    314e:	88 37       	cpi	r24, 0x78	; 120
    3150:	09 f0       	breq	.+2      	; 0x3154 <vfprintf+0x23a>
    3152:	a6 c0       	rjmp	.+332    	; 0x32a0 <vfprintf+0x386>
    3154:	02 c0       	rjmp	.+4      	; 0x315a <vfprintf+0x240>
    3156:	20 e1       	ldi	r18, 0x10	; 16
    3158:	b2 2a       	or	r11, r18
    315a:	b4 fe       	sbrs	r11, 4
    315c:	0b c0       	rjmp	.+22     	; 0x3174 <vfprintf+0x25a>
    315e:	84 e0       	ldi	r24, 0x04	; 4
    3160:	b8 2a       	or	r11, r24
    3162:	08 c0       	rjmp	.+16     	; 0x3174 <vfprintf+0x25a>
    3164:	24 ff       	sbrs	r18, 4
    3166:	09 c0       	rjmp	.+18     	; 0x317a <vfprintf+0x260>
    3168:	e6 e0       	ldi	r30, 0x06	; 6
    316a:	be 2a       	or	r11, r30
    316c:	06 c0       	rjmp	.+12     	; 0x317a <vfprintf+0x260>
    316e:	28 e0       	ldi	r18, 0x08	; 8
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	05 c0       	rjmp	.+10     	; 0x317e <vfprintf+0x264>
    3174:	20 e1       	ldi	r18, 0x10	; 16
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	02 c0       	rjmp	.+4      	; 0x317e <vfprintf+0x264>
    317a:	20 e1       	ldi	r18, 0x10	; 16
    317c:	32 e0       	ldi	r19, 0x02	; 2
    317e:	f8 01       	movw	r30, r16
    3180:	b7 fe       	sbrs	r11, 7
    3182:	07 c0       	rjmp	.+14     	; 0x3192 <vfprintf+0x278>
    3184:	60 81       	ld	r22, Z
    3186:	71 81       	ldd	r23, Z+1	; 0x01
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	0c 5f       	subi	r16, 0xFC	; 252
    318e:	1f 4f       	sbci	r17, 0xFF	; 255
    3190:	06 c0       	rjmp	.+12     	; 0x319e <vfprintf+0x284>
    3192:	60 81       	ld	r22, Z
    3194:	71 81       	ldd	r23, Z+1	; 0x01
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 5f       	subi	r16, 0xFE	; 254
    319c:	1f 4f       	sbci	r17, 0xFF	; 255
    319e:	a4 01       	movw	r20, r8
    31a0:	cb d0       	rcall	.+406    	; 0x3338 <__ultoa_invert>
    31a2:	a8 2e       	mov	r10, r24
    31a4:	a8 18       	sub	r10, r8
    31a6:	ff e7       	ldi	r31, 0x7F	; 127
    31a8:	bf 22       	and	r11, r31
    31aa:	b6 fe       	sbrs	r11, 6
    31ac:	0b c0       	rjmp	.+22     	; 0x31c4 <vfprintf+0x2aa>
    31ae:	2b 2d       	mov	r18, r11
    31b0:	2e 7f       	andi	r18, 0xFE	; 254
    31b2:	a5 14       	cp	r10, r5
    31b4:	50 f4       	brcc	.+20     	; 0x31ca <vfprintf+0x2b0>
    31b6:	b4 fe       	sbrs	r11, 4
    31b8:	0a c0       	rjmp	.+20     	; 0x31ce <vfprintf+0x2b4>
    31ba:	b2 fc       	sbrc	r11, 2
    31bc:	08 c0       	rjmp	.+16     	; 0x31ce <vfprintf+0x2b4>
    31be:	2b 2d       	mov	r18, r11
    31c0:	2e 7e       	andi	r18, 0xEE	; 238
    31c2:	05 c0       	rjmp	.+10     	; 0x31ce <vfprintf+0x2b4>
    31c4:	7a 2c       	mov	r7, r10
    31c6:	2b 2d       	mov	r18, r11
    31c8:	03 c0       	rjmp	.+6      	; 0x31d0 <vfprintf+0x2b6>
    31ca:	7a 2c       	mov	r7, r10
    31cc:	01 c0       	rjmp	.+2      	; 0x31d0 <vfprintf+0x2b6>
    31ce:	75 2c       	mov	r7, r5
    31d0:	24 ff       	sbrs	r18, 4
    31d2:	0d c0       	rjmp	.+26     	; 0x31ee <vfprintf+0x2d4>
    31d4:	fe 01       	movw	r30, r28
    31d6:	ea 0d       	add	r30, r10
    31d8:	f1 1d       	adc	r31, r1
    31da:	80 81       	ld	r24, Z
    31dc:	80 33       	cpi	r24, 0x30	; 48
    31de:	11 f4       	brne	.+4      	; 0x31e4 <vfprintf+0x2ca>
    31e0:	29 7e       	andi	r18, 0xE9	; 233
    31e2:	09 c0       	rjmp	.+18     	; 0x31f6 <vfprintf+0x2dc>
    31e4:	22 ff       	sbrs	r18, 2
    31e6:	06 c0       	rjmp	.+12     	; 0x31f4 <vfprintf+0x2da>
    31e8:	73 94       	inc	r7
    31ea:	73 94       	inc	r7
    31ec:	04 c0       	rjmp	.+8      	; 0x31f6 <vfprintf+0x2dc>
    31ee:	82 2f       	mov	r24, r18
    31f0:	86 78       	andi	r24, 0x86	; 134
    31f2:	09 f0       	breq	.+2      	; 0x31f6 <vfprintf+0x2dc>
    31f4:	73 94       	inc	r7
    31f6:	23 fd       	sbrc	r18, 3
    31f8:	13 c0       	rjmp	.+38     	; 0x3220 <vfprintf+0x306>
    31fa:	20 ff       	sbrs	r18, 0
    31fc:	0e c0       	rjmp	.+28     	; 0x321a <vfprintf+0x300>
    31fe:	5a 2c       	mov	r5, r10
    3200:	73 14       	cp	r7, r3
    3202:	58 f4       	brcc	.+22     	; 0x321a <vfprintf+0x300>
    3204:	53 0c       	add	r5, r3
    3206:	57 18       	sub	r5, r7
    3208:	73 2c       	mov	r7, r3
    320a:	07 c0       	rjmp	.+14     	; 0x321a <vfprintf+0x300>
    320c:	b7 01       	movw	r22, r14
    320e:	80 e2       	ldi	r24, 0x20	; 32
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	2c 87       	std	Y+12, r18	; 0x0c
    3214:	65 d0       	rcall	.+202    	; 0x32e0 <fputc>
    3216:	73 94       	inc	r7
    3218:	2c 85       	ldd	r18, Y+12	; 0x0c
    321a:	73 14       	cp	r7, r3
    321c:	b8 f3       	brcs	.-18     	; 0x320c <vfprintf+0x2f2>
    321e:	04 c0       	rjmp	.+8      	; 0x3228 <vfprintf+0x30e>
    3220:	73 14       	cp	r7, r3
    3222:	10 f4       	brcc	.+4      	; 0x3228 <vfprintf+0x30e>
    3224:	37 18       	sub	r3, r7
    3226:	01 c0       	rjmp	.+2      	; 0x322a <vfprintf+0x310>
    3228:	31 2c       	mov	r3, r1
    322a:	24 ff       	sbrs	r18, 4
    322c:	11 c0       	rjmp	.+34     	; 0x3250 <vfprintf+0x336>
    322e:	b7 01       	movw	r22, r14
    3230:	80 e3       	ldi	r24, 0x30	; 48
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	2c 87       	std	Y+12, r18	; 0x0c
    3236:	54 d0       	rcall	.+168    	; 0x32e0 <fputc>
    3238:	2c 85       	ldd	r18, Y+12	; 0x0c
    323a:	22 ff       	sbrs	r18, 2
    323c:	1c c0       	rjmp	.+56     	; 0x3276 <vfprintf+0x35c>
    323e:	21 ff       	sbrs	r18, 1
    3240:	03 c0       	rjmp	.+6      	; 0x3248 <vfprintf+0x32e>
    3242:	88 e5       	ldi	r24, 0x58	; 88
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	02 c0       	rjmp	.+4      	; 0x324c <vfprintf+0x332>
    3248:	88 e7       	ldi	r24, 0x78	; 120
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	b7 01       	movw	r22, r14
    324e:	0c c0       	rjmp	.+24     	; 0x3268 <vfprintf+0x34e>
    3250:	82 2f       	mov	r24, r18
    3252:	86 78       	andi	r24, 0x86	; 134
    3254:	81 f0       	breq	.+32     	; 0x3276 <vfprintf+0x35c>
    3256:	21 fd       	sbrc	r18, 1
    3258:	02 c0       	rjmp	.+4      	; 0x325e <vfprintf+0x344>
    325a:	80 e2       	ldi	r24, 0x20	; 32
    325c:	01 c0       	rjmp	.+2      	; 0x3260 <vfprintf+0x346>
    325e:	8b e2       	ldi	r24, 0x2B	; 43
    3260:	27 fd       	sbrc	r18, 7
    3262:	8d e2       	ldi	r24, 0x2D	; 45
    3264:	b7 01       	movw	r22, r14
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	3b d0       	rcall	.+118    	; 0x32e0 <fputc>
    326a:	05 c0       	rjmp	.+10     	; 0x3276 <vfprintf+0x35c>
    326c:	b7 01       	movw	r22, r14
    326e:	80 e3       	ldi	r24, 0x30	; 48
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	36 d0       	rcall	.+108    	; 0x32e0 <fputc>
    3274:	5a 94       	dec	r5
    3276:	a5 14       	cp	r10, r5
    3278:	c8 f3       	brcs	.-14     	; 0x326c <vfprintf+0x352>
    327a:	aa 94       	dec	r10
    327c:	f4 01       	movw	r30, r8
    327e:	ea 0d       	add	r30, r10
    3280:	f1 1d       	adc	r31, r1
    3282:	b7 01       	movw	r22, r14
    3284:	80 81       	ld	r24, Z
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	2b d0       	rcall	.+86     	; 0x32e0 <fputc>
    328a:	a1 10       	cpse	r10, r1
    328c:	f6 cf       	rjmp	.-20     	; 0x327a <vfprintf+0x360>
    328e:	05 c0       	rjmp	.+10     	; 0x329a <vfprintf+0x380>
    3290:	b7 01       	movw	r22, r14
    3292:	80 e2       	ldi	r24, 0x20	; 32
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	24 d0       	rcall	.+72     	; 0x32e0 <fputc>
    3298:	3a 94       	dec	r3
    329a:	31 10       	cpse	r3, r1
    329c:	f9 cf       	rjmp	.-14     	; 0x3290 <vfprintf+0x376>
    329e:	50 ce       	rjmp	.-864    	; 0x2f40 <vfprintf+0x26>
    32a0:	f7 01       	movw	r30, r14
    32a2:	26 81       	ldd	r18, Z+6	; 0x06
    32a4:	37 81       	ldd	r19, Z+7	; 0x07
    32a6:	02 c0       	rjmp	.+4      	; 0x32ac <vfprintf+0x392>
    32a8:	2f ef       	ldi	r18, 0xFF	; 255
    32aa:	3f ef       	ldi	r19, 0xFF	; 255
    32ac:	c9 01       	movw	r24, r18
    32ae:	2c 96       	adiw	r28, 0x0c	; 12
    32b0:	e2 e1       	ldi	r30, 0x12	; 18
    32b2:	bc c0       	rjmp	.+376    	; 0x342c <__epilogue_restores__>

000032b4 <strnlen_P>:
    32b4:	fc 01       	movw	r30, r24
    32b6:	05 90       	lpm	r0, Z+
    32b8:	61 50       	subi	r22, 0x01	; 1
    32ba:	70 40       	sbci	r23, 0x00	; 0
    32bc:	01 10       	cpse	r0, r1
    32be:	d8 f7       	brcc	.-10     	; 0x32b6 <strnlen_P+0x2>
    32c0:	80 95       	com	r24
    32c2:	90 95       	com	r25
    32c4:	8e 0f       	add	r24, r30
    32c6:	9f 1f       	adc	r25, r31
    32c8:	08 95       	ret

000032ca <strnlen>:
    32ca:	fc 01       	movw	r30, r24
    32cc:	61 50       	subi	r22, 0x01	; 1
    32ce:	70 40       	sbci	r23, 0x00	; 0
    32d0:	01 90       	ld	r0, Z+
    32d2:	01 10       	cpse	r0, r1
    32d4:	d8 f7       	brcc	.-10     	; 0x32cc <strnlen+0x2>
    32d6:	80 95       	com	r24
    32d8:	90 95       	com	r25
    32da:	8e 0f       	add	r24, r30
    32dc:	9f 1f       	adc	r25, r31
    32de:	08 95       	ret

000032e0 <fputc>:
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	8c 01       	movw	r16, r24
    32ea:	eb 01       	movw	r28, r22
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	81 fd       	sbrc	r24, 1
    32f0:	03 c0       	rjmp	.+6      	; 0x32f8 <fputc+0x18>
    32f2:	0f ef       	ldi	r16, 0xFF	; 255
    32f4:	1f ef       	ldi	r17, 0xFF	; 255
    32f6:	1a c0       	rjmp	.+52     	; 0x332c <fputc+0x4c>
    32f8:	82 ff       	sbrs	r24, 2
    32fa:	0d c0       	rjmp	.+26     	; 0x3316 <fputc+0x36>
    32fc:	2e 81       	ldd	r18, Y+6	; 0x06
    32fe:	3f 81       	ldd	r19, Y+7	; 0x07
    3300:	8c 81       	ldd	r24, Y+4	; 0x04
    3302:	9d 81       	ldd	r25, Y+5	; 0x05
    3304:	28 17       	cp	r18, r24
    3306:	39 07       	cpc	r19, r25
    3308:	64 f4       	brge	.+24     	; 0x3322 <fputc+0x42>
    330a:	e8 81       	ld	r30, Y
    330c:	f9 81       	ldd	r31, Y+1	; 0x01
    330e:	01 93       	st	Z+, r16
    3310:	f9 83       	std	Y+1, r31	; 0x01
    3312:	e8 83       	st	Y, r30
    3314:	06 c0       	rjmp	.+12     	; 0x3322 <fputc+0x42>
    3316:	e8 85       	ldd	r30, Y+8	; 0x08
    3318:	f9 85       	ldd	r31, Y+9	; 0x09
    331a:	80 2f       	mov	r24, r16
    331c:	09 95       	icall
    331e:	89 2b       	or	r24, r25
    3320:	41 f7       	brne	.-48     	; 0x32f2 <fputc+0x12>
    3322:	8e 81       	ldd	r24, Y+6	; 0x06
    3324:	9f 81       	ldd	r25, Y+7	; 0x07
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	9f 83       	std	Y+7, r25	; 0x07
    332a:	8e 83       	std	Y+6, r24	; 0x06
    332c:	c8 01       	movw	r24, r16
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	1f 91       	pop	r17
    3334:	0f 91       	pop	r16
    3336:	08 95       	ret

00003338 <__ultoa_invert>:
    3338:	fa 01       	movw	r30, r20
    333a:	aa 27       	eor	r26, r26
    333c:	28 30       	cpi	r18, 0x08	; 8
    333e:	51 f1       	breq	.+84     	; 0x3394 <__ultoa_invert+0x5c>
    3340:	20 31       	cpi	r18, 0x10	; 16
    3342:	81 f1       	breq	.+96     	; 0x33a4 <__ultoa_invert+0x6c>
    3344:	e8 94       	clt
    3346:	6f 93       	push	r22
    3348:	6e 7f       	andi	r22, 0xFE	; 254
    334a:	6e 5f       	subi	r22, 0xFE	; 254
    334c:	7f 4f       	sbci	r23, 0xFF	; 255
    334e:	8f 4f       	sbci	r24, 0xFF	; 255
    3350:	9f 4f       	sbci	r25, 0xFF	; 255
    3352:	af 4f       	sbci	r26, 0xFF	; 255
    3354:	b1 e0       	ldi	r27, 0x01	; 1
    3356:	3e d0       	rcall	.+124    	; 0x33d4 <__ultoa_invert+0x9c>
    3358:	b4 e0       	ldi	r27, 0x04	; 4
    335a:	3c d0       	rcall	.+120    	; 0x33d4 <__ultoa_invert+0x9c>
    335c:	67 0f       	add	r22, r23
    335e:	78 1f       	adc	r23, r24
    3360:	89 1f       	adc	r24, r25
    3362:	9a 1f       	adc	r25, r26
    3364:	a1 1d       	adc	r26, r1
    3366:	68 0f       	add	r22, r24
    3368:	79 1f       	adc	r23, r25
    336a:	8a 1f       	adc	r24, r26
    336c:	91 1d       	adc	r25, r1
    336e:	a1 1d       	adc	r26, r1
    3370:	6a 0f       	add	r22, r26
    3372:	71 1d       	adc	r23, r1
    3374:	81 1d       	adc	r24, r1
    3376:	91 1d       	adc	r25, r1
    3378:	a1 1d       	adc	r26, r1
    337a:	20 d0       	rcall	.+64     	; 0x33bc <__ultoa_invert+0x84>
    337c:	09 f4       	brne	.+2      	; 0x3380 <__ultoa_invert+0x48>
    337e:	68 94       	set
    3380:	3f 91       	pop	r19
    3382:	2a e0       	ldi	r18, 0x0A	; 10
    3384:	26 9f       	mul	r18, r22
    3386:	11 24       	eor	r1, r1
    3388:	30 19       	sub	r19, r0
    338a:	30 5d       	subi	r19, 0xD0	; 208
    338c:	31 93       	st	Z+, r19
    338e:	de f6       	brtc	.-74     	; 0x3346 <__ultoa_invert+0xe>
    3390:	cf 01       	movw	r24, r30
    3392:	08 95       	ret
    3394:	46 2f       	mov	r20, r22
    3396:	47 70       	andi	r20, 0x07	; 7
    3398:	40 5d       	subi	r20, 0xD0	; 208
    339a:	41 93       	st	Z+, r20
    339c:	b3 e0       	ldi	r27, 0x03	; 3
    339e:	0f d0       	rcall	.+30     	; 0x33be <__ultoa_invert+0x86>
    33a0:	c9 f7       	brne	.-14     	; 0x3394 <__ultoa_invert+0x5c>
    33a2:	f6 cf       	rjmp	.-20     	; 0x3390 <__ultoa_invert+0x58>
    33a4:	46 2f       	mov	r20, r22
    33a6:	4f 70       	andi	r20, 0x0F	; 15
    33a8:	40 5d       	subi	r20, 0xD0	; 208
    33aa:	4a 33       	cpi	r20, 0x3A	; 58
    33ac:	18 f0       	brcs	.+6      	; 0x33b4 <__ultoa_invert+0x7c>
    33ae:	49 5d       	subi	r20, 0xD9	; 217
    33b0:	31 fd       	sbrc	r19, 1
    33b2:	40 52       	subi	r20, 0x20	; 32
    33b4:	41 93       	st	Z+, r20
    33b6:	02 d0       	rcall	.+4      	; 0x33bc <__ultoa_invert+0x84>
    33b8:	a9 f7       	brne	.-22     	; 0x33a4 <__ultoa_invert+0x6c>
    33ba:	ea cf       	rjmp	.-44     	; 0x3390 <__ultoa_invert+0x58>
    33bc:	b4 e0       	ldi	r27, 0x04	; 4
    33be:	a6 95       	lsr	r26
    33c0:	97 95       	ror	r25
    33c2:	87 95       	ror	r24
    33c4:	77 95       	ror	r23
    33c6:	67 95       	ror	r22
    33c8:	ba 95       	dec	r27
    33ca:	c9 f7       	brne	.-14     	; 0x33be <__ultoa_invert+0x86>
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	61 05       	cpc	r22, r1
    33d0:	71 05       	cpc	r23, r1
    33d2:	08 95       	ret
    33d4:	9b 01       	movw	r18, r22
    33d6:	ac 01       	movw	r20, r24
    33d8:	0a 2e       	mov	r0, r26
    33da:	06 94       	lsr	r0
    33dc:	57 95       	ror	r21
    33de:	47 95       	ror	r20
    33e0:	37 95       	ror	r19
    33e2:	27 95       	ror	r18
    33e4:	ba 95       	dec	r27
    33e6:	c9 f7       	brne	.-14     	; 0x33da <__ultoa_invert+0xa2>
    33e8:	62 0f       	add	r22, r18
    33ea:	73 1f       	adc	r23, r19
    33ec:	84 1f       	adc	r24, r20
    33ee:	95 1f       	adc	r25, r21
    33f0:	a0 1d       	adc	r26, r0
    33f2:	08 95       	ret

000033f4 <__prologue_saves__>:
    33f4:	2f 92       	push	r2
    33f6:	3f 92       	push	r3
    33f8:	4f 92       	push	r4
    33fa:	5f 92       	push	r5
    33fc:	6f 92       	push	r6
    33fe:	7f 92       	push	r7
    3400:	8f 92       	push	r8
    3402:	9f 92       	push	r9
    3404:	af 92       	push	r10
    3406:	bf 92       	push	r11
    3408:	cf 92       	push	r12
    340a:	df 92       	push	r13
    340c:	ef 92       	push	r14
    340e:	ff 92       	push	r15
    3410:	0f 93       	push	r16
    3412:	1f 93       	push	r17
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	cd b7       	in	r28, 0x3d	; 61
    341a:	de b7       	in	r29, 0x3e	; 62
    341c:	ca 1b       	sub	r28, r26
    341e:	db 0b       	sbc	r29, r27
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	09 94       	ijmp

0000342c <__epilogue_restores__>:
    342c:	2a 88       	ldd	r2, Y+18	; 0x12
    342e:	39 88       	ldd	r3, Y+17	; 0x11
    3430:	48 88       	ldd	r4, Y+16	; 0x10
    3432:	5f 84       	ldd	r5, Y+15	; 0x0f
    3434:	6e 84       	ldd	r6, Y+14	; 0x0e
    3436:	7d 84       	ldd	r7, Y+13	; 0x0d
    3438:	8c 84       	ldd	r8, Y+12	; 0x0c
    343a:	9b 84       	ldd	r9, Y+11	; 0x0b
    343c:	aa 84       	ldd	r10, Y+10	; 0x0a
    343e:	b9 84       	ldd	r11, Y+9	; 0x09
    3440:	c8 84       	ldd	r12, Y+8	; 0x08
    3442:	df 80       	ldd	r13, Y+7	; 0x07
    3444:	ee 80       	ldd	r14, Y+6	; 0x06
    3446:	fd 80       	ldd	r15, Y+5	; 0x05
    3448:	0c 81       	ldd	r16, Y+4	; 0x04
    344a:	1b 81       	ldd	r17, Y+3	; 0x03
    344c:	aa 81       	ldd	r26, Y+2	; 0x02
    344e:	b9 81       	ldd	r27, Y+1	; 0x01
    3450:	ce 0f       	add	r28, r30
    3452:	d1 1d       	adc	r29, r1
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	ed 01       	movw	r28, r26
    3460:	08 95       	ret

00003462 <_exit>:
    3462:	f8 94       	cli

00003464 <__stop_program>:
    3464:	ff cf       	rjmp	.-2      	; 0x3464 <__stop_program>
